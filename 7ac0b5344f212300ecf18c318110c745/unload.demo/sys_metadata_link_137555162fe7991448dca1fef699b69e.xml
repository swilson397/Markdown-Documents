<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>unload.demo</directory>
        <documentkey>6d64a8e5db610010d0cb5385ca96196f</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_58056_md_docs_markdown_source"&gt;
    &lt;x_58056_md_docs_markdown_source action="INSERT_OR_UPDATE"&gt;
        &lt;abstract_syntax_tree&gt;{
	"type": "Program",
	"body": [
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "CA_Spectrum"
					},
					"init": {
						"type": "CallExpression",
						"callee": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "Identifier",
								"name": "Class"
							},
							"property": {
								"type": "Identifier",
								"name": "create"
							}
						},
						"arguments": []
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "SUCCESS"
					},
					"init": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "MemberExpression",
								"computed": false,
								"object": {
									"type": "MemberExpression",
									"computed": false,
									"object": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "MemberExpression",
											"computed": false,
											"object": {
												"type": "MemberExpression",
												"computed": false,
												"object": {
													"type": "Identifier",
													"name": "Packages"
												},
												"property": {
													"type": "Identifier",
													"name": "com"
												}
											},
											"property": {
												"type": "Identifier",
												"name": "service_now"
											}
										},
										"property": {
											"type": "Identifier",
											"name": "mid"
										}
									},
									"property": {
										"type": "Identifier",
										"name": "probe"
									}
								},
								"property": {
									"type": "Identifier",
									"name": "tpcon"
								}
							},
							"property": {
								"type": "Identifier",
								"name": "OperationStatusType"
							}
						},
						"property": {
							"type": "Identifier",
							"name": "SUCCESS"
						}
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "FAILURE"
					},
					"init": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "MemberExpression",
								"computed": false,
								"object": {
									"type": "MemberExpression",
									"computed": false,
									"object": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "MemberExpression",
											"computed": false,
											"object": {
												"type": "MemberExpression",
												"computed": false,
												"object": {
													"type": "Identifier",
													"name": "Packages"
												},
												"property": {
													"type": "Identifier",
													"name": "com"
												}
											},
											"property": {
												"type": "Identifier",
												"name": "service_now"
											}
										},
										"property": {
											"type": "Identifier",
											"name": "mid"
										}
									},
									"property": {
										"type": "Identifier",
										"name": "probe"
									}
								},
								"property": {
									"type": "Identifier",
									"name": "tpcon"
								}
							},
							"property": {
								"type": "Identifier",
								"name": "OperationStatusType"
							}
						},
						"property": {
							"type": "Identifier",
							"name": "FAILURE"
						}
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "Event"
					},
					"init": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "MemberExpression",
								"computed": false,
								"object": {
									"type": "MemberExpression",
									"computed": false,
									"object": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "Identifier",
											"name": "Packages"
										},
										"property": {
											"type": "Identifier",
											"name": "com"
										}
									},
									"property": {
										"type": "Identifier",
										"name": "snc"
									}
								},
								"property": {
									"type": "Identifier",
									"name": "commons"
								}
							},
							"property": {
								"type": "Identifier",
								"name": "eventmgmt"
							}
						},
						"property": {
							"type": "Identifier",
							"name": "Event"
						}
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "SNEventSenderProvider"
					},
					"init": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "MemberExpression",
								"computed": false,
								"object": {
									"type": "MemberExpression",
									"computed": false,
									"object": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "MemberExpression",
											"computed": false,
											"object": {
												"type": "Identifier",
												"name": "Packages"
											},
											"property": {
												"type": "Identifier",
												"name": "com"
											}
										},
										"property": {
											"type": "Identifier",
											"name": "service_now"
										}
									},
									"property": {
										"type": "Identifier",
										"name": "mid"
									}
								},
								"property": {
									"type": "Identifier",
									"name": "probe"
								}
							},
							"property": {
								"type": "Identifier",
								"name": "event"
							}
						},
						"property": {
							"type": "Identifier",
							"name": "SNEventSenderProvider"
						}
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "VariableDeclaration",
			"declarations": [
				{
					"type": "VariableDeclarator",
					"id": {
						"type": "Identifier",
						"name": "HTTPRequest"
					},
					"init": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "MemberExpression",
							"computed": false,
							"object": {
								"type": "MemberExpression",
								"computed": false,
								"object": {
									"type": "MemberExpression",
									"computed": false,
									"object": {
										"type": "Identifier",
										"name": "Packages"
									},
									"property": {
										"type": "Identifier",
										"name": "com"
									}
								},
								"property": {
									"type": "Identifier",
									"name": "glide"
								}
							},
							"property": {
								"type": "Identifier",
								"name": "communications"
							}
						},
						"property": {
							"type": "Identifier",
							"name": "HTTPRequest"
						}
					}
				}
			],
			"kind": "var"
		},
		{
			"type": "ExpressionStatement",
			"expression": {
				"type": "AssignmentExpression",
				"operator": "=",
				"left": {
					"type": "MemberExpression",
					"computed": false,
					"object": {
						"type": "Identifier",
						"name": "CA_Spectrum"
					},
					"property": {
						"type": "Identifier",
						"name": "prototype"
					}
				},
				"right": {
					"type": "CallExpression",
					"callee": {
						"type": "MemberExpression",
						"computed": false,
						"object": {
							"type": "Identifier",
							"name": "Object"
						},
						"property": {
							"type": "Identifier",
							"name": "extendsObject"
						}
					},
					"arguments": [
						{
							"type": "Identifier",
							"name": "AProbe"
						},
						{
							"type": "ObjectExpression",
							"properties": [
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "CA Spectrum",
										"raw": "\"CA Spectrum\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "DEBUG"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": true,
										"raw": "true"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_EVENTS_TO_FETCH"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": 3000,
										"raw": "3000"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_SUBSCRIPTION_LOOPS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": 10,
										"raw": "10"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "StringUtil"
									},
									"computed": false,
									"value": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "MemberExpression",
											"computed": false,
											"object": {
												"type": "MemberExpression",
												"computed": false,
												"object": {
													"type": "MemberExpression",
													"computed": false,
													"object": {
														"type": "Identifier",
														"name": "Packages"
													},
													"property": {
														"type": "Identifier",
														"name": "com"
													}
												},
												"property": {
													"type": "Identifier",
													"name": "glide"
												}
											},
											"property": {
												"type": "Identifier",
												"name": "util"
											}
										},
										"property": {
											"type": "Identifier",
											"name": "StringUtil"
										}
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "Properties"
									},
									"computed": false,
									"value": {
										"type": "MemberExpression",
										"computed": false,
										"object": {
											"type": "MemberExpression",
											"computed": false,
											"object": {
												"type": "MemberExpression",
												"computed": false,
												"object": {
													"type": "Identifier",
													"name": "Packages"
												},
												"property": {
													"type": "Identifier",
													"name": "java"
												}
											},
											"property": {
												"type": "Identifier",
												"name": "util"
											}
										},
										"property": {
											"type": "Identifier",
											"name": "Properties"
										}
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SPECTRUM_ALARM_ATTRIBUTES"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x10000",
													"raw": "\"0x10000\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelTypeName",
													"raw": "\"modelTypeName\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x10001",
													"raw": "\"0x10001\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelTypeOfAlarmedModel",
													"raw": "\"modelTypeOfAlarmedModel\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x10009",
													"raw": "\"0x10009\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "securityString",
													"raw": "\"securityString\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1000a",
													"raw": "\"0x1000a\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "condition",
													"raw": "\"condition\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1006e",
													"raw": "\"0x1006e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelName",
													"raw": "\"modelName\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11ee8",
													"raw": "\"0x11ee8\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelClass",
													"raw": "\"modelClass\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4d",
													"raw": "\"0x11f4d\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "acknowledged",
													"raw": "\"acknowledged\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4e",
													"raw": "\"0x11f4e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "creationDate",
													"raw": "\"creationDate\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4f",
													"raw": "\"0x11f4f\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "alarmStatus",
													"raw": "\"alarmStatus\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f50",
													"raw": "\"0x11f50\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "causeCode",
													"raw": "\"causeCode\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f52",
													"raw": "\"0x11f52\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "eventIdList",
													"raw": "\"eventIdList\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f53",
													"raw": "\"0x11f53\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelHandleOfAlarmedModel",
													"raw": "\"modelHandleOfAlarmedModel\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f54",
													"raw": "\"0x11f54\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "primaryAlarm",
													"raw": "\"primaryAlarm\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f56",
													"raw": "\"0x11f56\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "severity",
													"raw": "\"severity\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f57",
													"raw": "\"0x11f57\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "troubleshooter",
													"raw": "\"troubleshooter\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f9b",
													"raw": "\"0x11f9b\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "userClearable",
													"raw": "\"userClearable\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f9c",
													"raw": "\"0x11f9c\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "alarmId",
													"raw": "\"alarmId\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11fc4",
													"raw": "\"0x11fc4\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "alarmSource",
													"raw": "\"alarmSource\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11fc5",
													"raw": "\"0x11fc5\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "occurrences",
													"raw": "\"occurrences\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11fc6",
													"raw": "\"0x11fc6\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "troubleshooterModelHandle",
													"raw": "\"troubleshooterModelHandle\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12022",
													"raw": "\"0x12022\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "troubleTicketId",
													"raw": "\"troubleTicketId\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1296e",
													"raw": "\"0x1296e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "originatingEvent",
													"raw": "\"originatingEvent\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a04",
													"raw": "\"0x12a04\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "symptomList",
													"raw": "\"symptomList\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a05",
													"raw": "\"0x12a05\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "causeList",
													"raw": "\"causeList\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a06",
													"raw": "\"0x12a06\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "symptomCount",
													"raw": "\"symptomCount\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a07",
													"raw": "\"0x12a07\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "causeCount",
													"raw": "\"causeCount\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a56",
													"raw": "\"0x12a56\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "significantModelId",
													"raw": "\"significantModelId\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a63",
													"raw": "\"0x12a63\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "webContextURL",
													"raw": "\"webContextURL\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a6f",
													"raw": "\"0x12a6f\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "eventSymptomList",
													"raw": "\"eventSymptomList\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a70",
													"raw": "\"0x12a70\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "eventSymptomCount",
													"raw": "\"eventSymptomCount\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12a82",
													"raw": "\"0x12a82\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "IPtoDomainMap",
													"raw": "\"IPtoDomainMap\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12b4c",
													"raw": "\"0x12b4c\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "alarmTitle",
													"raw": "\"alarmTitle\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12c05",
													"raw": "\"0x12c05\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "secureDomainDisplay",
													"raw": "\"secureDomainDisplay\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12d7f",
													"raw": "\"0x12d7f\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "networkAddress",
													"raw": "\"networkAddress\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12d83",
													"raw": "\"0x12d83\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "secureDomainAddress",
													"raw": "\"secureDomainAddress\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1321a",
													"raw": "\"0x1321a\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "lastOccurrenceDate",
													"raw": "\"lastOccurrenceDate\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129aa",
													"raw": "\"0x129aa\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelId",
													"raw": "\"modelId\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129ab",
													"raw": "\"0x129ab\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelTypeId",
													"raw": "\"modelTypeId\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b47",
													"raw": "\"0x11b47\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "createDate",
													"raw": "\"createDate\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b41",
													"raw": "\"0x11b41\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "createTime",
													"raw": "\"createTime\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129e7",
													"raw": "\"0x129e7\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "topologyModelName",
													"raw": "\"topologyModelName\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129fa",
													"raw": "\"0x129fa\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "modelHandle",
													"raw": "\"modelHandle\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x110df",
													"raw": "\"0x110df\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "macAddress",
													"raw": "\"macAddress\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SPECTRUM_DATE_TIME_ATTRIBUTES"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4e",
													"raw": "\"0x11f4e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": true,
													"raw": "true"
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1321a",
													"raw": "\"0x1321a\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": true,
													"raw": "true"
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b47",
													"raw": "\"0x11b47\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": true,
													"raw": "true"
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b41",
													"raw": "\"0x11b41\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": true,
													"raw": "true"
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SPECTRUM_EVENT_MAPPING"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12022",
													"raw": "\"0x12022\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f9c",
													"raw": "\"0x11f9c\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "message_key",
													"raw": "\"message_key\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f56",
													"raw": "\"0x11f56\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "severity",
													"raw": "\"severity\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129e7",
													"raw": "\"0x129e7\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11ee8",
													"raw": "\"0x11ee8\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1000a",
													"raw": "\"0x1000a\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4f",
													"raw": "\"0x11f4f\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "resolution_state",
													"raw": "\"resolution_state\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4d",
													"raw": "\"0x11f4d\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12b4c",
													"raw": "\"0x12b4c\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "type",
													"raw": "\"type\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1006e",
													"raw": "\"0x1006e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "node",
													"raw": "\"node\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f4e",
													"raw": "\"0x11f4e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1296e",
													"raw": "\"0x1296e\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "description",
													"raw": "\"description\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11f50",
													"raw": "\"0x11f50\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x1321a",
													"raw": "\"0x1321a\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x129fa",
													"raw": "\"0x129fa\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x12d7f",
													"raw": "\"0x12d7f\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "resource_1",
													"raw": "\"resource_1\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11fc5",
													"raw": "\"0x11fc5\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x110df",
													"raw": "\"0x110df\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "resource_2",
													"raw": "\"resource_2\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b47",
													"raw": "\"0x11b47\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0x11b41",
													"raw": "\"0x11b41\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "",
													"raw": "\"\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "ALERT_UPDATE_MAPPING"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "incident",
													"raw": "\"incident\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "0x12022",
													"raw": "\"0x12022\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ALARM_RESPONSE_LIST"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.alarm-response-list",
										"raw": "\"ns1.alarm-response-list\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.alarm-update-response-list",
										"raw": "\"ns1.alarm-update-response-list\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ALARM_RESPONSES"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.alarm-responses",
										"raw": "\"ns1.alarm-responses\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ALARM"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.alarm",
										"raw": "\"ns1.alarm\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_LINK"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.link",
										"raw": "\"ns1.link\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ATTRIBUTES"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.attribute",
										"raw": "\"ns1.attribute\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_SUBSCRIPTION_RESPONSE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.subscription-response",
										"raw": "\"ns1.subscription-response\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_SUBSCRIPTION_ID"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.subscription-id",
										"raw": "\"ns1.subscription-id\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_HREF"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@href",
										"raw": "\"@href\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_THROTTLE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@throttle",
										"raw": "\"@throttle\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_TOTAL_ALARMS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@total-alarms",
										"raw": "\"@total-alarms\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ID"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@id",
										"raw": "\"@id\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_VALUE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "$",
										"raw": "\"$\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ERROR"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@error",
										"raw": "\"@error\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ERROR_MESSAGE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@error-message",
										"raw": "\"@error-message\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_END_OF_RESULTS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "EndOfResults",
										"raw": "\"EndOfResults\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_SUCCESS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "Success",
										"raw": "\"Success\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_CREATION_DATE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "0x11f4e",
										"raw": "\"0x11f4e\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_LAST_OCCURRENCE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "0x1321a",
										"raw": "\"0x1321a\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "Invalid subscription ID.",
										"raw": "\"Invalid subscription ID.\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_NOTIFICATION_LIST"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.notification-list",
										"raw": "\"ns1.notification-list\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_ADDED_INSTANCE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.added-instance",
										"raw": "\"ns1.added-instance\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_REMOVED_INSTANCE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "ns1.removed-instance",
										"raw": "\"ns1.removed-instance\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_PRE_EXISTING"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@preexisting",
										"raw": "\"@preexisting\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "CA_SPECTRUM_DELETED"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "@deleted",
										"raw": "\"@deleted\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "ALARM_CONTENT_FILTER_DEFAULT"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "0x11f4e",
										"raw": "\"0x11f4e\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_NOTIFICATIONS_DEFAULT"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": 3000,
										"raw": "3000"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "PULL_INTERVAL_DEFAULT"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": 240000,
										"raw": "240000"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_QUEUE_SIZE_DEFAULT"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": 15000,
										"raw": "15000"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "ALARM_CONTENT_FILTERS"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "lastOccurrenceDate",
													"raw": "\"lastOccurrenceDate\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "0x1321a",
													"raw": "\"0x1321a\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "creationDate",
													"raw": "\"creationDate\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "0x11f4e",
													"raw": "\"0x11f4e\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "contentFilterAttribute"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "",
										"raw": "\"\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "timeOfEventAttribute"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "",
										"raw": "\"\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SN_THROTTLE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "throttle",
										"raw": "\"throttle\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_NOTIFICATIONS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "maxNotifications",
										"raw": "\"maxNotifications\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "PULL_INTERVAL"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "pullInterval",
										"raw": "\"pullInterval\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "MAX_QUEUE_SIZE"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "maxQueueSize",
										"raw": "\"maxQueueSize\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "LAST_EVENT_SUBSCRIPTION_ID"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "subscription_id",
										"raw": "\"subscription_id\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "LAST_EVENT_LAST_OCCURRENCE_SECONDS"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "last_occurrence",
										"raw": "\"last_occurrence\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SPECTRUM_SEVERITY_MAP"
									},
									"computed": false,
									"value": {
										"type": "ObjectExpression",
										"properties": [
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "0",
													"raw": "\"0\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "5",
													"raw": "\"5\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "1",
													"raw": "\"1\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "3",
													"raw": "\"3\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "2",
													"raw": "\"2\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "2",
													"raw": "\"2\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "3",
													"raw": "\"3\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "1",
													"raw": "\"1\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "4",
													"raw": "\"4\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "5",
													"raw": "\"5\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "5",
													"raw": "\"5\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "5",
													"raw": "\"5\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											},
											{
												"type": "Property",
												"key": {
													"type": "Literal",
													"value": "6",
													"raw": "\"6\""
												},
												"computed": false,
												"value": {
													"type": "Literal",
													"value": "5",
													"raw": "\"5\""
												},
												"kind": "init",
												"method": false,
												"shorthand": false
											}
										]
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "ALARM_CONTENT_XML"
									},
									"computed": false,
									"value": {
										"type": "BinaryExpression",
										"operator": "+",
										"left": {
											"type": "BinaryExpression",
											"operator": "+",
											"left": {
												"type": "BinaryExpression",
												"operator": "+",
												"left": {
													"type": "BinaryExpression",
													"operator": "+",
													"left": {
														"type": "BinaryExpression",
														"operator": "+",
														"left": {
															"type": "Literal",
															"value": "&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;&amp;lt;rs:alarm-request throttlesize=\"${throttle}\"",
															"raw": "'&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;&amp;lt;rs:alarm-request throttlesize=\"${throttle}\"'"
														},
														"right": {
															"type": "Literal",
															"value": " xmlns:rs=\"http://www.ca.com/spectrum/restful/schema/request\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
															"raw": "' xmlns:rs=\"http://www.ca.com/spectrum/restful/schema/request\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'"
														}
													},
													"right": {
														"type": "Literal",
														"value": " xsi:schemaLocation=\"http://www.ca.com/spectrum/restful/schema/request ../../../xsd/Request.xsd \"&amp;gt;&amp;lt;!-- Attributes of Interest --&amp;gt;",
														"raw": "' xsi:schemaLocation=\"http://www.ca.com/spectrum/restful/schema/request ../../../xsd/Request.xsd \"&amp;gt;&amp;lt;!-- Attributes of Interest --&amp;gt;'"
													}
												},
												"right": {
													"type": "Literal",
													"value": "&amp;lt;rs:attribute-filter&amp;gt;&amp;lt;search-criteria xmlns=\"http://www.ca.com/spectrum/restful/schema/filter\"&amp;gt;&amp;lt;filtered-models&amp;gt;&amp;lt;greater-than&amp;gt;",
													"raw": "'&amp;lt;rs:attribute-filter&amp;gt;&amp;lt;search-criteria xmlns=\"http://www.ca.com/spectrum/restful/schema/filter\"&amp;gt;&amp;lt;filtered-models&amp;gt;&amp;lt;greater-than&amp;gt;'"
												}
											},
											"right": {
												"type": "Literal",
												"value": "&amp;lt;attribute id=\"${search_filter_attribute}\"&amp;gt;&amp;lt;value&amp;gt;${date_seconds}&amp;lt;/value&amp;gt;&amp;lt;/attribute&amp;gt;&amp;lt;/greater-than&amp;gt;&amp;lt;/filtered-models&amp;gt;&amp;lt;/search-criteria&amp;gt;",
												"raw": "'&amp;lt;attribute id=\"${search_filter_attribute}\"&amp;gt;&amp;lt;value&amp;gt;${date_seconds}&amp;lt;/value&amp;gt;&amp;lt;/attribute&amp;gt;&amp;lt;/greater-than&amp;gt;&amp;lt;/filtered-models&amp;gt;&amp;lt;/search-criteria&amp;gt;'"
											}
										},
										"right": {
											"type": "Literal",
											"value": "&amp;lt;/rs:attribute-filter&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;",
											"raw": "'&amp;lt;/rs:attribute-filter&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;'"
										}
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "SUBSCRIPTION_CONTENT_XML"
									},
									"computed": false,
									"value": {
										"type": "BinaryExpression",
										"operator": "+",
										"left": {
											"type": "BinaryExpression",
											"operator": "+",
											"left": {
												"type": "BinaryExpression",
												"operator": "+",
												"left": {
													"type": "BinaryExpression",
													"operator": "+",
													"left": {
														"type": "BinaryExpression",
														"operator": "+",
														"left": {
															"type": "BinaryExpression",
															"operator": "+",
															"left": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "Literal",
																		"value": "&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;&amp;lt;rs:subscription-request ",
																		"raw": "'&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;&amp;lt;rs:subscription-request '"
																	},
																	"right": {
																		"type": "Literal",
																		"value": " send-preexisting-instances=\"${send_preexisting_instances}\"",
																		"raw": "' send-preexisting-instances=\"${send_preexisting_instances}\"'"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": " xmlns:rs=\"http://www.ca.com/spectrum/restful/schema/request\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
																	"raw": "' xmlns:rs=\"http://www.ca.com/spectrum/restful/schema/request\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'"
																}
															},
															"right": {
																"type": "Literal",
																"value": " xsi:schemaLocation=\"http://www.ca.com/spectrum/restful/schema/request ../../../Rest.a/src/xsd/Request.xsd \"&amp;gt;",
																"raw": "' xsi:schemaLocation=\"http://www.ca.com/spectrum/restful/schema/request ../../../Rest.a/src/xsd/Request.xsd \"&amp;gt;'"
															}
														},
														"right": {
															"type": "Literal",
															"value": "\t&amp;lt;rs:pull-delivery-mode&amp;gt;&amp;lt;rs:max-notifications&amp;gt;${max_notifications}&amp;lt;/rs:max-notifications&amp;gt;",
															"raw": "'\t&amp;lt;rs:pull-delivery-mode&amp;gt;&amp;lt;rs:max-notifications&amp;gt;${max_notifications}&amp;lt;/rs:max-notifications&amp;gt;'"
														}
													},
													"right": {
														"type": "Literal",
														"value": " &amp;lt;rs:max-queue-size&amp;gt;${max_queue_size}&amp;lt;/rs:max-queue-size&amp;gt;",
														"raw": "' &amp;lt;rs:max-queue-size&amp;gt;${max_queue_size}&amp;lt;/rs:max-queue-size&amp;gt;'"
													}
												},
												"right": {
													"type": "Literal",
													"value": " &amp;lt;rs:pull-interval&amp;gt;${pull_interval}&amp;lt;/rs:pull-interval&amp;gt;",
													"raw": "' &amp;lt;rs:pull-interval&amp;gt;${pull_interval}&amp;lt;/rs:pull-interval&amp;gt;'"
												}
											},
											"right": {
												"type": "Literal",
												"value": " &amp;lt;/rs:pull-delivery-mode&amp;gt;",
												"raw": "' &amp;lt;/rs:pull-delivery-mode&amp;gt;'"
											}
										},
										"right": {
											"type": "Literal",
											"value": " &amp;lt;rs:alarm-request&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;&amp;lt;/rs:subscription-request&amp;gt;",
											"raw": "' &amp;lt;rs:alarm-request&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;&amp;lt;/rs:subscription-request&amp;gt;'"
										}
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "errorMessages"
									},
									"computed": false,
									"value": {
										"type": "ArrayExpression",
										"elements": []
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "firstRun"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": false,
										"raw": "false"
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "subscriptionId"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "",
										"raw": "\"\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "lastOccurrenceSecs"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "",
										"raw": "\"\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "clearedEvents"
									},
									"computed": false,
									"value": {
										"type": "ArrayExpression",
										"elements": []
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "testConnection"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Testing connection",
																"raw": "\"Testing connection\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "DEBUG"
															}
														},
														"right": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "probe"
																	}
																},
																"property": {
																	"type": "Identifier",
																	"name": "getAdditionalParameter"
																}
															},
															"arguments": [
																{
																	"type": "Literal",
																	"value": "debug",
																	"raw": "\"debug\""
																}
															]
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "DEBUG"
															}
														},
														"right": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "DEBUG"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": "true",
																	"raw": "\"true\""
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "DEBUG"
																},
																"right": {
																	"type": "Literal",
																	"value": "1",
																	"raw": "\"1\""
																}
															}
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Debug: ",
																	"raw": "\"Debug: \""
																},
																"right": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "DEBUG"
																	}
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "retVal"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "error_message",
																			"raw": "\"error_message\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "startSubscription"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Literal",
																				"value": false,
																				"raw": "false"
																			}
																		]
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Subscription registration on testConnection failed.",
																						"raw": "\"Subscription registration on testConnection failed.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "error_message"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "_setReValErrorMessage"
																						}
																					},
																					"arguments": []
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "url"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "buildSpectrumPollAlarmsURL"
																							}
																						},
																						"arguments": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_info"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "Test Connection URL ",
																							"raw": "\"Test Connection URL \""
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "url"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "response"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "makeSubscriptionGetCall"
																							}
																						},
																						"arguments": [
																							{
																								"type": "Identifier",
																								"name": "url"
																							}
																						]
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "==",
																				"left": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"right": {
																					"type": "Literal",
																					"value": null,
																					"raw": "null"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "retVal"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "Identifier",
																										"name": "FAILURE"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "toString"
																									}
																								},
																								"arguments": []
																							}
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "Literal",
																									"value": "Failed to connect to CA Spectrum on testConnection call. Response is null.",
																									"raw": "\"Failed to connect to CA Spectrum on testConnection call. Response is null.\""
																								}
																							]
																						}
																					}
																				]
																			},
																			"alternate": {
																				"type": "IfStatement",
																				"test": {
																					"type": "BinaryExpression",
																					"operator": "==",
																					"left": {
																						"type": "Identifier",
																						"name": "response"
																					},
																					"right": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																						}
																					}
																				},
																				"consequent": {
																					"type": "BlockStatement",
																					"body": [
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "AssignmentExpression",
																								"operator": "=",
																								"left": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "Identifier",
																										"name": "retVal"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "status"
																									}
																								},
																								"right": {
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "FAILURE"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "toString"
																										}
																									},
																									"arguments": []
																								}
																							}
																						},
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "_error"
																									}
																								},
																								"arguments": [
																									{
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																										}
																									}
																								]
																							}
																						}
																					]
																				},
																				"alternate": {
																					"type": "BlockStatement",
																					"body": [
																						{
																							"type": "VariableDeclaration",
																							"declarations": [
																								{
																									"type": "VariableDeclarator",
																									"id": {
																										"type": "Identifier",
																										"name": "responseObj"
																									},
																									"init": {
																										"type": "CallExpression",
																										"callee": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "ThisExpression"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "parseResponse"
																											}
																										},
																										"arguments": [
																											{
																												"type": "Identifier",
																												"name": "response"
																											}
																										]
																									}
																								}
																							],
																							"kind": "var"
																						},
																						{
																							"type": "IfStatement",
																							"test": {
																								"type": "BinaryExpression",
																								"operator": "==",
																								"left": {
																									"type": "Identifier",
																									"name": "responseObj"
																								},
																								"right": {
																									"type": "Literal",
																									"value": null,
																									"raw": "null"
																								}
																							},
																							"consequent": {
																								"type": "BlockStatement",
																								"body": [
																									{
																										"type": "ExpressionStatement",
																										"expression": {
																											"type": "AssignmentExpression",
																											"operator": "=",
																											"left": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "Identifier",
																													"name": "retVal"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "status"
																												}
																											},
																											"right": {
																												"type": "CallExpression",
																												"callee": {
																													"type": "MemberExpression",
																													"computed": false,
																													"object": {
																														"type": "Identifier",
																														"name": "FAILURE"
																													},
																													"property": {
																														"type": "Identifier",
																														"name": "toString"
																													}
																												},
																												"arguments": []
																											}
																										}
																									},
																									{
																										"type": "ExpressionStatement",
																										"expression": {
																											"type": "CallExpression",
																											"callee": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "ThisExpression"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "_error"
																												}
																											},
																											"arguments": [
																												{
																													"type": "BinaryExpression",
																													"operator": "+",
																													"left": {
																														"type": "BinaryExpression",
																														"operator": "+",
																														"left": {
																															"type": "Literal",
																															"value": "Response from CA Spectrum is not in expected format: ",
																															"raw": "\"Response from CA Spectrum is not in expected format: \""
																														},
																														"right": {
																															"type": "Identifier",
																															"name": "response"
																														}
																													},
																													"right": {
																														"type": "Literal",
																														"value": ".",
																														"raw": "\".\""
																													}
																												}
																											]
																										}
																									}
																								]
																							},
																							"alternate": {
																								"type": "BlockStatement",
																								"body": [
																									{
																										"type": "ExpressionStatement",
																										"expression": {
																											"type": "AssignmentExpression",
																											"operator": "=",
																											"left": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "Identifier",
																													"name": "retVal"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "status"
																												}
																											},
																											"right": {
																												"type": "CallExpression",
																												"callee": {
																													"type": "MemberExpression",
																													"computed": false,
																													"object": {
																														"type": "Identifier",
																														"name": "SUCCESS"
																													},
																													"property": {
																														"type": "Identifier",
																														"name": "toString"
																													}
																												},
																												"arguments": []
																											}
																										}
																									}
																								]
																							}
																						}
																					]
																				}
																			}
																		}
																	]
																}
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "AssignmentExpression",
																		"operator": "=",
																		"left": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "retVal"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		},
																		"right": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "FAILURE"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "toString"
																				}
																			},
																			"arguments": []
																		}
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "TestConnection ",
																	"raw": "\"TestConnection \""
																},
																"right": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "retVal"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "status"
																	}
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "retVal"
															},
															"property": {
																"type": "Identifier",
																"name": "error_message"
															}
														},
														"right": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "_setReValErrorMessage"
																}
															},
															"arguments": []
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "retVal"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "execute"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "retVal"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "error_message",
																			"raw": "\"error_message\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Execute connection ...",
																"raw": "\"Execute connection ...\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "DEBUG"
															}
														},
														"right": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "probe"
																	}
																},
																"property": {
																	"type": "Identifier",
																	"name": "getAdditionalParameter"
																}
															},
															"arguments": [
																{
																	"type": "Literal",
																	"value": "debug",
																	"raw": "\"debug\""
																}
															]
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "DEBUG"
															}
														},
														"right": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "DEBUG"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": "true",
																	"raw": "\"true\""
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "DEBUG"
																},
																"right": {
																	"type": "Literal",
																	"value": "1",
																	"raw": "\"1\""
																}
															}
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Debug: ",
																	"raw": "\"Debug: \""
																},
																"right": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "DEBUG"
																	}
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_getLastEventInfo"
															}
														},
														"arguments": []
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "contentFilterAttribute"
															}
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "ALARM_CONTENT_FILTER_DEFAULT"
															}
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "timeOfEventAttribute"
															}
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "contentFilterAttribute"
															}
														}
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "pollRetVal"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "pollSubscription"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "MemberExpression",
														"computed": false,
														"object": {
															"type": "Identifier",
															"name": "pollRetVal"
														},
														"property": {
															"type": "Identifier",
															"name": "doDirectPull"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "retVal"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "getAlarmsDirectly"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Subscription Poll unsucccessful. Alarms fetched directly.",
																			"raw": "\"Subscription Poll unsucccessful. Alarms fetched directly.\""
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "pollRetVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "SUCCESS"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "toString"
																			}
																		},
																		"arguments": []
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_debug"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Subscription Poll succcessful.",
																						"raw": "\"Subscription Poll succcessful.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "errorMessages"
																						}
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Subscription Poll succcessful.",
																						"raw": "\"Subscription Poll succcessful.\""
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Subscription Poll unsucccessful.",
																						"raw": "\"Subscription Poll unsucccessful.\""
																					}
																				]
																			}
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": true,
															"object": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"property": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "LAST_EVENT_LAST_OCCURRENCE_SECONDS"
																}
															}
														},
														"right": {
															"type": "Literal",
															"value": "0",
															"raw": "\"0\""
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": true,
															"object": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"property": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "LAST_EVENT_SUBSCRIPTION_ID"
																}
															}
														},
														"right": {
															"type": "Literal",
															"value": "",
															"raw": "\"\""
														}
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;gt;",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "lastOccurrenceSecs"
															}
														},
														"right": {
															"type": "Literal",
															"value": 0,
															"raw": "0"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "lastEvent"
																		},
																		"property": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "LAST_EVENT_LAST_OCCURRENCE_SECONDS"
																			}
																		}
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "&amp;amp;&amp;amp;",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "subscriptionId"
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "!=",
															"left": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "subscriptionId"
																}
															},
															"right": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "lastEvent"
																		},
																		"property": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "LAST_EVENT_SUBSCRIPTION_ID"
																			}
																		}
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "retVal"
															},
															"property": {
																"type": "Identifier",
																"name": "last_event"
															}
														},
														"right": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "Identifier",
																	"name": "JSON"
																},
																"property": {
																	"type": "Identifier",
																	"name": "stringify"
																}
															},
															"arguments": [
																{
																	"type": "Identifier",
																	"name": "lastEvent"
																}
															]
														}
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;gt;",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "errorMessages"
																}
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														},
														"right": {
															"type": "Literal",
															"value": 0,
															"raw": "0"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "error_message"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_setReValErrorMessage"
																			}
																		},
																		"arguments": []
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "retVal"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "pollSubscription"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "events"
															},
															"init": {
																"type": "ArrayExpression",
																"elements": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "errorsFound"
															},
															"init": {
																"type": "Literal",
																"value": false,
																"raw": "false"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alarm"
															},
															"init": null
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "event"
															},
															"init": null
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "sendPreExistingInstances"
															},
															"init": {
																"type": "Literal",
																"value": "true",
																"raw": "\"true\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "retVal"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "error_message",
																			"raw": "\"error_message\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "doDirectPull",
																			"raw": "\"doDirectPull\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": false,
																			"raw": "false"
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "firstRun"
																}
															},
															"right": {
																"type": "UnaryExpression",
																"operator": "!",
																"argument": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "subscriptionId"
																	}
																},
																"prefix": true
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "subscriptionId"
																}
															},
															"right": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "startSubscription"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "sendPreExistingInstances"
																			}
																		]
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "FAILURE"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "toString"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "firstRun"
																		}
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Subscription Id missing. New subscription started.",
																						"raw": "\"Subscription Id missing. New subscription started.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Identifier",
																				"name": "retVal"
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_info"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "First run for collector. New subscription started.",
																						"raw": "\"First run for collector. New subscription started.\""
																					}
																				]
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumPollAlarmsURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "POLL URL ",
																	"raw": "\"POLL URL \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "newAlarmsAdded"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "oldAlarmsAdded"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alarmsRemoved"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "done"
															},
															"init": {
																"type": "Literal",
																"value": false,
																"raw": "false"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "ctr"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "WhileStatement",
													"test": {
														"type": "UnaryExpression",
														"operator": "!",
														"argument": {
															"type": "Identifier",
															"name": "done"
														},
														"prefix": true
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "response"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "makeSubscriptionGetCall"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "url"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "Failed to connect to CA Spectrum on Subscription Get call. Response is null.",
																						"raw": "\"Failed to connect to CA Spectrum on Subscription Get call. Response is null.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Identifier",
																				"name": "retVal"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "subscriptionId"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "startSubscription"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "sendPreExistingInstances"
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "doDirectPull"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Identifier",
																				"name": "retVal"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "responseObj"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "parseResponse"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "response"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "responseObj"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "Literal",
																								"value": "Response from CA Spectrum is not in expected format: ",
																								"raw": "\"Response from CA Spectrum is not in expected format: \""
																							},
																							"right": {
																								"type": "Identifier",
																								"name": "response"
																							}
																						},
																						"right": {
																							"type": "Literal",
																							"value": ".",
																							"raw": "\".\""
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Identifier",
																				"name": "retVal"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "notificationList"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "responseObj"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_NOTIFICATION_LIST"
																				}
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "addedInstances"
																		},
																		"init": {
																			"type": "ArrayExpression",
																			"elements": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "removedInstances"
																		},
																		"init": {
																			"type": "ArrayExpression",
																			"elements": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "!==",
																		"left": {
																			"type": "Identifier",
																			"name": "notificationList"
																		},
																		"right": {
																			"type": "Literal",
																			"value": null,
																			"raw": "null"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "===",
																		"left": {
																			"type": "UnaryExpression",
																			"operator": "typeof",
																			"argument": {
																				"type": "Identifier",
																				"name": "notificationList"
																			},
																			"prefix": true
																		},
																		"right": {
																			"type": "Literal",
																			"value": "object",
																			"raw": "'object'"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_ADDED_INSTANCE"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "notificationList"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "addedInstances"
																							},
																							"right": {
																								"type": "MemberExpression",
																								"computed": true,
																								"object": {
																									"type": "Identifier",
																									"name": "notificationList"
																								},
																								"property": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_ADDED_INSTANCE"
																									}
																								}
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_REMOVED_INSTANCE"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "notificationList"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "removedInstances"
																							},
																							"right": {
																								"type": "MemberExpression",
																								"computed": true,
																								"object": {
																									"type": "Identifier",
																									"name": "notificationList"
																								},
																								"property": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_REMOVED_INSTANCE"
																									}
																								}
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "Array"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "isArray"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "addedInstances"
																			}
																		]
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "newAddedArray"
																					},
																					"init": {
																						"type": "ArrayExpression",
																						"elements": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "newAddedArray"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "addedInstances"
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "addedInstances"
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "newAddedArray"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "Array"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "isArray"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "removedInstances"
																			}
																		]
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "newRemovedArray"
																					},
																					"init": {
																						"type": "ArrayExpression",
																						"elements": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "newRemovedArray"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "removedInstances"
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "removedInstances"
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "newRemovedArray"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "_handleAddedInstances"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "addedInstances"
																				},
																				{
																					"type": "Identifier",
																					"name": "events"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": "error",
																		"raw": "\"error\""
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "+=",
																	"left": {
																		"type": "Identifier",
																		"name": "newAlarmsAdded"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "total_new"
																		}
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "+=",
																	"left": {
																		"type": "Identifier",
																		"name": "oldAlarmsAdded"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "total_preexisting"
																		}
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "UpdateExpression",
																	"operator": "++",
																	"argument": {
																		"type": "Identifier",
																		"name": "ctr"
																	},
																	"prefix": false
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "||",
																	"left": {
																		"type": "LogicalExpression",
																		"operator": "||",
																		"left": {
																			"type": "UnaryExpression",
																			"operator": "!",
																			"argument": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "firstRun"
																				}
																			},
																			"prefix": true
																		},
																		"right": {
																			"type": "BinaryExpression",
																			"operator": "==",
																			"left": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "result"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "total_preexisting"
																				}
																			},
																			"right": {
																				"type": "Literal",
																				"value": 0,
																				"raw": "0"
																			}
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "&amp;gt;=",
																		"left": {
																			"type": "Identifier",
																			"name": "ctr"
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "MAX_SUBSCRIPTION_LOOPS"
																			}
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "_handleRemovedInstances"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "removedInstances"
																				},
																				{
																					"type": "Identifier",
																					"name": "events"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": "error",
																		"raw": "\"error\""
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "+=",
																	"left": {
																		"type": "Identifier",
																		"name": "alarmsRemoved"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "result"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "total_alarms"
																		}
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "Identifier",
																	"name": "errorsFound"
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "Literal",
																					"value": "New alarms added: ",
																					"raw": "\"New alarms added: \""
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "newAlarmsAdded"
																				}
																			},
																			"right": {
																				"type": "Literal",
																				"value": ". Pre-existing alarms added: ",
																				"raw": "\". Pre-existing alarms added: \""
																			}
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "oldAlarmsAdded"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": " Added instances from response: ",
																		"raw": "\" Added instances from response: \""
																	}
																},
																"right": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "addedInstances"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "length"
																	}
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "Alarms cleared: ",
																			"raw": "\"Alarms cleared: \""
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "alarmsRemoved"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": ". Removed instances from response: ",
																		"raw": "\". Removed instances from response: \""
																	}
																},
																"right": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "removedInstances"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "length"
																	}
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_updateClearedEvents"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "events"
															}
														]
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "events"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														},
														"right": {
															"type": "Literal",
															"value": 0,
															"raw": "0"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "No events returned.",
																			"raw": "\"No events returned.\""
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "Events returned: ",
																				"raw": "\"Events returned: \""
																			},
																			"right": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "events"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "length"
																				}
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_sendEvents"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "events"
																			}
																		]
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "retVal"
															},
															"property": {
																"type": "Identifier",
																"name": "status"
															}
														},
														"right": {
															"type": "ConditionalExpression",
															"test": {
																"type": "Identifier",
																"name": "errorsFound"
															},
															"consequent": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "FAILURE"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toString"
																	}
																},
																"arguments": []
															},
															"alternate": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "SUCCESS"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toString"
																	}
																},
																"arguments": []
															}
														}
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "Identifier",
														"name": "errorsFound"
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Subscription poll failed.",
																			"raw": "\"Subscription poll failed.\""
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Subscription poll was successful.",
																			"raw": "\"Subscription poll was successful.\""
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "retVal"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_updateClearedEvents"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "events"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "clearedEvents"
																}
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": false
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "clearedEventProps"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "clearedEvents"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "i"
																		}
																	}
																}
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarmId"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "clearedEventProps"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "alarmId"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "clearedEvent"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "clearedEventProps"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "event"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ForStatement",
																"init": {
																	"type": "VariableDeclaration",
																	"declarations": [
																		{
																			"type": "VariableDeclarator",
																			"id": {
																				"type": "Identifier",
																				"name": "j"
																			},
																			"init": {
																				"type": "Literal",
																				"value": 0,
																				"raw": "0"
																			}
																		}
																	],
																	"kind": "var"
																},
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;lt;",
																	"left": {
																		"type": "Identifier",
																		"name": "j"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "events"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "length"
																		}
																	}
																},
																"update": {
																	"type": "UpdateExpression",
																	"operator": "++",
																	"argument": {
																		"type": "Identifier",
																		"name": "j"
																	},
																	"prefix": false
																},
																"body": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "event"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "events"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "j"
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "LogicalExpression",
																				"operator": "&amp;amp;&amp;amp;",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "==",
																					"left": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "event"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "getMessageKey"
																							}
																						},
																						"arguments": []
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "alarmId"
																					}
																				},
																				"right": {
																					"type": "BinaryExpression",
																					"operator": "!==",
																					"left": {
																						"type": "Identifier",
																						"name": "event"
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "clearedEvent"
																					}
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "clearedEvent"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "setHostAddress"
																								}
																							},
																							"arguments": [
																								{
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "event"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "getHostAddress"
																										}
																									},
																									"arguments": []
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "clearedEvent"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "setType"
																								}
																							},
																							"arguments": [
																								{
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "event"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "getType"
																										}
																									},
																									"arguments": []
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "clearedEvent"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "setText"
																								}
																							},
																							"arguments": [
																								{
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "event"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "getText"
																										}
																									},
																									"arguments": []
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "clearedEvent"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "setResource"
																								}
																							},
																							"arguments": [
																								{
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "event"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "getResource"
																										}
																									},
																									"arguments": []
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_debug"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "Updating removed alarm with alarm id: ",
																										"raw": "\"Updating removed alarm with alarm id: \""
																									},
																									"right": {
																										"type": "CallExpression",
																										"callee": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "Identifier",
																												"name": "clearedEvent"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "getMessageKey"
																											}
																										},
																										"arguments": []
																									}
																								}
																							]
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																}
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_handleAddedInstances"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "addedInstances"
											},
											{
												"type": "Identifier",
												"name": "events"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "result"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "success",
																			"raw": "\"success\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "msg",
																			"raw": "\"msg\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "total_alarms",
																			"raw": "\"total_alarms\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "total_preexisting",
																			"raw": "\"total_preexisting\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "total_new",
																			"raw": "\"total_new\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "addedInstances"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": false
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "addedInstance"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "addedInstances"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "i"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "preExisting"
																		},
																		"init": {
																			"type": "Literal",
																			"value": false,
																			"raw": "false"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_PRE_EXISTING"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "addedInstance"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "preExisting"
																				},
																				"right": {
																					"type": "BinaryExpression",
																					"operator": "==",
																					"left": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "addedInstance"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_PRE_EXISTING"
																							}
																						}
																					},
																					"right": {
																						"type": "Literal",
																						"value": "true",
																						"raw": "\"true\""
																					}
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "!",
																		"argument": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "firstRun"
																			}
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "preExisting"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ContinueStatement",
																			"label": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_ALARM"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "addedInstance"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "alarm"
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": true,
																					"object": {
																						"type": "Identifier",
																						"name": "addedInstance"
																					},
																					"property": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_ALARM"
																						}
																					}
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "event"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "processEvent"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "alarm"
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "events"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "event"
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "UpdateExpression",
																				"operator": "++",
																				"argument": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "total_alarms"
																					}
																				},
																				"prefix": false
																			}
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "Identifier",
																				"name": "preExisting"
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "UpdateExpression",
																							"operator": "++",
																							"argument": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "result"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "total_preexisting"
																								}
																							},
																							"prefix": false
																						}
																					}
																				]
																			},
																			"alternate": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "UpdateExpression",
																							"operator": "++",
																							"argument": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "result"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "total_new"
																								}
																							},
																							"prefix": false
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_trackMostRecentEvent"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "event"
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "WARNING Alarm element not found in added instance entry. Added instance: ",
																							"raw": "\"WARNING Alarm element not found in added instance entry. Added instance: \""
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "JSON"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "stringify"
																								}
																							},
																							"arguments": [
																								{
																									"type": "Identifier",
																									"name": "addedInstance"
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": "error",
																					"raw": "\"error\""
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "msg"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": "At least one added instance was missing alarm element.",
																					"raw": "\"At least one added instance was missing alarm element.\""
																				}
																			}
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "result"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_handleRemovedInstances"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "removedInstances"
											},
											{
												"type": "Identifier",
												"name": "events"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "result"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "success",
																			"raw": "\"success\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "msg",
																			"raw": "\"msg\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "total_alarms",
																			"raw": "\"total_alarms\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "removedInstances"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": false
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "removedInstance"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "removedInstances"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "i"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "deleted"
																		},
																		"init": {
																			"type": "Literal",
																			"value": false,
																			"raw": "false"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_DELETED"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "removedInstance"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "deleted"
																				},
																				"right": {
																					"type": "UnaryExpression",
																					"operator": "!",
																					"argument": {
																						"type": "BinaryExpression",
																						"operator": "==",
																						"left": {
																							"type": "MemberExpression",
																							"computed": true,
																							"object": {
																								"type": "Identifier",
																								"name": "removedInstance"
																							},
																							"property": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "CA_SPECTRUM_DELETED"
																								}
																							}
																						},
																						"right": {
																							"type": "Literal",
																							"value": "false",
																							"raw": "\"false\""
																						}
																					},
																					"prefix": true
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_ALARM"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "removedInstance"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "alarm"
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": true,
																					"object": {
																						"type": "Identifier",
																						"name": "removedInstance"
																					},
																					"property": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_ALARM"
																						}
																					}
																				}
																			}
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alarmId"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "alarm"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_ID"
																							}
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "UpdateExpression",
																				"operator": "++",
																				"argument": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "total_alarms"
																					}
																				},
																				"prefix": false
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "event"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "createClearEvent"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "alarmId"
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "events"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "event"
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "clearedEvents"
																						}
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "ObjectExpression",
																						"properties": [
																							{
																								"type": "Property",
																								"key": {
																									"type": "Literal",
																									"value": "alarmId",
																									"raw": "\"alarmId\""
																								},
																								"computed": false,
																								"value": {
																									"type": "Identifier",
																									"name": "alarmId"
																								},
																								"kind": "init",
																								"method": false,
																								"shorthand": false
																							},
																							{
																								"type": "Property",
																								"key": {
																									"type": "Literal",
																									"value": "event",
																									"raw": "\"event\""
																								},
																								"computed": false,
																								"value": {
																									"type": "Identifier",
																									"name": "event"
																								},
																								"kind": "init",
																								"method": false,
																								"shorthand": false
																							}
																						]
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "WARNING Alarm element not found in removed instance entry. Removed instance: ",
																							"raw": "\"WARNING Alarm element not found in removed instance entry. Removed instance: \""
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "JSON"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "stringify"
																								}
																							},
																							"arguments": [
																								{
																									"type": "Identifier",
																									"name": "removedInstance"
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": "error",
																					"raw": "\"error\""
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "result"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "msg"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": "At least one removed instance was missing alarm element.",
																					"raw": "\"At least one removed instance was missing alarm element.\""
																				}
																			}
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "result"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_trackMostRecentEvent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "event"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "lastRunAttr"
															},
															"init": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "ALARM_CONTENT_FILTER_DEFAULT"
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "!=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "contentFilterAttribute"
															}
														},
														"right": {
															"type": "Literal",
															"value": "",
															"raw": "''"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "lastRunAttr"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "contentFilterAttribute"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "lastRunAttrValue"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "event"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getField"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "lastRunAttr"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "Identifier",
														"name": "lastRunAttrValue"
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarmLastRun"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "Identifier",
																				"name": "parseInt"
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "lastRunAttrValue"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": "Alarm last occur: ",
																						"raw": "\"Alarm last occur: \""
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "alarmLastRun"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": " overall last occur: ",
																					"raw": "\" overall last occur: \""
																				}
																			},
																			"right": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "lastOccurrenceSecs"
																				}
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;gt;",
																	"left": {
																		"type": "Identifier",
																		"name": "alarmLastRun"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "lastOccurrenceSecs"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "alarmLastRun"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													},
													"alternate": null
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "getAlarmsDirectly"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "retVal"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": [
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "status",
																			"raw": "\"status\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	},
																	{
																		"type": "Property",
																		"key": {
																			"type": "Literal",
																			"value": "error_message",
																			"raw": "\"error_message\""
																		},
																		"computed": false,
																		"value": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"kind": "init",
																		"method": false,
																		"shorthand": false
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumGetAlarmsURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "POST URL ",
																	"raw": "\"POST URL \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "throttleSize"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "SN_THROTTLE"
																		}
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "content"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "_buildContent"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "throttleSize"
																	},
																	{
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "lastOccurrenceSecs"
															}
														},
														"right": {
															"type": "UnaryExpression",
															"operator": "-",
															"argument": {
																"type": "Literal",
																"value": 1,
																"raw": "1"
															},
															"prefix": true
														}
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "done"
															},
															"init": {
																"type": "Literal",
																"value": false,
																"raw": "false"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "events"
															},
															"init": {
																"type": "ArrayExpression",
																"elements": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "totalAlarms"
															},
															"init": {
																"type": "UnaryExpression",
																"operator": "-",
																"argument": {
																	"type": "Literal",
																	"value": 1,
																	"raw": "1"
																},
																"prefix": true
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "pages"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "maxPages"
															},
															"init": {
																"type": "Literal",
																"value": 0,
																"raw": "0"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "errorsFound"
															},
															"init": {
																"type": "Literal",
																"value": false,
																"raw": "false"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "WhileStatement",
													"test": {
														"type": "UnaryExpression",
														"operator": "!",
														"argument": {
															"type": "Identifier",
															"name": "done"
														},
														"prefix": true
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "UpdateExpression",
																	"operator": "++",
																	"argument": {
																		"type": "Identifier",
																		"name": "pages"
																	},
																	"prefix": false
																}
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "pagesMsg"
																		},
																		"init": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "Page: ",
																				"raw": "\"Page: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "pages"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;gt;",
																	"left": {
																		"type": "Identifier",
																		"name": "maxPages"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 0,
																		"raw": "0"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "+=",
																				"left": {
																					"type": "Identifier",
																					"name": "pagesMsg"
																				},
																				"right": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": " of ",
																						"raw": "\" of \""
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "maxPages"
																					}
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "response"
																		},
																		"init": {
																			"type": "Literal",
																			"value": null,
																			"raw": "null"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "pages"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 1,
																		"raw": "1"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "makePostCall"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "url"
																						},
																						{
																							"type": "Identifier",
																							"name": "content"
																						}
																					]
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "makeGetCall"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "url"
																						},
																						{
																							"type": "Identifier",
																							"name": "content"
																						}
																					]
																				}
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "Failed to connect to CA Spectrum on execute. Response is null. ",
																							"raw": "\"Failed to connect to CA Spectrum on execute. Response is null. \""
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "pagesMsg"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ContinueStatement",
																			"label": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "responseObj"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "parseResponse"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "response"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "responseObj"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "retVal"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "status"
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "FAILURE"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "toString"
																						}
																					},
																					"arguments": []
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Response from CA Spectrum is not in expected format: ",
																									"raw": "\"Response from CA Spectrum is not in expected format: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "response"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": ". ",
																								"raw": "\". \""
																							}
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "pagesMsg"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ContinueStatement",
																			"label": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarmResponseList"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "responseObj"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_ALARM_RESPONSE_LIST"
																				}
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "&amp;lt;",
																		"left": {
																			"type": "Identifier",
																			"name": "totalAlarms"
																		},
																		"right": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "in",
																		"left": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "CA_SPECTRUM_TOTAL_ALARMS"
																			}
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "alarmResponseList"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "totalAlarms"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "Identifier",
																						"name": "parseInt"
																					},
																					"arguments": [
																						{
																							"type": "MemberExpression",
																							"computed": true,
																							"object": {
																								"type": "Identifier",
																								"name": "alarmResponseList"
																							},
																							"property": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "CA_SPECTRUM_TOTAL_ALARMS"
																								}
																							}
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "maxPages"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "Math"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "ceil"
																						}
																					},
																					"arguments": [
																						{
																							"type": "BinaryExpression",
																							"operator": "/",
																							"left": {
																								"type": "Identifier",
																								"name": "totalAlarms"
																							},
																							"right": {
																								"type": "Identifier",
																								"name": "throttleSize"
																							}
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_debug"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Total_alarms: ",
																									"raw": "\"Total_alarms: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "totalAlarms"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Calculated max pages: ",
																								"raw": "\" Calculated max pages: \""
																							}
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "maxPages"
																						}
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "IfStatement",
																	"test": {
																		"type": "UnaryExpression",
																		"operator": "!",
																		"argument": {
																			"type": "BinaryExpression",
																			"operator": "in",
																			"left": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_TOTAL_ALARMS"
																				}
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "alarmResponseList"
																			}
																		},
																		"prefix": true
																	},
																	"consequent": {
																		"type": "BlockStatement",
																		"body": [
																			{
																				"type": "ExpressionStatement",
																				"expression": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "_debug"
																						}
																					},
																					"arguments": [
																						{
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "Literal",
																								"value": "Total_alarms missing from response list. Iteration: ",
																								"raw": "\"Total_alarms missing from response list. Iteration: \""
																							},
																							"right": {
																								"type": "Identifier",
																								"name": "pages"
																							}
																						}
																					]
																				}
																			}
																		]
																	},
																	"alternate": null
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "in",
																		"left": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "CA_SPECTRUM_ERROR"
																			}
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "alarmResponseList"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "==",
																		"left": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "alarmResponseList"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_ERROR"
																				}
																			}
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "CA_SPECTRUM_END_OF_RESULTS"
																			}
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_debug"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "End of Results marker found.",
																						"raw": "\"End of Results marker found.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_LINK"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "alarmResponseList"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "link"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "alarmResponseList"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_LINK"
																							}
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_HREF"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "link"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "url"
																							},
																							"right": {
																								"type": "MemberExpression",
																								"computed": true,
																								"object": {
																									"type": "Identifier",
																									"name": "link"
																								},
																								"property": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_HREF"
																									}
																								}
																							}
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "url"
																							},
																							"right": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "Identifier",
																										"name": "url"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "replace"
																									}
																								},
																								"arguments": [
																									{
																										"type": "Literal",
																										"raw": "/\\\\/g",
																										"regex": {
																											"pattern": "\\\\",
																											"flags": "g"
																										}
																									},
																									{
																										"type": "Literal",
																										"value": "",
																										"raw": "\"\""
																									}
																								]
																							}
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "url"
																							},
																							"right": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "StringUtil"
																										}
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "unEscapeHTML"
																									}
																								},
																								"arguments": [
																									{
																										"type": "Identifier",
																										"name": "url"
																									}
																								]
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "UnaryExpression",
																				"operator": "!",
																				"argument": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"prefix": true
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "WARNING No next link or end of results marker found in response from CA Spectrum. ",
																										"raw": "\"WARNING No next link or end of results marker found in response from CA Spectrum. \""
																									},
																									"right": {
																										"type": "Identifier",
																										"name": "pagesMsg"
																									}
																								}
																							]
																						}
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		}
																	]
																}
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarmsReturned"
																		},
																		"init": {
																			"type": "Literal",
																			"value": 0,
																			"raw": "0"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_THROTTLE"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "alarmResponseList"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "alarmsReturned"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "Identifier",
																						"name": "parseInt"
																					},
																					"arguments": [
																						{
																							"type": "MemberExpression",
																							"computed": true,
																							"object": {
																								"type": "Identifier",
																								"name": "alarmResponseList"
																							},
																							"property": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "CA_SPECTRUM_THROTTLE"
																								}
																							}
																						}
																					]
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_info"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "Throttle missing from response list. ",
																							"raw": "\"Throttle missing from response list. \""
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "pagesMsg"
																						}
																					}
																				]
																			}
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": "Found ",
																						"raw": "\"Found \""
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "alarmsReturned"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": " records. ",
																					"raw": "\" records. \""
																				}
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "pagesMsg"
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "==",
																	"left": {
																		"type": "Identifier",
																		"name": "alarmsReturned"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 0,
																		"raw": "0"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "WARNING No alarms returned on ",
																							"raw": "\"WARNING No alarms returned on \""
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "pagesMsg"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ContinueStatement",
																			"label": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "foundAlarms"
																		},
																		"init": {
																			"type": "Literal",
																			"value": false,
																			"raw": "false"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarmResponses"
																		},
																		"init": null
																	},
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alarms"
																		},
																		"init": null
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_ALARM_RESPONSES"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "alarmResponseList"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alarmResponses"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "alarmResponseList"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_ALARM_RESPONSES"
																							}
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_ALARM"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "alarmResponses"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "alarms"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarmResponses"
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_ALARM"
																										}
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "foundAlarms"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "foundAlarms"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "WARNING Alarms property not found in response. ",
																							"raw": "\"WARNING Alarms property not found in response. \""
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "pagesMsg"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "done"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "errorsFound"
																				},
																				"right": {
																					"type": "Literal",
																					"value": true,
																					"raw": "true"
																				}
																			}
																		},
																		{
																			"type": "ContinueStatement",
																			"label": null
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ForStatement",
																"init": {
																	"type": "VariableDeclaration",
																	"declarations": [
																		{
																			"type": "VariableDeclarator",
																			"id": {
																				"type": "Identifier",
																				"name": "i"
																			},
																			"init": {
																				"type": "Literal",
																				"value": 0,
																				"raw": "0"
																			}
																		}
																	],
																	"kind": "var"
																},
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;lt;",
																	"left": {
																		"type": "Identifier",
																		"name": "i"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "alarms"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "length"
																		}
																	}
																},
																"update": {
																	"type": "UpdateExpression",
																	"operator": "++",
																	"argument": {
																		"type": "Identifier",
																		"name": "i"
																	},
																	"prefix": false
																},
																"body": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alarm"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "alarms"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "i"
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "event"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "processEvent"
																							}
																						},
																						"arguments": [
																							{
																								"type": "Identifier",
																								"name": "alarm"
																							}
																						]
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "events"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "push"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "event"
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_trackMostRecentEvent"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "event"
																					}
																				]
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "done"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "&amp;gt;=",
																				"left": {
																					"type": "Identifier",
																					"name": "pages"
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "maxPages"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "WARNING Calculated max pages reached: ",
																										"raw": "\"WARNING Calculated max pages reached: \""
																									},
																									"right": {
																										"type": "Identifier",
																										"name": "pages"
																									}
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "errorsFound"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "done"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					}
																				]
																			},
																			"alternate": {
																				"type": "IfStatement",
																				"test": {
																					"type": "BinaryExpression",
																					"operator": "&amp;gt;=",
																					"left": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "events"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "length"
																						}
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "totalAlarms"
																					}
																				},
																				"consequent": {
																					"type": "BlockStatement",
																					"body": [
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "_error"
																									}
																								},
																								"arguments": [
																									{
																										"type": "BinaryExpression",
																										"operator": "+",
																										"left": {
																											"type": "BinaryExpression",
																											"operator": "+",
																											"left": {
																												"type": "BinaryExpression",
																												"operator": "+",
																												"left": {
																													"type": "Literal",
																													"value": "WARNING Total alarms from CA Spectrum call reached. Total alarms: ",
																													"raw": "\"WARNING Total alarms from CA Spectrum call reached. Total alarms: \""
																												},
																												"right": {
																													"type": "Identifier",
																													"name": "totalAlarms"
																												}
																											},
																											"right": {
																												"type": "Literal",
																												"value": " Events: ",
																												"raw": "\" Events: \""
																											}
																										},
																										"right": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "Identifier",
																												"name": "events"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "length"
																											}
																										}
																									}
																								]
																							}
																						},
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "AssignmentExpression",
																								"operator": "=",
																								"left": {
																									"type": "Identifier",
																									"name": "errorsFound"
																								},
																								"right": {
																									"type": "Literal",
																									"value": true,
																									"raw": "true"
																								}
																							}
																						},
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "AssignmentExpression",
																								"operator": "=",
																								"left": {
																									"type": "Identifier",
																									"name": "done"
																								},
																								"right": {
																									"type": "Literal",
																									"value": true,
																									"raw": "true"
																								}
																							}
																						}
																					]
																				},
																				"alternate": {
																					"type": "IfStatement",
																					"test": {
																						"type": "BinaryExpression",
																						"operator": "&amp;gt;=",
																						"left": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "events"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "length"
																							}
																						},
																						"right": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "MAX_EVENTS_TO_FETCH"
																							}
																						}
																					},
																					"consequent": {
																						"type": "BlockStatement",
																						"body": [
																							{
																								"type": "ExpressionStatement",
																								"expression": {
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "_error"
																										}
																									},
																									"arguments": [
																										{
																											"type": "BinaryExpression",
																											"operator": "+",
																											"left": {
																												"type": "BinaryExpression",
																												"operator": "+",
																												"left": {
																													"type": "BinaryExpression",
																													"operator": "+",
																													"left": {
																														"type": "Literal",
																														"value": "WARNING Maximum events processed. Events: ",
																														"raw": "\"WARNING Maximum events processed. Events: \""
																													},
																													"right": {
																														"type": "MemberExpression",
																														"computed": false,
																														"object": {
																															"type": "Identifier",
																															"name": "events"
																														},
																														"property": {
																															"type": "Identifier",
																															"name": "length"
																														}
																													}
																												},
																												"right": {
																													"type": "Literal",
																													"value": " Maximum: ",
																													"raw": "\" Maximum: \""
																												}
																											},
																											"right": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "ThisExpression"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "MAX_EVENTS_TO_FETCH"
																												}
																											}
																										}
																									]
																								}
																							},
																							{
																								"type": "ExpressionStatement",
																								"expression": {
																									"type": "AssignmentExpression",
																									"operator": "=",
																									"left": {
																										"type": "Identifier",
																										"name": "errorsFound"
																									},
																									"right": {
																										"type": "Literal",
																										"value": true,
																										"raw": "true"
																									}
																								}
																							},
																							{
																								"type": "ExpressionStatement",
																								"expression": {
																									"type": "AssignmentExpression",
																									"operator": "=",
																									"left": {
																										"type": "Identifier",
																										"name": "done"
																									},
																									"right": {
																										"type": "Literal",
																										"value": true,
																										"raw": "true"
																									}
																								}
																							}
																						]
																					},
																					"alternate": null
																				}
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Pages: ",
																	"raw": "\"Pages: \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "pages"
																}
															}
														]
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "events"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														},
														"right": {
															"type": "Literal",
															"value": 0,
															"raw": "0"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "No events returned.",
																			"raw": "\"No events returned.\""
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "errorsFound"
																	},
																	"right": {
																		"type": "Literal",
																		"value": true,
																		"raw": "true"
																	}
																}
															}
														]
													},
													"alternate": {
														"type": "IfStatement",
														"test": {
															"type": "BinaryExpression",
															"operator": "!=",
															"left": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "Identifier",
																	"name": "events"
																},
																"property": {
																	"type": "Identifier",
																	"name": "length"
																}
															},
															"right": {
																"type": "Identifier",
																"name": "totalAlarms"
															}
														},
														"consequent": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "Literal",
																								"value": "WARNING Total alarms expected (",
																								"raw": "\"WARNING Total alarms expected (\""
																							},
																							"right": {
																								"type": "Identifier",
																								"name": "totalAlarms"
																							}
																						},
																						"right": {
																							"type": "Literal",
																							"value": ") from CA Spectrum does not match actual alarm count (",
																							"raw": "\") from CA Spectrum does not match actual alarm count (\""
																						}
																					},
																					"right": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "events"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "length"
																						}
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": ")",
																					"raw": "\")\""
																				}
																			}
																		]
																	}
																},
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "AssignmentExpression",
																		"operator": "=",
																		"left": {
																			"type": "Identifier",
																			"name": "errorsFound"
																		},
																		"right": {
																			"type": "Literal",
																			"value": true,
																			"raw": "true"
																		}
																	}
																}
															]
														},
														"alternate": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_info"
																			}
																		},
																		"arguments": [
																			{
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "Literal",
																					"value": "Events returned: ",
																					"raw": "\"Events returned: \""
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "events"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "length"
																					}
																				}
																			}
																		]
																	}
																}
															]
														}
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "UnaryExpression",
														"operator": "!",
														"argument": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "_sendEvents"
																}
															},
															"arguments": [
																{
																	"type": "Identifier",
																	"name": "events"
																}
															]
														},
														"prefix": true
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "errorsFound"
																	},
																	"right": {
																		"type": "Literal",
																		"value": true,
																		"raw": "true"
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "retVal"
															},
															"property": {
																"type": "Identifier",
																"name": "status"
															}
														},
														"right": {
															"type": "ConditionalExpression",
															"test": {
																"type": "Identifier",
																"name": "errorsFound"
															},
															"consequent": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "FAILURE"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toString"
																	}
																},
																"arguments": []
															},
															"alternate": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "SUCCESS"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toString"
																	}
																},
																"arguments": []
															}
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "retVal"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_sendEvents"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "events"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "sendOK"
															},
															"init": {
																"type": "Literal",
																"value": true,
																"raw": "true"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "sender"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "SNEventSenderProvider"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getEventSender"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "events"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": false
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "events"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "i"
																		}
																	},
																	"right": {
																		"type": "UnaryExpression",
																		"operator": "!",
																		"argument": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "filterEvent"
																				}
																			},
																			"arguments": [
																				{
																					"type": "MemberExpression",
																					"computed": true,
																					"object": {
																						"type": "Identifier",
																						"name": "events"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "i"
																					}
																				}
																			]
																		},
																		"prefix": true
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "UnaryExpression",
																				"operator": "!",
																				"argument": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "sender"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "sendEvent"
																						}
																					},
																					"arguments": [
																						{
																							"type": "MemberExpression",
																							"computed": true,
																							"object": {
																								"type": "Identifier",
																								"name": "events"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "i"
																							}
																						}
																					]
																				},
																				"prefix": true
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "sendOK"
																							},
																							"right": {
																								"type": "Literal",
																								"value": false,
																								"raw": "false"
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																},
																"alternate": null
															}
														]
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "UnaryExpression",
														"operator": "!",
														"argument": {
															"type": "Identifier",
															"name": "sendOK"
														},
														"prefix": true
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "One or more events failed to send.",
																			"raw": "\"One or more events failed to send.\""
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "sendOK"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_buildContent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "throttleSize"
											},
											{
												"type": "Identifier",
												"name": "lastOccurenceDate"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "contentTemplate"
															},
															"init": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "ALARM_CONTENT_XML"
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "reqAttr"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForInStatement",
													"left": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "spectrumAttrID"
																},
																"init": null
															}
														],
														"kind": "var"
													},
													"right": {
														"type": "MemberExpression",
														"computed": false,
														"object": {
															"type": "ThisExpression"
														},
														"property": {
															"type": "Identifier",
															"name": "SPECTRUM_EVENT_MAPPING"
														}
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "+=",
																	"left": {
																		"type": "Identifier",
																		"name": "reqAttr"
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "&amp;lt;rs:requested-attribute id=\"",
																				"raw": "'&amp;lt;rs:requested-attribute id=\"'"
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "spectrumAttrID"
																			}
																		},
																		"right": {
																			"type": "Literal",
																			"value": "\" /&amp;gt;",
																			"raw": "'\" /&amp;gt;'"
																		}
																	}
																}
															}
														]
													},
													"each": false
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "properties"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "Properties"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "requested_attributes",
																"raw": "\"requested_attributes\""
															},
															{
																"type": "Identifier",
																"name": "reqAttr"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "throttle",
																"raw": "\"throttle\""
															},
															{
																"type": "Identifier",
																"name": "throttleSize"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "date_seconds",
																"raw": "\"date_seconds\""
															},
															{
																"type": "Identifier",
																"name": "lastOccurenceDate"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "search_filter_attribute",
																"raw": "\"search_filter_attribute\""
															},
															{
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "contentFilterAttribute"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "content"
															},
															"init": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "",
																	"raw": "''"
																},
																"right": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "StringUtil"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "substituteVariables"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Identifier",
																			"name": "contentTemplate"
																		},
																		{
																			"type": "Identifier",
																			"name": "properties"
																		},
																		{
																			"type": "Literal",
																			"value": true,
																			"raw": "true"
																		}
																	]
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Content=",
																	"raw": "\"Content=\""
																},
																"right": {
																	"type": "Identifier",
																	"name": "content"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "content"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "startSubscription"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "sendPreExistingInstances"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "subscriptionId"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumSubscriptionBaseURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_info"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Subscription POST URL ",
																	"raw": "\"Subscription POST URL \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "maxNotifications"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "MAX_NOTIFICATIONS"
																		}
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "LogicalExpression",
																"operator": "||",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "typeof",
																		"argument": {
																			"type": "Identifier",
																			"name": "maxNotifications"
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Literal",
																		"value": "undefined",
																		"raw": "\"undefined\""
																	}
																},
																"right": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "Identifier",
																		"name": "maxNotifications"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "maxNotifications"
																},
																"right": {
																	"type": "Literal",
																	"value": "",
																	"raw": "\"\""
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "maxNotifications"
															},
															"right": {
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "maxNotifications"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "MAX_NOTIFICATIONS_DEFAULT"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "pullInterval"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "PULL_INTERVAL"
																		}
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "LogicalExpression",
																"operator": "||",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "typeof",
																		"argument": {
																			"type": "Identifier",
																			"name": "pullInterval"
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Literal",
																		"value": "undefined",
																		"raw": "\"undefined\""
																	}
																},
																"right": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "Identifier",
																		"name": "pullInterval"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "pullInterval"
																},
																"right": {
																	"type": "Literal",
																	"value": "",
																	"raw": "\"\""
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "pullInterval"
															},
															"right": {
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "pullInterval"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "PULL_INTERVAL_DEFAULT"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "maxQueueSize"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "MAX_QUEUE_SIZE"
																		}
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "LogicalExpression",
																"operator": "||",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "typeof",
																		"argument": {
																			"type": "Identifier",
																			"name": "maxQueueSize"
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Literal",
																		"value": "undefined",
																		"raw": "\"undefined\""
																	}
																},
																"right": {
																	"type": "BinaryExpression",
																	"operator": "===",
																	"left": {
																		"type": "Identifier",
																		"name": "maxQueueSize"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "maxQueueSize"
																},
																"right": {
																	"type": "Literal",
																	"value": "",
																	"raw": "\"\""
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "maxQueueSize"
															},
															"right": {
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "maxQueueSize"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "MAX_QUEUE_SIZE_DEFAULT"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "content"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "_buildSubscriptionContent"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "maxNotifications"
																	},
																	{
																		"type": "Identifier",
																		"name": "pullInterval"
																	},
																	{
																		"type": "Identifier",
																		"name": "maxQueueSize"
																	},
																	{
																		"type": "Identifier",
																		"name": "sendPreExistingInstances"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "makeSubscriptionPostCall"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	},
																	{
																		"type": "Identifier",
																		"name": "content"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "Identifier",
															"name": "response"
														},
														"right": {
															"type": "Literal",
															"value": null,
															"raw": "null"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Failed to connect to CA Spectrum on startSubscription. Response is null.",
																			"raw": "\"Failed to connect to CA Spectrum on startSubscription. Response is null.\""
																		}
																	]
																}
															},
															{
																"type": "ReturnStatement",
																"argument": {
																	"type": "Literal",
																	"value": null,
																	"raw": "null"
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "responseObj"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "parseResponse"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "response"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "Identifier",
															"name": "responseObj"
														},
														"right": {
															"type": "Literal",
															"value": null,
															"raw": "null"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "Literal",
																					"value": "Response from CA Spectrum on startSubscription is not in expected format: ",
																					"raw": "\"Response from CA Spectrum on startSubscription is not in expected format: \""
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "response"
																				}
																			},
																			"right": {
																				"type": "Literal",
																				"value": ".",
																				"raw": "\".\""
																			}
																		}
																	]
																}
															},
															{
																"type": "ReturnStatement",
																"argument": {
																	"type": "Literal",
																	"value": null,
																	"raw": "null"
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "CA_SPECTRUM_SUBSCRIPTION_RESPONSE"
															}
														},
														"right": {
															"type": "Identifier",
															"name": "responseObj"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "subResponse"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "responseObj"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_SUBSCRIPTION_RESPONSE"
																				}
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "CA_SPECTRUM_SUBSCRIPTION_ID"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "subResponse"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "subscriptionId"
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": true,
																					"object": {
																						"type": "Identifier",
																						"name": "subResponse"
																					},
																					"property": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_SUBSCRIPTION_ID"
																						}
																					}
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "Missing '",
																										"raw": "\"Missing '\""
																									},
																									"right": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_SUBSCRIPTION_ID"
																										}
																									}
																								},
																								"right": {
																									"type": "Literal",
																									"value": "' element in response from CA Spectrum on startSubscription. Response: ",
																									"raw": "\"' element in response from CA Spectrum on startSubscription. Response: \""
																								}
																							},
																							"right": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "Identifier",
																										"name": "response"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "getBody"
																									}
																								},
																								"arguments": []
																							}
																						},
																						"right": {
																							"type": "Literal",
																							"value": ".",
																							"raw": "\".\""
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "Missing '",
																							"raw": "\"Missing '\""
																						},
																						"right": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_SUBSCRIPTION_RESPONSE"
																							}
																						}
																					},
																					"right": {
																						"type": "Literal",
																						"value": "' element in response from CA Spectrum on startSubscription. Response: ",
																						"raw": "\"' element in response from CA Spectrum on startSubscription. Response: \""
																					}
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "response"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "getBody"
																						}
																					},
																					"arguments": []
																				}
																			},
																			"right": {
																				"type": "Literal",
																				"value": ".",
																				"raw": "\".\""
																			}
																		}
																	]
																}
															},
															{
																"type": "ReturnStatement",
																"argument": {
																	"type": "Literal",
																	"value": null,
																	"raw": "null"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "subscriptionId"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_buildSubscriptionContent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "maxNotifications"
											},
											{
												"type": "Identifier",
												"name": "pullInterval"
											},
											{
												"type": "Identifier",
												"name": "maxQueueSize"
											},
											{
												"type": "Identifier",
												"name": "sendPreExistingInstances"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "contentTemplate"
															},
															"init": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "SUBSCRIPTION_CONTENT_XML"
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "reqAttr"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForInStatement",
													"left": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "spectrumAttrID"
																},
																"init": null
															}
														],
														"kind": "var"
													},
													"right": {
														"type": "MemberExpression",
														"computed": false,
														"object": {
															"type": "ThisExpression"
														},
														"property": {
															"type": "Identifier",
															"name": "SPECTRUM_EVENT_MAPPING"
														}
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "+=",
																	"left": {
																		"type": "Identifier",
																		"name": "reqAttr"
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "&amp;lt;rs:requested-attribute id=\"",
																				"raw": "'&amp;lt;rs:requested-attribute id=\"'"
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "spectrumAttrID"
																			}
																		},
																		"right": {
																			"type": "Literal",
																			"value": "\" /&amp;gt;",
																			"raw": "'\" /&amp;gt;'"
																		}
																	}
																}
															}
														]
													},
													"each": false
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "properties"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "Properties"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "requested_attributes",
																"raw": "\"requested_attributes\""
															},
															{
																"type": "Identifier",
																"name": "reqAttr"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "pull_interval",
																"raw": "\"pull_interval\""
															},
															{
																"type": "Identifier",
																"name": "pullInterval"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "max_notifications",
																"raw": "\"max_notifications\""
															},
															{
																"type": "Identifier",
																"name": "maxNotifications"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "max_queue_size",
																"raw": "\"max_queue_size\""
															},
															{
																"type": "Identifier",
																"name": "maxQueueSize"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "properties"
															},
															"property": {
																"type": "Identifier",
																"name": "setProperty"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "send_preexisting_instances",
																"raw": "\"send_preexisting_instances\""
															},
															{
																"type": "Identifier",
																"name": "sendPreExistingInstances"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "content"
															},
															"init": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "",
																	"raw": "''"
																},
																"right": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "StringUtil"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "substituteVariables"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Identifier",
																			"name": "contentTemplate"
																		},
																		{
																			"type": "Identifier",
																			"name": "properties"
																		},
																		{
																			"type": "Literal",
																			"value": true,
																			"raw": "true"
																		}
																	]
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Subscription Content=",
																	"raw": "\"Subscription Content=\""
																},
																"right": {
																	"type": "Identifier",
																	"name": "content"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "content"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "filterEvent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "event"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Literal",
														"value": false,
														"raw": "false"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "parseResponse"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "response"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "parser"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "JSONParser"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "responseList"
															},
															"init": null
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Response: ",
																	"raw": "\"Response: \""
																},
																"right": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "response"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "getBody"
																		}
																	},
																	"arguments": []
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "responseObj"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "parser"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "parse"
																	}
																},
																"arguments": [
																	{
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "response"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "getBody"
																			}
																		},
																		"arguments": []
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "CA_SPECTRUM_ALARM_RESPONSE_LIST"
															}
														},
														"right": {
															"type": "Identifier",
															"name": "responseObj"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "responseList"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "responseObj"
																		},
																		"property": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "CA_SPECTRUM_ALARM_RESPONSE_LIST"
																			}
																		}
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "!==",
																		"left": {
																			"type": "Identifier",
																			"name": "responseList"
																		},
																		"right": {
																			"type": "Literal",
																			"value": null,
																			"raw": "null"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "===",
																		"left": {
																			"type": "UnaryExpression",
																			"operator": "typeof",
																			"argument": {
																				"type": "Identifier",
																				"name": "responseList"
																			},
																			"prefix": true
																		},
																		"right": {
																			"type": "Literal",
																			"value": "object",
																			"raw": "'object'"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "LogicalExpression",
																				"operator": "&amp;amp;&amp;amp;",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "in",
																					"left": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_ERROR"
																						}
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "responseList"
																					}
																				},
																				"right": {
																					"type": "BinaryExpression",
																					"operator": "!=",
																					"left": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "responseList"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_ERROR"
																							}
																						}
																					},
																					"right": {
																						"type": "Literal",
																						"value": "EndOfResults",
																						"raw": "\"EndOfResults\""
																					}
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "Failed with error: ",
																										"raw": "\"Failed with error: \""
																									},
																									"right": {
																										"type": "MemberExpression",
																										"computed": true,
																										"object": {
																											"type": "Identifier",
																											"name": "responseList"
																										},
																										"property": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "ThisExpression"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "CA_SPECTRUM_ERROR"
																											}
																										}
																									}
																								}
																							]
																						}
																					},
																					{
																						"type": "ReturnStatement",
																						"argument": {
																							"type": "Literal",
																							"value": null,
																							"raw": "null"
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																},
																"alternate": null
															}
														]
													},
													"alternate": {
														"type": "IfStatement",
														"test": {
															"type": "BinaryExpression",
															"operator": "in",
															"left": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST"
																}
															},
															"right": {
																"type": "Identifier",
																"name": "responseObj"
															}
														},
														"consequent": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "AssignmentExpression",
																		"operator": "=",
																		"left": {
																			"type": "Identifier",
																			"name": "responseList"
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "responseObj"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST"
																				}
																			}
																		}
																	}
																},
																{
																	"type": "IfStatement",
																	"test": {
																		"type": "LogicalExpression",
																		"operator": "&amp;amp;&amp;amp;",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "!==",
																			"left": {
																				"type": "Identifier",
																				"name": "responseList"
																			},
																			"right": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		},
																		"right": {
																			"type": "BinaryExpression",
																			"operator": "===",
																			"left": {
																				"type": "UnaryExpression",
																				"operator": "typeof",
																				"argument": {
																					"type": "Identifier",
																					"name": "responseList"
																				},
																				"prefix": true
																			},
																			"right": {
																				"type": "Literal",
																				"value": "object",
																				"raw": "'object'"
																			}
																		}
																	},
																	"consequent": {
																		"type": "BlockStatement",
																		"body": [
																			{
																				"type": "IfStatement",
																				"test": {
																					"type": "BinaryExpression",
																					"operator": "in",
																					"left": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_ERROR"
																						}
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "responseList"
																					}
																				},
																				"consequent": {
																					"type": "BlockStatement",
																					"body": [
																						{
																							"type": "ExpressionStatement",
																							"expression": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "_error"
																									}
																								},
																								"arguments": [
																									{
																										"type": "BinaryExpression",
																										"operator": "+",
																										"left": {
																											"type": "Literal",
																											"value": "Failed with error: ",
																											"raw": "\"Failed with error: \""
																										},
																										"right": {
																											"type": "MemberExpression",
																											"computed": true,
																											"object": {
																												"type": "Identifier",
																												"name": "responseList"
																											},
																											"property": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "ThisExpression"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "CA_SPECTRUM_ERROR"
																												}
																											}
																										}
																									}
																								]
																							}
																						},
																						{
																							"type": "ReturnStatement",
																							"argument": {
																								"type": "Literal",
																								"value": null,
																								"raw": "null"
																							}
																						}
																					]
																				},
																				"alternate": null
																			}
																		]
																	},
																	"alternate": null
																}
															]
														},
														"alternate": {
															"type": "IfStatement",
															"test": {
																"type": "BinaryExpression",
																"operator": "in",
																"left": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "CA_SPECTRUM_NOTIFICATION_LIST"
																	}
																},
																"right": {
																	"type": "Identifier",
																	"name": "responseObj"
																}
															},
															"consequent": {
																"type": "BlockStatement",
																"body": [
																	{
																		"type": "ExpressionStatement",
																		"expression": {
																			"type": "AssignmentExpression",
																			"operator": "=",
																			"left": {
																				"type": "Identifier",
																				"name": "responseList"
																			},
																			"right": {
																				"type": "MemberExpression",
																				"computed": true,
																				"object": {
																					"type": "Identifier",
																					"name": "responseObj"
																				},
																				"property": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_NOTIFICATION_LIST"
																					}
																				}
																			}
																		}
																	},
																	{
																		"type": "IfStatement",
																		"test": {
																			"type": "LogicalExpression",
																			"operator": "&amp;amp;&amp;amp;",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "!==",
																				"left": {
																					"type": "Identifier",
																					"name": "responseList"
																				},
																				"right": {
																					"type": "Literal",
																					"value": null,
																					"raw": "null"
																				}
																			},
																			"right": {
																				"type": "BinaryExpression",
																				"operator": "===",
																				"left": {
																					"type": "UnaryExpression",
																					"operator": "typeof",
																					"argument": {
																						"type": "Identifier",
																						"name": "responseList"
																					},
																					"prefix": true
																				},
																				"right": {
																					"type": "Literal",
																					"value": "object",
																					"raw": "'object'"
																				}
																			}
																		},
																		"consequent": {
																			"type": "BlockStatement",
																			"body": [
																				{
																					"type": "IfStatement",
																					"test": {
																						"type": "BinaryExpression",
																						"operator": "in",
																						"left": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_ERROR"
																							}
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "responseList"
																						}
																					},
																					"consequent": {
																						"type": "BlockStatement",
																						"body": [
																							{
																								"type": "ExpressionStatement",
																								"expression": {
																									"type": "CallExpression",
																									"callee": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "_error"
																										}
																									},
																									"arguments": [
																										{
																											"type": "BinaryExpression",
																											"operator": "+",
																											"left": {
																												"type": "Literal",
																												"value": "Failed with error: ",
																												"raw": "\"Failed with error: \""
																											},
																											"right": {
																												"type": "MemberExpression",
																												"computed": true,
																												"object": {
																													"type": "Identifier",
																													"name": "responseList"
																												},
																												"property": {
																													"type": "MemberExpression",
																													"computed": false,
																													"object": {
																														"type": "ThisExpression"
																													},
																													"property": {
																														"type": "Identifier",
																														"name": "CA_SPECTRUM_ERROR"
																													}
																												}
																											}
																										}
																									]
																								}
																							},
																							{
																								"type": "ReturnStatement",
																								"argument": {
																									"type": "Literal",
																									"value": null,
																									"raw": "null"
																								}
																							}
																						]
																					},
																					"alternate": null
																				}
																			]
																		},
																		"alternate": null
																	}
																]
															},
															"alternate": null
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "responseObj"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "processEvent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "alarm"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alarmId"
															},
															"init": {
																"type": "MemberExpression",
																"computed": true,
																"object": {
																	"type": "Identifier",
																	"name": "alarm"
																},
																"property": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "CA_SPECTRUM_ID"
																	}
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alarmAttributes"
															},
															"init": {
																"type": "MemberExpression",
																"computed": true,
																"object": {
																	"type": "Identifier",
																	"name": "alarm"
																},
																"property": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "CA_SPECTRUM_ATTRIBUTES"
																	}
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "entryData"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "eventAttrs"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "event"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "Event"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "alarmAttributes"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": false
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "attribute"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "alarmAttributes"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "i"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "attrID"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "attribute"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_ID"
																				}
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "attrValue"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "attribute"
																			},
																			"property": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "CA_SPECTRUM_VALUE"
																				}
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setField"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Identifier",
																			"name": "attrID"
																		},
																		{
																			"type": "Identifier",
																			"name": "attrValue"
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "in",
																	"left": {
																		"type": "Identifier",
																		"name": "attrID"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "SPECTRUM_DATE_TIME_ATTRIBUTES"
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "milliseconds"
																					},
																					"init": {
																						"type": "BinaryExpression",
																						"operator": "*",
																						"left": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "Identifier",
																								"name": "parseInt"
																							},
																							"arguments": [
																								{
																									"type": "Identifier",
																									"name": "attrValue"
																								}
																							]
																						},
																						"right": {
																							"type": "Literal",
																							"value": 1000,
																							"raw": "1000"
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "date"
																					},
																					"init": {
																						"type": "NewExpression",
																						"callee": {
																							"type": "Identifier",
																							"name": "Date"
																						},
																						"arguments": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "date"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "setTime"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Identifier",
																						"name": "milliseconds"
																					}
																				]
																			}
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "dateStr"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "date"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "toISOString"
																							}
																						},
																						"arguments": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "snDateStr"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "dateStr"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "replace"
																							}
																						},
																						"arguments": [
																							{
																								"type": "Literal",
																								"value": "T",
																								"raw": "'T'"
																							},
																							{
																								"type": "Literal",
																								"value": " ",
																								"raw": "' '"
																							}
																						]
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "attrValue"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "snDateStr"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "substring"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Literal",
																							"value": 0,
																							"raw": "0"
																						},
																						{
																							"type": "Literal",
																							"value": 19,
																							"raw": "19"
																						}
																					]
																				}
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_debug"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "BinaryExpression",
																										"operator": "+",
																										"left": {
																											"type": "Literal",
																											"value": "Date/time Conversion: ",
																											"raw": "\"Date/time Conversion: \""
																										},
																										"right": {
																											"type": "Identifier",
																											"name": "attrID"
																										}
																									},
																									"right": {
																										"type": "Literal",
																										"value": " date string=",
																										"raw": "\" date string=\""
																									}
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "dateStr"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " value=",
																								"raw": "\" value=\""
																							}
																						},
																						"right": {
																							"type": "Identifier",
																							"name": "attrValue"
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "event"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "setField"
																					}
																				},
																				"arguments": [
																					{
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "SPECTRUM_ALARM_ATTRIBUTES"
																							}
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "attrID"
																						}
																					},
																					{
																						"type": "Identifier",
																						"name": "attrValue"
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "LogicalExpression",
																	"operator": "&amp;amp;&amp;amp;",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "in",
																		"left": {
																			"type": "Identifier",
																			"name": "attrID"
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "SPECTRUM_EVENT_MAPPING"
																			}
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "!=",
																		"left": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "ThisExpression"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "SPECTRUM_EVENT_MAPPING"
																				}
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "attrID"
																			}
																		},
																		"right": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		}
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "eventField"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "SPECTRUM_EVENT_MAPPING"
																							}
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "attrID"
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "MemberExpression",
																					"computed": true,
																					"object": {
																						"type": "Identifier",
																						"name": "eventAttrs"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "eventField"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "attrValue"
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "IfStatement",
																	"test": {
																		"type": "BinaryExpression",
																		"operator": "==",
																		"left": {
																			"type": "Identifier",
																			"name": "attrID"
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "timeOfEventAttribute"
																			}
																		}
																	},
																	"consequent": {
																		"type": "BlockStatement",
																		"body": [
																			{
																				"type": "ExpressionStatement",
																				"expression": {
																					"type": "AssignmentExpression",
																					"operator": "=",
																					"left": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "eventAttrs"
																						},
																						"property": {
																							"type": "Literal",
																							"value": "time_of_event",
																							"raw": "\"time_of_event\""
																						}
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "attrValue"
																					}
																				}
																			}
																		]
																	},
																	"alternate": null
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "emsName"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "connector_name",
																		"raw": "\"connector_name\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setSource"
															}
														},
														"arguments": [
															{
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "CA_SPECTRUM"
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setEmsSystem"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "emsName"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "mappedSeverity"
															},
															"init": {
																"type": "Literal",
																"value": 5,
																"raw": "5"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "time_of_event",
															"raw": "\"time_of_event\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setTimeOfEvent"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "time_of_event",
																				"raw": "\"time_of_event\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "severity",
															"raw": "\"severity\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "mappedSeverity"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "getMappedSeverity"
																			}
																		},
																		"arguments": [
																			{
																				"type": "MemberExpression",
																				"computed": true,
																				"object": {
																					"type": "Identifier",
																					"name": "eventAttrs"
																				},
																				"property": {
																					"type": "Literal",
																					"value": "severity",
																					"raw": "\"severity\""
																				}
																			}
																		]
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setSeverity"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Identifier",
																			"name": "mappedSeverity"
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "node",
															"raw": "\"node\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setHostAddress"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "node",
																				"raw": "\"node\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "type",
															"raw": "\"type\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setType"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "type",
																				"raw": "\"type\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "message_key",
															"raw": "\"message_key\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setMessageKey"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "message_key",
																				"raw": "\"message_key\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "resolution_state",
															"raw": "\"resolution_state\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setResolutionState"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "resolution_state",
																				"raw": "\"resolution_state\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "IfStatement",
														"test": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "mappedSeverity"
															},
															"right": {
																"type": "Literal",
																"value": 5,
																"raw": "5"
															}
														},
														"consequent": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "event"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "setResolutionState"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Literal",
																				"value": "Closing",
																				"raw": "\"Closing\""
																			}
																		]
																	}
																}
															]
														},
														"alternate": null
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "description",
															"raw": "\"description\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setText"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "description",
																				"raw": "\"description\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Literal",
															"value": "resource_1",
															"raw": "\"resource_1\""
														},
														"right": {
															"type": "Identifier",
															"name": "eventAttrs"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "event"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "setResource"
																		}
																	},
																	"arguments": [
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "eventAttrs"
																			},
																			"property": {
																				"type": "Literal",
																				"value": "resource_1",
																				"raw": "\"resource_1\""
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": {
														"type": "IfStatement",
														"test": {
															"type": "BinaryExpression",
															"operator": "in",
															"left": {
																"type": "Literal",
																"value": "resource_2",
																"raw": "\"resource_2\""
															},
															"right": {
																"type": "Identifier",
																"name": "eventAttrs"
															}
														},
														"consequent": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "event"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "setResource"
																			}
																		},
																		"arguments": [
																			{
																				"type": "MemberExpression",
																				"computed": true,
																				"object": {
																					"type": "Identifier",
																					"name": "eventAttrs"
																				},
																				"property": {
																					"type": "Literal",
																					"value": "resource_2",
																					"raw": "\"resource_2\""
																				}
																			}
																		]
																	}
																}
															]
														},
														"alternate": null
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "event"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "createClearEvent"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "alarmId"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "event"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "Event"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "emsName"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "connector_name",
																		"raw": "\"connector_name\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setSource"
															}
														},
														"arguments": [
															{
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "CA_SPECTRUM"
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setEmsSystem"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "emsName"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "date"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "Date"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "dateStr"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "date"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toISOString"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "snDateStr"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "dateStr"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "replace"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "T",
																		"raw": "'T'"
																	},
																	{
																		"type": "Literal",
																		"value": " ",
																		"raw": "' '"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "attrValue"
														},
														"right": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "Identifier",
																	"name": "snDateStr"
																},
																"property": {
																	"type": "Identifier",
																	"name": "substring"
																}
															},
															"arguments": [
																{
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																},
																{
																	"type": "Literal",
																	"value": 19,
																	"raw": "19"
																}
															]
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setTimeOfEvent"
															}
														},
														"arguments": [
															{
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "snDateStr"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "substring"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": 0,
																		"raw": "0"
																	},
																	{
																		"type": "Literal",
																		"value": 19,
																		"raw": "19"
																	}
																]
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setSeverity"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setType"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Alarm removed.",
																"raw": "\"Alarm removed.\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setText"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Alarm removed.",
																"raw": "\"Alarm removed.\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setMessageKey"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "alarmId"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "event"
															},
															"property": {
																"type": "Identifier",
																"name": "setResolutionState"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Closing",
																"raw": "\"Closing\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "Alarm ",
																			"raw": "\"Alarm \""
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "alarmId"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": " removed. Event=",
																		"raw": "\" removed. Event=\""
																	}
																},
																"right": {
																	"type": "Identifier",
																	"name": "event"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "event"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "updateSource"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "command"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "argument"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "jsonRes"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "retVal"
															},
															"init": {
																"type": "ObjectExpression",
																"properties": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Bi-directional: Updating the source",
																"raw": "\"Bi-directional: Updating the source\""
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alertsJSONStr"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "alerts",
																		"raw": "\"alerts\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "alerts JSON: ",
																	"raw": "\"alerts JSON: \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "alertsJSONStr"
																}
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "alertsJSONStr"
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "+",
															"left": {
																"type": "Identifier",
																"name": "alertsJSONStr"
															},
															"right": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "alerts"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "JSON"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "parse"
																	}
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "alertsJSONStr"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "Identifier",
															"name": "alerts"
														},
														"right": {
															"type": "Literal",
															"value": null,
															"raw": "null"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Received json is empty",
																			"raw": "\"Received json is empty\""
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"right": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "FAILURE"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "toString"
																				}
																			},
																			"arguments": []
																		}
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "error_message"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_setReValErrorMessage"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "ReturnStatement",
																"argument": {
																	"type": "Identifier",
																	"name": "retVal"
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumAlarmBaseURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "url"
																},
																"right": {
																	"type": "Identifier",
																	"name": "undefined"
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "url"
																},
																"right": {
																	"type": "Literal",
																	"value": null,
																	"raw": "null"
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "url"
															},
															"right": {
																"type": "Literal",
																"value": "",
																"raw": "''"
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_error"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "URL parameter is empty",
																			"raw": "\"URL parameter is empty\""
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"right": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "FAILURE"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "toString"
																				}
																			},
																			"arguments": []
																		}
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "error_message"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_setReValErrorMessage"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "ReturnStatement",
																"argument": {
																	"type": "Identifier",
																	"name": "retVal"
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "foundErrors"
															},
															"init": {
																"type": "Literal",
																"value": false,
																"raw": "false"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ForStatement",
													"init": {
														"type": "VariableDeclaration",
														"declarations": [
															{
																"type": "VariableDeclarator",
																"id": {
																	"type": "Identifier",
																	"name": "i"
																},
																"init": {
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																}
															}
														],
														"kind": "var"
													},
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "i"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "alerts"
															},
															"property": {
																"type": "Identifier",
																"name": "length"
															}
														}
													},
													"update": {
														"type": "UpdateExpression",
														"operator": "++",
														"argument": {
															"type": "Identifier",
															"name": "i"
														},
														"prefix": true
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "alert"
																		},
																		"init": {
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "alerts"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "i"
																			}
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": "Alarm ID: ",
																						"raw": "\"Alarm ID: \""
																					},
																					"right": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "alert"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "key"
																						}
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": " values: ",
																					"raw": "\" values: \""
																				}
																			},
																			"right": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "alert"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "value"
																					}
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "length"
																				}
																			}
																		}
																	]
																}
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "attributeValues"
																		},
																		"init": {
																			"type": "ObjectExpression",
																			"properties": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "attributeValuesSet"
																		},
																		"init": {
																			"type": "Literal",
																			"value": false,
																			"raw": "false"
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ForStatement",
																"init": {
																	"type": "VariableDeclaration",
																	"declarations": [
																		{
																			"type": "VariableDeclarator",
																			"id": {
																				"type": "Identifier",
																				"name": "j"
																			},
																			"init": {
																				"type": "Literal",
																				"value": 0,
																				"raw": "0"
																			}
																		}
																	],
																	"kind": "var"
																},
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;lt;",
																	"left": {
																		"type": "Identifier",
																		"name": "j"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "alert"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "value"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "length"
																		}
																	}
																},
																"update": {
																	"type": "UpdateExpression",
																	"operator": "++",
																	"argument": {
																		"type": "Identifier",
																		"name": "j"
																	},
																	"prefix": true
																},
																"body": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alertValue"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "alert"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "value"
																							}
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "j"
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "alertValue"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "fieldName"
																					}
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "ALERT_UPDATE_MAPPING"
																					}
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "attr"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "ALERT_UPDATE_MAPPING"
																										}
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "alertValue"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "fieldName"
																										}
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "MemberExpression",
																								"computed": true,
																								"object": {
																									"type": "Identifier",
																									"name": "attributeValues"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "attr"
																								}
																							},
																							"right": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "alertValue"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "newValue"
																								}
																							}
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "attributeValuesSet"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "Identifier",
																	"name": "attributeValuesSet"
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "probe"
																						}
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "setParameter"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "action_performed",
																						"raw": "\"action_performed\""
																					},
																					{
																						"type": "Literal",
																						"value": "true",
																						"raw": "\"true\""
																					}
																				]
																			}
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "response"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "makePutCall"
																							}
																						},
																						"arguments": [
																							{
																								"type": "Identifier",
																								"name": "url"
																							},
																							{
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "alert"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "key"
																								}
																							},
																							{
																								"type": "Identifier",
																								"name": "attributeValues"
																							}
																						]
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "==",
																				"left": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"right": {
																					"type": "Literal",
																					"value": null,
																					"raw": "null"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "Literal",
																									"value": "Failed to connect to CA Spectrum on updateSource. Response is null.",
																									"raw": "\"Failed to connect to CA Spectrum on updateSource. Response is null.\""
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "foundErrors"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					},
																					{
																						"type": "BreakStatement",
																						"label": null
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "responseObj"
																					},
																					"init": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "parseResponse"
																							}
																						},
																						"arguments": [
																							{
																								"type": "Identifier",
																								"name": "response"
																							}
																						]
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "==",
																				"left": {
																					"type": "Identifier",
																					"name": "responseObj"
																				},
																				"right": {
																					"type": "Literal",
																					"value": null,
																					"raw": "null"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "BinaryExpression",
																										"operator": "+",
																										"left": {
																											"type": "Literal",
																											"value": "Response from CA Spectrum is not in expected format: ",
																											"raw": "\"Response from CA Spectrum is not in expected format: \""
																										},
																										"right": {
																											"type": "Identifier",
																											"name": "response"
																										}
																									},
																									"right": {
																										"type": "Literal",
																										"value": ".",
																										"raw": "\".\""
																									}
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "foundErrors"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					},
																					{
																						"type": "BreakStatement",
																						"label": null
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "foundAlarms"
																					},
																					"init": {
																						"type": "Literal",
																						"value": false,
																						"raw": "false"
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alarms"
																					},
																					"init": {
																						"type": "ArrayExpression",
																						"elements": []
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "VariableDeclaration",
																			"declarations": [
																				{
																					"type": "VariableDeclarator",
																					"id": {
																						"type": "Identifier",
																						"name": "alarmUpdateResponseList"
																					},
																					"init": {
																						"type": "MemberExpression",
																						"computed": true,
																						"object": {
																							"type": "Identifier",
																							"name": "responseObj"
																						},
																						"property": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST"
																							}
																						}
																					}
																				}
																			],
																			"kind": "var"
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "in",
																				"left": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "CA_SPECTRUM_ALARM_RESPONSES"
																					}
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "alarmUpdateResponseList"
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "alarmResponses"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarmUpdateResponseList"
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_ALARM_RESPONSES"
																										}
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "IfStatement",
																						"test": {
																							"type": "LogicalExpression",
																							"operator": "&amp;amp;&amp;amp;",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "!=",
																								"left": {
																									"type": "Identifier",
																									"name": "alarmResponses"
																								},
																								"right": {
																									"type": "Literal",
																									"value": "",
																									"raw": "\"\""
																								}
																							},
																							"right": {
																								"type": "BinaryExpression",
																								"operator": "in",
																								"left": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_ALARM"
																									}
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "alarmResponses"
																								}
																							}
																						},
																						"consequent": {
																							"type": "BlockStatement",
																							"body": [
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "AssignmentExpression",
																										"operator": "=",
																										"left": {
																											"type": "Identifier",
																											"name": "alarms"
																										},
																										"right": {
																											"type": "MemberExpression",
																											"computed": true,
																											"object": {
																												"type": "Identifier",
																												"name": "alarmResponses"
																											},
																											"property": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "ThisExpression"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "CA_SPECTRUM_ALARM"
																												}
																											}
																										}
																									}
																								},
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "AssignmentExpression",
																										"operator": "=",
																										"left": {
																											"type": "Identifier",
																											"name": "foundAlarms"
																										},
																										"right": {
																											"type": "Literal",
																											"value": true,
																											"raw": "true"
																										}
																									}
																								}
																							]
																						},
																						"alternate": null
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "UnaryExpression",
																				"operator": "!",
																				"argument": {
																					"type": "Identifier",
																					"name": "foundAlarms"
																				},
																				"prefix": true
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "BinaryExpression",
																									"operator": "+",
																									"left": {
																										"type": "Literal",
																										"value": "Alarm not updated. Not found. Alarm ID: ",
																										"raw": "\"Alarm not updated. Not found. Alarm ID: \""
																									},
																									"right": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "Identifier",
																											"name": "alert"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "key"
																										}
																									}
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "foundErrors"
																							},
																							"right": {
																								"type": "Literal",
																								"value": true,
																								"raw": "true"
																							}
																						}
																					},
																					{
																						"type": "ContinueStatement",
																						"label": null
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "UnaryExpression",
																				"operator": "!",
																				"argument": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "Array"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "isArray"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Identifier",
																							"name": "alarms"
																						}
																					]
																				},
																				"prefix": true
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "newArray"
																								},
																								"init": {
																									"type": "ArrayExpression",
																									"elements": []
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "newArray"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "push"
																								}
																							},
																							"arguments": [
																								{
																									"type": "Identifier",
																									"name": "alarms"
																								}
																							]
																						}
																					},
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "AssignmentExpression",
																							"operator": "=",
																							"left": {
																								"type": "Identifier",
																								"name": "alarms"
																							},
																							"right": {
																								"type": "Identifier",
																								"name": "newArray"
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "ForStatement",
																			"init": {
																				"type": "VariableDeclaration",
																				"declarations": [
																					{
																						"type": "VariableDeclarator",
																						"id": {
																							"type": "Identifier",
																							"name": "i"
																						},
																						"init": {
																							"type": "Literal",
																							"value": 0,
																							"raw": "0"
																						}
																					}
																				],
																				"kind": "var"
																			},
																			"test": {
																				"type": "BinaryExpression",
																				"operator": "&amp;lt;",
																				"left": {
																					"type": "Identifier",
																					"name": "i"
																				},
																				"right": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "alarms"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "length"
																					}
																				}
																			},
																			"update": {
																				"type": "UpdateExpression",
																				"operator": "++",
																				"argument": {
																					"type": "Identifier",
																					"name": "i"
																				},
																				"prefix": false
																			},
																			"body": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "alarm"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarms"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "i"
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "alarmId"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarm"
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_ID"
																										}
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "VariableDeclaration",
																						"declarations": [
																							{
																								"type": "VariableDeclarator",
																								"id": {
																									"type": "Identifier",
																									"name": "alarmAttributes"
																								},
																								"init": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarm"
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_ATTRIBUTES"
																										}
																									}
																								}
																							}
																						],
																						"kind": "var"
																					},
																					{
																						"type": "IfStatement",
																						"test": {
																							"type": "LogicalExpression",
																							"operator": "&amp;amp;&amp;amp;",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "in",
																								"left": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_ERROR"
																									}
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "alarm"
																								}
																							},
																							"right": {
																								"type": "BinaryExpression",
																								"operator": "!=",
																								"left": {
																									"type": "MemberExpression",
																									"computed": true,
																									"object": {
																										"type": "Identifier",
																										"name": "alarm"
																									},
																									"property": {
																										"type": "MemberExpression",
																										"computed": false,
																										"object": {
																											"type": "ThisExpression"
																										},
																										"property": {
																											"type": "Identifier",
																											"name": "CA_SPECTRUM_ERROR"
																										}
																									}
																								},
																								"right": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_SUCCESS"
																									}
																								}
																							}
																						},
																						"consequent": {
																							"type": "BlockStatement",
																							"body": [
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "CallExpression",
																										"callee": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "ThisExpression"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "_error"
																											}
																										},
																										"arguments": [
																											{
																												"type": "BinaryExpression",
																												"operator": "+",
																												"left": {
																													"type": "BinaryExpression",
																													"operator": "+",
																													"left": {
																														"type": "BinaryExpression",
																														"operator": "+",
																														"left": {
																															"type": "BinaryExpression",
																															"operator": "+",
																															"left": {
																																"type": "BinaryExpression",
																																"operator": "+",
																																"left": {
																																	"type": "Literal",
																																	"value": "Failed to update Alarm ",
																																	"raw": "\"Failed to update Alarm \""
																																},
																																"right": {
																																	"type": "Identifier",
																																	"name": "alarmId"
																																}
																															},
																															"right": {
																																"type": "Literal",
																																"value": " error=",
																																"raw": "\" error=\""
																															}
																														},
																														"right": {
																															"type": "MemberExpression",
																															"computed": true,
																															"object": {
																																"type": "Identifier",
																																"name": "alarm"
																															},
																															"property": {
																																"type": "MemberExpression",
																																"computed": false,
																																"object": {
																																	"type": "ThisExpression"
																																},
																																"property": {
																																	"type": "Identifier",
																																	"name": "CA_SPECTRUM_ERROR"
																																}
																															}
																														}
																													},
																													"right": {
																														"type": "Literal",
																														"value": " error message=",
																														"raw": "\" error message=\""
																													}
																												},
																												"right": {
																													"type": "MemberExpression",
																													"computed": true,
																													"object": {
																														"type": "Identifier",
																														"name": "alarm"
																													},
																													"property": {
																														"type": "MemberExpression",
																														"computed": false,
																														"object": {
																															"type": "ThisExpression"
																														},
																														"property": {
																															"type": "Identifier",
																															"name": "CA_SPECTRUM_ERROR_MESSAGE"
																														}
																													}
																												}
																											}
																										]
																									}
																								},
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "AssignmentExpression",
																										"operator": "=",
																										"left": {
																											"type": "Identifier",
																											"name": "foundErrors"
																										},
																										"right": {
																											"type": "Literal",
																											"value": true,
																											"raw": "true"
																										}
																									}
																								}
																							]
																						},
																						"alternate": null
																					},
																					{
																						"type": "IfStatement",
																						"test": {
																							"type": "UnaryExpression",
																							"operator": "!",
																							"argument": {
																								"type": "CallExpression",
																								"callee": {
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "Identifier",
																										"name": "Array"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "isArray"
																									}
																								},
																								"arguments": [
																									{
																										"type": "Identifier",
																										"name": "alarmAttributes"
																									}
																								]
																							},
																							"prefix": true
																						},
																						"consequent": {
																							"type": "BlockStatement",
																							"body": [
																								{
																									"type": "VariableDeclaration",
																									"declarations": [
																										{
																											"type": "VariableDeclarator",
																											"id": {
																												"type": "Identifier",
																												"name": "newAttrArray"
																											},
																											"init": {
																												"type": "ArrayExpression",
																												"elements": []
																											}
																										}
																									],
																									"kind": "var"
																								},
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "CallExpression",
																										"callee": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "Identifier",
																												"name": "newAttrArray"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "push"
																											}
																										},
																										"arguments": [
																											{
																												"type": "Identifier",
																												"name": "alarmAttributes"
																											}
																										]
																									}
																								},
																								{
																									"type": "ExpressionStatement",
																									"expression": {
																										"type": "AssignmentExpression",
																										"operator": "=",
																										"left": {
																											"type": "Identifier",
																											"name": "alarmAttributes"
																										},
																										"right": {
																											"type": "Identifier",
																											"name": "newAttrArray"
																										}
																									}
																								}
																							]
																						},
																						"alternate": null
																					},
																					{
																						"type": "ForStatement",
																						"init": {
																							"type": "VariableDeclaration",
																							"declarations": [
																								{
																									"type": "VariableDeclarator",
																									"id": {
																										"type": "Identifier",
																										"name": "j"
																									},
																									"init": {
																										"type": "Literal",
																										"value": 0,
																										"raw": "0"
																									}
																								}
																							],
																							"kind": "var"
																						},
																						"test": {
																							"type": "BinaryExpression",
																							"operator": "&amp;lt;",
																							"left": {
																								"type": "Identifier",
																								"name": "j"
																							},
																							"right": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "alarmAttributes"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "length"
																								}
																							}
																						},
																						"update": {
																							"type": "UpdateExpression",
																							"operator": "++",
																							"argument": {
																								"type": "Identifier",
																								"name": "j"
																							},
																							"prefix": false
																						},
																						"body": {
																							"type": "BlockStatement",
																							"body": [
																								{
																									"type": "VariableDeclaration",
																									"declarations": [
																										{
																											"type": "VariableDeclarator",
																											"id": {
																												"type": "Identifier",
																												"name": "attribute"
																											},
																											"init": {
																												"type": "MemberExpression",
																												"computed": true,
																												"object": {
																													"type": "Identifier",
																													"name": "alarmAttributes"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "j"
																												}
																											}
																										}
																									],
																									"kind": "var"
																								},
																								{
																									"type": "VariableDeclaration",
																									"declarations": [
																										{
																											"type": "VariableDeclarator",
																											"id": {
																												"type": "Identifier",
																												"name": "attrID"
																											},
																											"init": {
																												"type": "MemberExpression",
																												"computed": true,
																												"object": {
																													"type": "Identifier",
																													"name": "attribute"
																												},
																												"property": {
																													"type": "MemberExpression",
																													"computed": false,
																													"object": {
																														"type": "ThisExpression"
																													},
																													"property": {
																														"type": "Identifier",
																														"name": "CA_SPECTRUM_ID"
																													}
																												}
																											}
																										}
																									],
																									"kind": "var"
																								},
																								{
																									"type": "IfStatement",
																									"test": {
																										"type": "BinaryExpression",
																										"operator": "!=",
																										"left": {
																											"type": "MemberExpression",
																											"computed": true,
																											"object": {
																												"type": "Identifier",
																												"name": "attribute"
																											},
																											"property": {
																												"type": "MemberExpression",
																												"computed": false,
																												"object": {
																													"type": "ThisExpression"
																												},
																												"property": {
																													"type": "Identifier",
																													"name": "CA_SPECTRUM_ERROR"
																												}
																											}
																										},
																										"right": {
																											"type": "MemberExpression",
																											"computed": false,
																											"object": {
																												"type": "ThisExpression"
																											},
																											"property": {
																												"type": "Identifier",
																												"name": "CA_SPECTRUM_SUCCESS"
																											}
																										}
																									},
																									"consequent": {
																										"type": "BlockStatement",
																										"body": [
																											{
																												"type": "ExpressionStatement",
																												"expression": {
																													"type": "CallExpression",
																													"callee": {
																														"type": "MemberExpression",
																														"computed": false,
																														"object": {
																															"type": "ThisExpression"
																														},
																														"property": {
																															"type": "Identifier",
																															"name": "_error"
																														}
																													},
																													"arguments": [
																														{
																															"type": "BinaryExpression",
																															"operator": "+",
																															"left": {
																																"type": "BinaryExpression",
																																"operator": "+",
																																"left": {
																																	"type": "BinaryExpression",
																																	"operator": "+",
																																	"left": {
																																		"type": "BinaryExpression",
																																		"operator": "+",
																																		"left": {
																																			"type": "BinaryExpression",
																																			"operator": "+",
																																			"left": {
																																				"type": "BinaryExpression",
																																				"operator": "+",
																																				"left": {
																																					"type": "BinaryExpression",
																																					"operator": "+",
																																					"left": {
																																						"type": "Literal",
																																						"value": "Failed to update Alarm ",
																																						"raw": "\"Failed to update Alarm \""
																																					},
																																					"right": {
																																						"type": "Identifier",
																																						"name": "alarmId"
																																					}
																																				},
																																				"right": {
																																					"type": "Literal",
																																					"value": " attribute ",
																																					"raw": "\" attribute \""
																																				}
																																			},
																																			"right": {
																																				"type": "Identifier",
																																				"name": "attrID"
																																			}
																																		},
																																		"right": {
																																			"type": "Literal",
																																			"value": " error=",
																																			"raw": "\" error=\""
																																		}
																																	},
																																	"right": {
																																		"type": "MemberExpression",
																																		"computed": true,
																																		"object": {
																																			"type": "Identifier",
																																			"name": "attribute"
																																		},
																																		"property": {
																																			"type": "MemberExpression",
																																			"computed": false,
																																			"object": {
																																				"type": "ThisExpression"
																																			},
																																			"property": {
																																				"type": "Identifier",
																																				"name": "CA_SPECTRUM_ERROR"
																																			}
																																		}
																																	}
																																},
																																"right": {
																																	"type": "Literal",
																																	"value": " error message=",
																																	"raw": "\" error message=\""
																																}
																															},
																															"right": {
																																"type": "MemberExpression",
																																"computed": true,
																																"object": {
																																	"type": "Identifier",
																																	"name": "attribute"
																																},
																																"property": {
																																	"type": "MemberExpression",
																																	"computed": false,
																																	"object": {
																																		"type": "ThisExpression"
																																	},
																																	"property": {
																																		"type": "Identifier",
																																		"name": "CA_SPECTRUM_ERROR_MESSAGE"
																																	}
																																}
																															}
																														}
																													]
																												}
																											},
																											{
																												"type": "ExpressionStatement",
																												"expression": {
																													"type": "AssignmentExpression",
																													"operator": "=",
																													"left": {
																														"type": "Identifier",
																														"name": "foundErrors"
																													},
																													"right": {
																														"type": "Literal",
																														"value": true,
																														"raw": "true"
																													}
																												}
																											}
																										]
																									},
																									"alternate": null
																								}
																							]
																						}
																					}
																				]
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_debug"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "Literal",
																							"value": "Nothing to update on Alarm ID: ",
																							"raw": "\"Nothing to update on Alarm ID: \""
																						},
																						"right": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "alert"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "key"
																							}
																						}
																					}
																				]
																			}
																		}
																	]
																}
															}
														]
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "Identifier",
														"name": "foundErrors"
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "error_message"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_setReValErrorMessage"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"right": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "FAILURE"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "toString"
																				}
																			},
																			"arguments": []
																		}
																	}
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "retVal"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "status"
																		}
																	},
																	"right": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "",
																			"raw": "\"\""
																		},
																		"right": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "SUCCESS"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "toString"
																				}
																			},
																			"arguments": []
																		}
																	}
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "retVal"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "makePostCall"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "url"
											},
											{
												"type": "Identifier",
												"name": "content"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "username"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "username",
																		"raw": "\"username\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "password"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "password",
																		"raw": "\"password\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "POST URL: ",
																	"raw": "'POST URL: '"
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "request"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "HTTPRequest"
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setBasicAuth"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "username"
															},
															{
																"type": "Identifier",
																"name": "password"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Accept",
																"raw": "'Accept'"
															},
															{
																"type": "Literal",
																"value": "application/json",
																"raw": "'application/json'"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Content-Type",
																"raw": "'Content-Type'"
															},
															{
																"type": "Literal",
																"value": "application/xml",
																"raw": "'application/xml'"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "Literal",
																"value": null,
																"raw": "null"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "request"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "post"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "content"
																			}
																		]
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "No response on POST call.",
																						"raw": "\"No response on POST call.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "status"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "getStatusCode"
																				}
																			},
																			"arguments": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "!=",
																	"left": {
																		"type": "Identifier",
																		"name": "status"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 200,
																		"raw": "200"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Bad POST response. Status: ",
																									"raw": "\"Bad POST response. Status: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Message: ",
																								"raw": "\" Message: \""
																							}
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "response"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "getErrorMessage"
																								}
																							},
																							"arguments": []
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "POST Status: ",
																				"raw": "\"POST Status: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		}
																	]
																}
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ReturnStatement",
																	"argument": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "response"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "makeSubscriptionPostCall"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "url"
											},
											{
												"type": "Identifier",
												"name": "content"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "username"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "username",
																		"raw": "\"username\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "password"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "password",
																		"raw": "\"password\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Subscription POST URL: ",
																	"raw": "'Subscription POST URL: '"
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "request"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "HTTPRequest"
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setBasicAuth"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "username"
															},
															{
																"type": "Identifier",
																"name": "password"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Accept",
																"raw": "'Accept'"
															},
															{
																"type": "Literal",
																"value": "application/json",
																"raw": "'application/json'"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Content-Type",
																"raw": "'Content-Type'"
															},
															{
																"type": "Literal",
																"value": "application/xml",
																"raw": "'application/xml'"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "Literal",
																"value": null,
																"raw": "null"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "request"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "post"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "content"
																			}
																		]
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "No response on Subscription POST call.",
																						"raw": "\"No response on Subscription POST call.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "status"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "getStatusCode"
																				}
																			},
																			"arguments": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "!=",
																	"left": {
																		"type": "Identifier",
																		"name": "status"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 200,
																		"raw": "200"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Bad Subscription POST response. Status: ",
																									"raw": "\"Bad Subscription POST response. Status: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Message: ",
																								"raw": "\" Message: \""
																							}
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "response"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "getErrorMessage"
																								}
																							},
																							"arguments": []
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "Subscription POST Status: ",
																				"raw": "\"Subscription POST Status: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		}
																	]
																}
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ReturnStatement",
																	"argument": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "response"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "makePutCall"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "url"
											},
											{
												"type": "Identifier",
												"name": "alarmID"
											},
											{
												"type": "Identifier",
												"name": "attributeValues"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "username"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "username",
																		"raw": "\"username\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "password"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "password",
																		"raw": "\"password\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "+=",
														"left": {
															"type": "Identifier",
															"name": "url"
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "+",
															"left": {
																"type": "Literal",
																"value": "/",
																"raw": "\"/\""
															},
															"right": {
																"type": "Identifier",
																"name": "alarmID"
															}
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "PUT URL: ",
																	"raw": "'PUT URL: '"
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "request"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "HTTPRequest"
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setLogLevel"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "all",
																"raw": "\"all\""
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setBasicAuth"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "username"
															},
															{
																"type": "Identifier",
																"name": "password"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Accept",
																"raw": "'Accept'"
															},
															{
																"type": "Literal",
																"value": "application/json",
																"raw": "'application/json'"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Content-Type",
																"raw": "'Content-Type'"
															},
															{
																"type": "Literal",
																"value": "application/xml",
																"raw": "'application/xml'"
															}
														]
													}
												},
												{
													"type": "ForInStatement",
													"left": {
														"type": "Identifier",
														"name": "attr"
													},
													"right": {
														"type": "Identifier",
														"name": "attributeValues"
													},
													"body": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "request"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "addParameter"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "attr",
																			"raw": "\"attr\""
																		},
																		{
																			"type": "Identifier",
																			"name": "attr"
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "request"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "addParameter"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "val",
																			"raw": "\"val\""
																		},
																		{
																			"type": "MemberExpression",
																			"computed": true,
																			"object": {
																				"type": "Identifier",
																				"name": "attributeValues"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "attr"
																			}
																		}
																	]
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": "Adding parameter attr=",
																						"raw": "\"Adding parameter attr=\""
																					},
																					"right": {
																						"type": "Identifier",
																						"name": "attr"
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": " val=",
																					"raw": "\" val=\""
																				}
																			},
																			"right": {
																				"type": "MemberExpression",
																				"computed": true,
																				"object": {
																					"type": "Identifier",
																					"name": "attributeValues"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "attr"
																				}
																			}
																		}
																	]
																}
															}
														]
													},
													"each": false
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "Literal",
																"value": null,
																"raw": "null"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "request"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "put"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Literal",
																				"value": "",
																				"raw": "\"\""
																			}
																		]
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "No response on PUT call.",
																						"raw": "\"No response on PUT call.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "status"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "getStatusCode"
																				}
																			},
																			"arguments": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "PUT Status: ",
																				"raw": "\"PUT Status: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "!=",
																	"left": {
																		"type": "Identifier",
																		"name": "status"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 200,
																		"raw": "200"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Bad PUT response. Status: ",
																									"raw": "\"Bad PUT response. Status: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Message: ",
																								"raw": "\" Message: \""
																							}
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "response"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "getErrorMessage"
																								}
																							},
																							"arguments": []
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ReturnStatement",
																	"argument": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "response"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "makeGetCall"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "url"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "username"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "username",
																		"raw": "\"username\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "password"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "password",
																		"raw": "\"password\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "GET URL: ",
																	"raw": "'GET URL: '"
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "request"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "HTTPRequest"
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setBasicAuth"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "username"
															},
															{
																"type": "Identifier",
																"name": "password"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Accept",
																"raw": "'Accept'"
															},
															{
																"type": "Literal",
																"value": "application/json",
																"raw": "'application/json'"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Content-Type",
																"raw": "'Content-Type'"
															},
															{
																"type": "Literal",
																"value": "application/xml",
																"raw": "'application/xml'"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "Literal",
																"value": null,
																"raw": "null"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "request"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "get"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "No response on GET call.",
																						"raw": "\"No response on GET call.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "status"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "getStatusCode"
																				}
																			},
																			"arguments": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "!=",
																	"left": {
																		"type": "Identifier",
																		"name": "status"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 200,
																		"raw": "200"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Bad GET response. Status: ",
																									"raw": "\"Bad GET response. Status: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Message: ",
																								"raw": "\" Message: \""
																							}
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "response"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "getErrorMessage"
																								}
																							},
																							"arguments": []
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "GET Status: ",
																				"raw": "\"GET Status: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		}
																	]
																}
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ReturnStatement",
																	"argument": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "response"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "makeSubscriptionGetCall"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "url"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "username"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "username",
																		"raw": "\"username\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "password"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "password",
																		"raw": "\"password\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Subscriptions GET URL: ",
																	"raw": "'Subscriptions GET URL: '"
																},
																"right": {
																	"type": "Identifier",
																	"name": "url"
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "request"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "HTTPRequest"
																},
																"arguments": [
																	{
																		"type": "Identifier",
																		"name": "url"
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "setBasicAuth"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "username"
															},
															{
																"type": "Identifier",
																"name": "password"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Accept",
																"raw": "'Accept'"
															},
															{
																"type": "Literal",
																"value": "application/json",
																"raw": "'application/json'"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "request"
															},
															"property": {
																"type": "Identifier",
																"name": "addHeader"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "Content-Type",
																"raw": "'Content-Type'"
															},
															{
																"type": "Literal",
																"value": "application/xml",
																"raw": "'application/xml'"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "response"
															},
															"init": {
																"type": "Literal",
																"value": null,
																"raw": "null"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "TryStatement",
													"block": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "Identifier",
																				"name": "request"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "get"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "UnaryExpression",
																	"operator": "!",
																	"argument": {
																		"type": "Identifier",
																		"name": "response"
																	},
																	"prefix": true
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "Literal",
																						"value": "No response on Subscriptions GET call.",
																						"raw": "\"No response on Subscriptions GET call.\""
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															},
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "status"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "response"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "getStatusCode"
																				}
																			},
																			"arguments": []
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_debug"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Literal",
																				"value": "Subscriptions GET Status: ",
																				"raw": "\"Subscriptions GET Status: \""
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "status"
																			}
																		}
																	]
																}
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "!=",
																	"left": {
																		"type": "Identifier",
																		"name": "status"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 200,
																		"raw": "200"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "IfStatement",
																			"test": {
																				"type": "LogicalExpression",
																				"operator": "&amp;amp;&amp;amp;",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "==",
																					"left": {
																						"type": "Identifier",
																						"name": "status"
																					},
																					"right": {
																						"type": "Literal",
																						"value": 400,
																						"raw": "400"
																					}
																				},
																				"right": {
																					"type": "BinaryExpression",
																					"operator": "==",
																					"left": {
																						"type": "CallExpression",
																						"callee": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "Identifier",
																								"name": "response"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "getBody"
																							}
																						},
																						"arguments": []
																					},
																					"right": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																						}
																					}
																				}
																			},
																			"consequent": {
																				"type": "BlockStatement",
																				"body": [
																					{
																						"type": "ExpressionStatement",
																						"expression": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "ThisExpression"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "_error"
																								}
																							},
																							"arguments": [
																								{
																									"type": "MemberExpression",
																									"computed": false,
																									"object": {
																										"type": "ThisExpression"
																									},
																									"property": {
																										"type": "Identifier",
																										"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																									}
																								}
																							]
																						}
																					},
																					{
																						"type": "ReturnStatement",
																						"argument": {
																							"type": "MemberExpression",
																							"computed": false,
																							"object": {
																								"type": "ThisExpression"
																							},
																							"property": {
																								"type": "Identifier",
																								"name": "CA_SPECTRUM_INVALID_SUBSCRIPTION_ID"
																							}
																						}
																					}
																				]
																			},
																			"alternate": null
																		},
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "ThisExpression"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "_error"
																					}
																				},
																				"arguments": [
																					{
																						"type": "BinaryExpression",
																						"operator": "+",
																						"left": {
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "BinaryExpression",
																								"operator": "+",
																								"left": {
																									"type": "Literal",
																									"value": "Bad Subscriptions GET response. Status: ",
																									"raw": "\"Bad Subscriptions GET response. Status: \""
																								},
																								"right": {
																									"type": "Identifier",
																									"name": "status"
																								}
																							},
																							"right": {
																								"type": "Literal",
																								"value": " Message: ",
																								"raw": "\" Message: \""
																							}
																						},
																						"right": {
																							"type": "CallExpression",
																							"callee": {
																								"type": "MemberExpression",
																								"computed": false,
																								"object": {
																									"type": "Identifier",
																									"name": "response"
																								},
																								"property": {
																									"type": "Identifier",
																									"name": "getErrorMessage"
																								}
																							},
																							"arguments": []
																						}
																					}
																				]
																			}
																		},
																		{
																			"type": "ReturnStatement",
																			"argument": {
																				"type": "Literal",
																				"value": null,
																				"raw": "null"
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													},
													"handler": {
														"type": "CatchClause",
														"param": {
															"type": "Identifier",
															"name": "e"
														},
														"body": {
															"type": "BlockStatement",
															"body": [
																{
																	"type": "ExpressionStatement",
																	"expression": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_error"
																			}
																		},
																		"arguments": [
																			{
																				"type": "CallExpression",
																				"callee": {
																					"type": "MemberExpression",
																					"computed": false,
																					"object": {
																						"type": "Identifier",
																						"name": "e"
																					},
																					"property": {
																						"type": "Identifier",
																						"name": "toString"
																					}
																				},
																				"arguments": []
																			}
																		]
																	}
																},
																{
																	"type": "ReturnStatement",
																	"argument": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															]
														}
													},
													"finalizer": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "response"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "getMappedSeverity"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "spectrumSeverity"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "mappedSeverity"
															},
															"init": {
																"type": "Literal",
																"value": 5,
																"raw": "5"
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "in",
														"left": {
															"type": "Identifier",
															"name": "spectrumSeverity"
														},
														"right": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "SPECTRUM_SEVERITY_MAP"
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "mappedSeverity"
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "SPECTRUM_SEVERITY_MAP"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "spectrumSeverity"
																		}
																	}
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "mappedSeverity"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "getPriorDateInSeconds"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "daysAgo"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "dt"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "Date"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "ms"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "dt"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getTime"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "ms"
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "-",
															"left": {
																"type": "Identifier",
																"name": "ms"
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "*",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "*",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "*",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "*",
																			"left": {
																				"type": "Identifier",
																				"name": "daysAgo"
																			},
																			"right": {
																				"type": "Literal",
																				"value": 24,
																				"raw": "24"
																			}
																		},
																		"right": {
																			"type": "Literal",
																			"value": 60,
																			"raw": "60"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": 60,
																		"raw": "60"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": 1000,
																	"raw": "1000"
																}
															}
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "Math"
															},
															"property": {
																"type": "Identifier",
																"name": "round"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "/",
																"left": {
																	"type": "Identifier",
																	"name": "ms"
																},
																"right": {
																	"type": "Literal",
																	"value": 1000,
																	"raw": "1000"
																}
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_getLastEventInfo"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "last_event",
																		"raw": "\"last_event\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Last event: ",
																	"raw": "\"Last event: \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "lastEvent"
																}
															}
														]
													}
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "||",
														"left": {
															"type": "LogicalExpression",
															"operator": "||",
															"left": {
																"type": "BinaryExpression",
																"operator": "===",
																"left": {
																	"type": "UnaryExpression",
																	"operator": "typeof",
																	"argument": {
																		"type": "Identifier",
																		"name": "lastEvent"
																	},
																	"prefix": true
																},
																"right": {
																	"type": "Literal",
																	"value": "undefined",
																	"raw": "\"undefined\""
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "===",
																"left": {
																	"type": "Identifier",
																	"name": "lastEvent"
																},
																"right": {
																	"type": "Literal",
																	"value": null,
																	"raw": "null"
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "==",
															"left": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"right": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "firstRun"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": true,
																		"raw": "true"
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": "",
																		"raw": "\"\""
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_getInitialSyncValue"
																			}
																		},
																		"arguments": []
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "First run of collector.",
																			"raw": "\"First run of collector.\""
																		}
																	]
																}
															},
															{
																"type": "ReturnStatement",
																"argument": null
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "CallExpression",
															"callee": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "Identifier",
																	"name": "lastEvent"
																},
																"property": {
																	"type": "Identifier",
																	"name": "substr"
																}
															},
															"arguments": [
																{
																	"type": "Literal",
																	"value": 0,
																	"raw": "0"
																},
																{
																	"type": "Literal",
																	"value": 1,
																	"raw": "1"
																}
															]
														},
														"right": {
															"type": "Literal",
															"value": "{",
															"raw": "\"{\""
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "lastEventObj"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "NewExpression",
																					"callee": {
																						"type": "Identifier",
																						"name": "JSONParser"
																					},
																					"arguments": []
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "parse"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Identifier",
																					"name": "lastEvent"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "lastEventObj"
																		},
																		"property": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "LAST_EVENT_SUBSCRIPTION_ID"
																			}
																		}
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	},
																	"right": {
																		"type": "MemberExpression",
																		"computed": true,
																		"object": {
																			"type": "Identifier",
																			"name": "lastEventObj"
																		},
																		"property": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "LAST_EVENT_LAST_OCCURRENCE_SECONDS"
																			}
																		}
																	}
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "subscriptionId"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_getSubscriptionId"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "lastEvent"
																			}
																		]
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "lastOccurrenceSecs"
																		}
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_getLastRunDateTimeInSeconds"
																			}
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "lastEvent"
																			}
																		]
																	}
																}
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_getSubscriptionId"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "lastEvent"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "subscriptionId"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "&amp;amp;&amp;amp;",
														"left": {
															"type": "LogicalExpression",
															"operator": "&amp;amp;&amp;amp;",
															"left": {
																"type": "LogicalExpression",
																"operator": "&amp;amp;&amp;amp;",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "!==",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "typeof",
																		"argument": {
																			"type": "Identifier",
																			"name": "lastEvent"
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Literal",
																		"value": "undefined",
																		"raw": "\"undefined\""
																	}
																},
																"right": {
																	"type": "BinaryExpression",
																	"operator": "!==",
																	"left": {
																		"type": "Identifier",
																		"name": "lastEvent"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "!=",
																"left": {
																	"type": "Identifier",
																	"name": "lastEvent"
																},
																"right": {
																	"type": "Literal",
																	"value": "",
																	"raw": "\"\""
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "!=",
															"left": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"right": {
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "dotIdx"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "lastEvent"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "indexOf"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Literal",
																					"value": ".",
																					"raw": "'.'"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;gt;=",
																	"left": {
																		"type": "Identifier",
																		"name": "dotIdx"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 0,
																		"raw": "0"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "subscriptionId"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "lastEvent"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "substr"
																						}
																					},
																					"arguments": [
																						{
																							"type": "BinaryExpression",
																							"operator": "+",
																							"left": {
																								"type": "Identifier",
																								"name": "dotIdx"
																							},
																							"right": {
																								"type": "Literal",
																								"value": 1,
																								"raw": "1"
																							}
																						}
																					]
																				}
																			}
																		}
																	]
																},
																"alternate": null
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": "Subscription id: ",
																	"raw": "\"Subscription id: \""
																},
																"right": {
																	"type": "Identifier",
																	"name": "subscriptionId"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "subscriptionId"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_getLastRunDateTimeInSeconds"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "lastEvent"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "lastRun"
															},
															"init": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "LogicalExpression",
														"operator": "&amp;amp;&amp;amp;",
														"left": {
															"type": "LogicalExpression",
															"operator": "&amp;amp;&amp;amp;",
															"left": {
																"type": "LogicalExpression",
																"operator": "&amp;amp;&amp;amp;",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "!==",
																	"left": {
																		"type": "UnaryExpression",
																		"operator": "typeof",
																		"argument": {
																			"type": "Identifier",
																			"name": "lastEvent"
																		},
																		"prefix": true
																	},
																	"right": {
																		"type": "Literal",
																		"value": "undefined",
																		"raw": "\"undefined\""
																	}
																},
																"right": {
																	"type": "BinaryExpression",
																	"operator": "!==",
																	"left": {
																		"type": "Identifier",
																		"name": "lastEvent"
																	},
																	"right": {
																		"type": "Literal",
																		"value": null,
																		"raw": "null"
																	}
																}
															},
															"right": {
																"type": "BinaryExpression",
																"operator": "!=",
																"left": {
																	"type": "Identifier",
																	"name": "lastEvent"
																},
																"right": {
																	"type": "Literal",
																	"value": "",
																	"raw": "\"\""
																}
															}
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "!=",
															"left": {
																"type": "Identifier",
																"name": "lastEvent"
															},
															"right": {
																"type": "Literal",
																"value": "0",
																"raw": "\"0\""
															}
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "VariableDeclaration",
																"declarations": [
																	{
																		"type": "VariableDeclarator",
																		"id": {
																			"type": "Identifier",
																			"name": "dotIdx"
																		},
																		"init": {
																			"type": "CallExpression",
																			"callee": {
																				"type": "MemberExpression",
																				"computed": false,
																				"object": {
																					"type": "Identifier",
																					"name": "lastEvent"
																				},
																				"property": {
																					"type": "Identifier",
																					"name": "indexOf"
																				}
																			},
																			"arguments": [
																				{
																					"type": "Literal",
																					"value": ".",
																					"raw": "'.'"
																				}
																			]
																		}
																	}
																],
																"kind": "var"
															},
															{
																"type": "IfStatement",
																"test": {
																	"type": "BinaryExpression",
																	"operator": "&amp;gt;=",
																	"left": {
																		"type": "Identifier",
																		"name": "dotIdx"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 0,
																		"raw": "0"
																	}
																},
																"consequent": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "lastRun"
																				},
																				"right": {
																					"type": "CallExpression",
																					"callee": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "Identifier",
																							"name": "lastEvent"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "substr"
																						}
																					},
																					"arguments": [
																						{
																							"type": "Literal",
																							"value": 0,
																							"raw": "0"
																						},
																						{
																							"type": "Identifier",
																							"name": "dotIdx"
																						}
																					]
																				}
																			}
																		}
																	]
																},
																"alternate": {
																	"type": "BlockStatement",
																	"body": [
																		{
																			"type": "ExpressionStatement",
																			"expression": {
																				"type": "AssignmentExpression",
																				"operator": "=",
																				"left": {
																					"type": "Identifier",
																					"name": "lastRun"
																				},
																				"right": {
																					"type": "Identifier",
																					"name": "lastEvent"
																				}
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "==",
														"left": {
															"type": "Identifier",
															"name": "lastRun"
														},
														"right": {
															"type": "Literal",
															"value": "",
															"raw": "\"\""
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "lastRun"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "_getInitialSyncValue"
																			}
																		},
																		"arguments": []
																	}
																}
															}
														]
													},
													"alternate": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "lastRun"
																	},
																	"right": {
																		"type": "CallExpression",
																		"callee": {
																			"type": "Identifier",
																			"name": "parseInt"
																		},
																		"arguments": [
																			{
																				"type": "Identifier",
																				"name": "lastRun"
																			}
																		]
																	}
																}
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "milliseconds"
															},
															"init": {
																"type": "BinaryExpression",
																"operator": "*",
																"left": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "Identifier",
																		"name": "parseInt"
																	},
																	"arguments": [
																		{
																			"type": "Identifier",
																			"name": "lastRun"
																		}
																	]
																},
																"right": {
																	"type": "Literal",
																	"value": 1000,
																	"raw": "1000"
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "date"
															},
															"init": {
																"type": "NewExpression",
																"callee": {
																	"type": "Identifier",
																	"name": "Date"
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "date"
															},
															"property": {
																"type": "Identifier",
																"name": "setTime"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "milliseconds"
															}
														]
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "dateStr"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "Identifier",
																		"name": "date"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "toISOString"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "_debug"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "Last run: ",
																			"raw": "\"Last run: \""
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "lastRun"
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": " Readable: ",
																		"raw": "\" Readable: \""
																	}
																},
																"right": {
																	"type": "Identifier",
																	"name": "dateStr"
																}
															}
														]
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "lastRun"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_getInitialSyncValue"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "daysAgo"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "initial_sync_in_days",
																		"raw": "\"initial_sync_in_days\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "IfStatement",
													"test": {
														"type": "BinaryExpression",
														"operator": "&amp;lt;",
														"left": {
															"type": "Identifier",
															"name": "daysAgo"
														},
														"right": {
															"type": "Literal",
															"value": 1,
															"raw": "1"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "AssignmentExpression",
																	"operator": "=",
																	"left": {
																		"type": "Identifier",
																		"name": "daysAgo"
																	},
																	"right": {
																		"type": "Literal",
																		"value": 7,
																		"raw": "7"
																	}
																}
															},
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "_info"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "Number of days to sync cant be lower than 1, reverted to 7 days",
																			"raw": "\"Number of days to sync cant be lower than 1, reverted to 7 days\""
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "ThisExpression"
															},
															"property": {
																"type": "Identifier",
																"name": "getPriorDateInSeconds"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "daysAgo"
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "buildSpectrumPollAlarmsURL"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumSubscriptionBaseURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "+=",
														"left": {
															"type": "Identifier",
															"name": "url"
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "+",
															"left": {
																"type": "Literal",
																"value": "/",
																"raw": "\"/\""
															},
															"right": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "subscriptionId"
																}
															}
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "url"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "buildSpectrumGetAlarmsURL"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "ThisExpression"
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "buildSpectrumAlarmBaseURL"
																	}
																},
																"arguments": []
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "symptoms"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "include_symptoms",
																		"raw": "\"include_symptoms\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "symptoms"
														},
														"right": {
															"type": "ConditionalExpression",
															"test": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "symptoms"
																},
																"right": {
																	"type": "Literal",
																	"value": "true",
																	"raw": "'true'"
																}
															},
															"consequent": {
																"type": "Literal",
																"value": "yes",
																"raw": "'yes'"
															},
															"alternate": {
																"type": "Literal",
																"value": "no",
																"raw": "'no'"
															}
														}
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "+=",
														"left": {
															"type": "Identifier",
															"name": "url"
														},
														"right": {
															"type": "BinaryExpression",
															"operator": "+",
															"left": {
																"type": "Literal",
																"value": "?symptoms=",
																"raw": "\"?symptoms=\""
															},
															"right": {
																"type": "Identifier",
																"name": "symptoms"
															}
														}
													}
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "url"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "buildSpectrumAlarmBaseURL"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "host"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "host",
																		"raw": "\"host\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "port"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "port",
																		"raw": "\"port\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "port"
														},
														"right": {
															"type": "ConditionalExpression",
															"test": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "port"
																},
																"right": {
																	"type": "Literal",
																	"value": 80,
																	"raw": "80"
																}
															},
															"consequent": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															},
															"alternate": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": ":",
																	"raw": "\":\""
																},
																"right": {
																	"type": "Identifier",
																	"name": "port"
																}
															}
														}
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "protocol"
															},
															"init": {
																"type": "LogicalExpression",
																"operator": "||",
																"left": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "probe"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "getAdditionalParameter"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "protocol",
																			"raw": "\"protocol\""
																		}
																	]
																},
																"right": {
																	"type": "Literal",
																	"value": "http",
																	"raw": "\"http\""
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Identifier",
																				"name": "protocol"
																			},
																			"right": {
																				"type": "Literal",
																				"value": "://",
																				"raw": "\"://\""
																			}
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "host"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "port"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": "/spectrum/restful/alarms",
																	"raw": "\"/spectrum/restful/alarms\""
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "url"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "buildSpectrumSubscriptionBaseURL"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "host"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "host",
																		"raw": "\"host\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "port"
															},
															"init": {
																"type": "CallExpression",
																"callee": {
																	"type": "MemberExpression",
																	"computed": false,
																	"object": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "ThisExpression"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "probe"
																		}
																	},
																	"property": {
																		"type": "Identifier",
																		"name": "getAdditionalParameter"
																	}
																},
																"arguments": [
																	{
																		"type": "Literal",
																		"value": "port",
																		"raw": "\"port\""
																	}
																]
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "AssignmentExpression",
														"operator": "=",
														"left": {
															"type": "Identifier",
															"name": "port"
														},
														"right": {
															"type": "ConditionalExpression",
															"test": {
																"type": "BinaryExpression",
																"operator": "==",
																"left": {
																	"type": "Identifier",
																	"name": "port"
																},
																"right": {
																	"type": "Literal",
																	"value": 80,
																	"raw": "80"
																}
															},
															"consequent": {
																"type": "Literal",
																"value": "",
																"raw": "\"\""
															},
															"alternate": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "Literal",
																	"value": ":",
																	"raw": "\":\""
																},
																"right": {
																	"type": "Identifier",
																	"name": "port"
																}
															}
														}
													}
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "protocol"
															},
															"init": {
																"type": "LogicalExpression",
																"operator": "||",
																"left": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "probe"
																			}
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "getAdditionalParameter"
																		}
																	},
																	"arguments": [
																		{
																			"type": "Literal",
																			"value": "protocol",
																			"raw": "\"protocol\""
																		}
																	]
																},
																"right": {
																	"type": "Literal",
																	"value": "http",
																	"raw": "\"http\""
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "VariableDeclaration",
													"declarations": [
														{
															"type": "VariableDeclarator",
															"id": {
																"type": "Identifier",
																"name": "url"
															},
															"init": {
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "Identifier",
																				"name": "protocol"
																			},
																			"right": {
																				"type": "Literal",
																				"value": "://",
																				"raw": "\"://\""
																			}
																		},
																		"right": {
																			"type": "Identifier",
																			"name": "host"
																		}
																	},
																	"right": {
																		"type": "Identifier",
																		"name": "port"
																	}
																},
																"right": {
																	"type": "Literal",
																	"value": "/spectrum/restful/subscription",
																	"raw": "\"/spectrum/restful/subscription\""
																}
															}
														}
													],
													"kind": "var"
												},
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "Identifier",
														"name": "url"
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_setReValErrorMessage"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ReturnStatement",
													"argument": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "errorMessages"
																}
															},
															"property": {
																"type": "Identifier",
																"name": "join"
															}
														},
														"arguments": [
															{
																"type": "Literal",
																"value": "\n",
																"raw": "\"\\n\""
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_error"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "message"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "MemberExpression",
																"computed": false,
																"object": {
																	"type": "ThisExpression"
																},
																"property": {
																	"type": "Identifier",
																	"name": "errorMessages"
																}
															},
															"property": {
																"type": "Identifier",
																"name": "push"
															}
														},
														"arguments": [
															{
																"type": "Identifier",
																"name": "message"
															}
														]
													}
												},
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "ms"
															},
															"property": {
																"type": "Identifier",
																"name": "log"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "*** ERROR: ",
																			"raw": "\"*** ERROR: \""
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "type"
																			}
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": " ",
																		"raw": "\" \""
																	}
																},
																"right": {
																	"type": "Identifier",
																	"name": "message"
																}
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_info"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "message"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "ExpressionStatement",
													"expression": {
														"type": "CallExpression",
														"callee": {
															"type": "MemberExpression",
															"computed": false,
															"object": {
																"type": "Identifier",
																"name": "ms"
															},
															"property": {
																"type": "Identifier",
																"name": "log"
															}
														},
														"arguments": [
															{
																"type": "BinaryExpression",
																"operator": "+",
																"left": {
																	"type": "BinaryExpression",
																	"operator": "+",
																	"left": {
																		"type": "BinaryExpression",
																		"operator": "+",
																		"left": {
																			"type": "Literal",
																			"value": "*** INFO: ",
																			"raw": "\"*** INFO: \""
																		},
																		"right": {
																			"type": "MemberExpression",
																			"computed": false,
																			"object": {
																				"type": "ThisExpression"
																			},
																			"property": {
																				"type": "Identifier",
																				"name": "type"
																			}
																		}
																	},
																	"right": {
																		"type": "Literal",
																		"value": " ",
																		"raw": "\" \""
																	}
																},
																"right": {
																	"type": "Identifier",
																	"name": "message"
																}
															}
														]
													}
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "_debug"
									},
									"computed": false,
									"value": {
										"type": "FunctionExpression",
										"id": null,
										"params": [
											{
												"type": "Identifier",
												"name": "message"
											}
										],
										"body": {
											"type": "BlockStatement",
											"body": [
												{
													"type": "IfStatement",
													"test": {
														"type": "MemberExpression",
														"computed": false,
														"object": {
															"type": "ThisExpression"
														},
														"property": {
															"type": "Identifier",
															"name": "DEBUG"
														}
													},
													"consequent": {
														"type": "BlockStatement",
														"body": [
															{
																"type": "ExpressionStatement",
																"expression": {
																	"type": "CallExpression",
																	"callee": {
																		"type": "MemberExpression",
																		"computed": false,
																		"object": {
																			"type": "Identifier",
																			"name": "ms"
																		},
																		"property": {
																			"type": "Identifier",
																			"name": "log"
																		}
																	},
																	"arguments": [
																		{
																			"type": "BinaryExpression",
																			"operator": "+",
																			"left": {
																				"type": "BinaryExpression",
																				"operator": "+",
																				"left": {
																					"type": "BinaryExpression",
																					"operator": "+",
																					"left": {
																						"type": "Literal",
																						"value": "*** DEBUG: ",
																						"raw": "\"*** DEBUG: \""
																					},
																					"right": {
																						"type": "MemberExpression",
																						"computed": false,
																						"object": {
																							"type": "ThisExpression"
																						},
																						"property": {
																							"type": "Identifier",
																							"name": "type"
																						}
																					}
																				},
																				"right": {
																					"type": "Literal",
																					"value": " ",
																					"raw": "\" \""
																				}
																			},
																			"right": {
																				"type": "Identifier",
																				"name": "message"
																			}
																		}
																	]
																}
															}
														]
													},
													"alternate": null
												}
											]
										},
										"generator": false,
										"expression": false,
										"async": false
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								},
								{
									"type": "Property",
									"key": {
										"type": "Identifier",
										"name": "type"
									},
									"computed": false,
									"value": {
										"type": "Literal",
										"value": "CA_Spectrum",
										"raw": "\"CA_Spectrum\""
									},
									"kind": "init",
									"method": false,
									"shorthand": false
								}
							]
						}
					]
				}
			}
		}
	],
	"sourceType": "script"
}&lt;/abstract_syntax_tree&gt;
        &lt;added_manually&gt;true&lt;/added_manually&gt;
        &lt;api_markdown&gt;## &amp;lt;a name="ca_spectrum"&amp;gt;&amp;lt;/a&amp;gt;CA_Spectrum
&amp;amp;nbsp;&amp;amp;nbsp;_Event Management Connector MID Server script_
 
### Type: `Javascript`
### Class: `CA_Spectrum`
##### Extends: _AProbe_
### Methods
#### `buildSpectrumAlarmBaseURL()`
_Builds the base url for accessing the alarms resource_
**Returns:** `string:`

---
#### `buildSpectrumGetAlarmsURL()`
_Builds a url for fetching CA Spectrum alarms_
**Returns:** `string:`

---
#### `buildSpectrumPollAlarmsURL()`
_Builds a url for fetching CA Spectrum alarms_
**Returns:** `string:`

---
#### `buildSpectrumSubscriptionBaseURL()`
_Builds the base url for accessing the alarms resource_
**Returns:** `string:`

---
#### `createClearEvent(alarmId)`
_Build a 'Clear' event_
**Parameters:**

- `alarm` object
- `alarmId` \*

**Returns:** `Event:`

---
#### `execute()`
_Attempt to poll our subscription  If we don't have one or if it has expired start a new subscription and fetch alarms directly_
**Returns:** `object:`

---
#### `filterEvent(event)`
**Parameters:**

- `event` Event

**Returns:** `Boolean:`

---
#### `getAlarmsDirectly()`
_Execute a pull of CA Spectrum alarms_
**Returns:** `object:`

---
#### `getMappedSeverity(spectrumSeverity)`
**Parameters:**

- `spectrumSeverity` string

**Returns:** `string:`

---
#### `getPriorDateInSeconds(daysAgo)`
**Parameters:**

- `daysAgo` integer

**Returns:** `integer:`

---
#### `makeGetCall(url)`
_Makes a GET REST api call to fetch CA Spectrum alarms Used after the initial POST call to fetch subsequent pages of alarms_
**Parameters:**

- `url` string

**Returns:** `HTTPResponse:`

---
#### `makePostCall(url, content)`
_Makes the initial POST REST api call to fetch CA SPectrum alarms_
**Parameters:**

- `url` string
- `content` string

**Returns:** `HTTPResponse:`

---
#### `makePutCall(url, alarmID, attributeValues)`
_Updates a alarm using a PUT REST call_
**Parameters:**

- `url` string
- `content` string
- `alarmID` \*
- `attributeValues` \*

**Returns:** `HTTPResponse:`

---
#### `makeSubscriptionGetCall(url)`
_Makes a GET REST api call to fetch CA Spectrum alarms Used after the initial POST call to fetch subsequent pages of alarms_
**Parameters:**

- `url` string

**Returns:** `HTTPResponse:`

---
#### `makeSubscriptionPostCall(url, content)`
_Makes the POST REST api call to register a subscription_
**Parameters:**

- `url` string
- `content` string

**Returns:** `HTTPResponse:`

---
#### `parseResponse(response)`
**Parameters:**

- `response` string

**Returns:** `object:`

---
#### `pollSubscription()`
_Poll an existing subscription If it's expired or we don't have one then start one_
**Returns:** `object:`

---
#### `processEvent(alarm)`
_Transform the alarm attributes into Event fields_
**Parameters:**

- `alarm` object

**Returns:** `Event:`

---
#### `startSubscription(sendPreExistingInstances)`
_Register a subscription_
**Parameters:**

- `sendPreExistingInstances` \*

**Returns:** `object:`

---
#### `testConnection()`
_Execute a test of the connection to CA Spectrum  Step 1 - register a subscription  Step 2 - go a GET on the subscription  If either step fails then test fails_
**Returns:** `object:`

---
#### `updateSource()`
_Handles the bi-directional update of alarms with relevant information from the instance Generally this is an incident number._
**Returns:** `object:`

---
#### `_buildContent(throttleSize, lastOccurenceDate)`
**Parameters:**

- `throttleSize` integer
- `lastOccurenceDate` integer

**Returns:** `:`

---
#### `_buildSubscriptionContent(maxNotifications, pullInterval, maxQueueSize, sendPreExistingInstances)`
**Parameters:**

- `maxNotifications` integer
- `pullInterval` integer
- `maxQueueSize` \*
- `sendPreExistingInstances` \*

**Returns:** `:`

---
#### `_debug(message)`
**Parameters:**

- `message` string

---
#### `_error(message)`
**Parameters:**

- `message` string

---
#### `_getInitialSyncValue()`
_Get the parameter that specifies how many days to look backwards for alarms_
**Returns:** `integer:`

---
#### `_getLastEventInfo()`
**Returns:** `integer:`

---
#### `_getLastRunDateTimeInSeconds(lastEvent)`
**Parameters:**

- `lastEvent` \*

**Returns:** `integer:`

---
#### `_getSubscriptionId(lastEvent)`
**Parameters:**

- `lastEvent` \*

**Returns:** `integer:`

---
#### `_handleAddedInstances(addedInstances, events)`
_Processes added instances in the CA Spectrum Subscription GET response_
**Parameters:**

- `addedInstances` array
- `events` array

**Returns:** `object:`

---
#### `_handleRemovedInstances(removedInstances, events)`
_Processes removed instances in the CA Spectrum Subscription GET response_
**Parameters:**

- `removedInstances` array
- `events` array

**Returns:** `object:`

---
#### `_info(message)`
**Parameters:**

- `message` string

---
#### `_sendEvents(events)`
_Sends an array of Event objects back to the instance_
**Parameters:**

- `events` array

**Returns:** `boolean:`

---
#### `_setReValErrorMessage()`
_Returns a string containing all generated error messages separated by a line feed._
**Returns:** `string:`

---
#### `_trackMostRecentEvent(event)`
_Checks an event to see if it's create or last occurrence date/time value is more recent that the current most recent value._
**Parameters:**

- `event` array

---
#### `_updateClearedEvents(events)`
_Looks for 'clear' events that have a corresponding new event and if found copies the host, type, text and resource values to the 'clear' event because we are missing that information on 'clear' events_
**Parameters:**

- `events` array

---
&lt;/api_markdown&gt;
        &lt;html&gt;&lt;![CDATA[&lt;link href="7d34f4344feb6700ecf18c318110c729.cssdbx" rel="stylesheet" type="text/css" /&gt;
&lt;div class="content"&gt;

&lt;/div&gt;]]&gt;&lt;/html&gt;
        &lt;markdown_document/&gt;
        &lt;markdown_link&gt;ca_spectrum&lt;/markdown_link&gt;
        &lt;order/&gt;
        &lt;project_code_document_version display_value="COD0001003"&gt;8ad67e0edbed7300d0cb5385ca961955&lt;/project_code_document_version&gt;
        &lt;remote&gt;false&lt;/remote&gt;
        &lt;remote_json/&gt;
        &lt;remote_source_id/&gt;
        &lt;show_html&gt;false&lt;/show_html&gt;
        &lt;show_markdown&gt;false&lt;/show_markdown&gt;
        &lt;source_description&gt;Event Management Connector MID Server script&lt;/source_description&gt;
        &lt;source_id/&gt;
        &lt;source_key/&gt;
        &lt;source_name&gt;CA_Spectrum&lt;/source_name&gt;
        &lt;source_script_field/&gt;
        &lt;source_table/&gt;
        &lt;source_text&gt;var CA_Spectrum = Class.create(); &amp;#13;
&amp;#13;
/** **/&amp;#13;
&amp;#13;
var SUCCESS = Packages.com.service_now.mid.probe.tpcon.OperationStatusType.SUCCESS;&amp;#13;
var FAILURE = Packages.com.service_now.mid.probe.tpcon.OperationStatusType.FAILURE;&amp;#13;
var Event = Packages.com.snc.commons.eventmgmt.Event;&amp;#13;
var SNEventSenderProvider = Packages.com.service_now.mid.probe.event.SNEventSenderProvider;&amp;#13;
var HTTPRequest = Packages.com.glide.communications.HTTPRequest;&amp;#13;
&amp;#13;
CA_Spectrum.prototype = Object.extendsObject(AProbe, {&amp;#13;
&amp;#13;
            CA_SPECTRUM : "CA Spectrum",&amp;#13;
&amp;#13;
            DEBUG : true,&amp;#13;
&amp;#13;
            MAX_EVENTS_TO_FETCH : 3000,&amp;#13;
            MAX_SUBSCRIPTION_LOOPS : 10,&amp;#13;
&amp;#13;
            // Packages&amp;#13;
            StringUtil : Packages.com.glide.util.StringUtil,&amp;#13;
            Properties : Packages.java.util.Properties,&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Complete list of CA Spectrum Alarm attributes codes and names&amp;#13;
             */&amp;#13;
            SPECTRUM_ALARM_ATTRIBUTES : {&amp;#13;
                "0x10000" : "modelTypeName",&amp;#13;
                "0x10001" : "modelTypeOfAlarmedModel",&amp;#13;
                "0x10009" : "securityString",&amp;#13;
                "0x1000a" : "condition",&amp;#13;
                "0x1006e" : "modelName",&amp;#13;
                "0x11ee8" : "modelClass",&amp;#13;
                "0x11f4d" : "acknowledged",&amp;#13;
                "0x11f4e" : "creationDate",&amp;#13;
                "0x11f4f" : "alarmStatus",&amp;#13;
                "0x11f50" : "causeCode",&amp;#13;
                "0x11f52" : "eventIdList",&amp;#13;
                "0x11f53" : "modelHandleOfAlarmedModel",&amp;#13;
                "0x11f54" : "primaryAlarm",&amp;#13;
                "0x11f56" : "severity",&amp;#13;
                "0x11f57" : "troubleshooter",&amp;#13;
                "0x11f9b" : "userClearable",&amp;#13;
                "0x11f9c" : "alarmId",&amp;#13;
                "0x11fc4" : "alarmSource",&amp;#13;
                "0x11fc5" : "occurrences",&amp;#13;
                "0x11fc6" : "troubleshooterModelHandle",&amp;#13;
                "0x12022" : "troubleTicketId",&amp;#13;
                "0x1296e" : "originatingEvent",&amp;#13;
                "0x12a04" : "symptomList",&amp;#13;
                "0x12a05" : "causeList",&amp;#13;
                "0x12a06" : "symptomCount",&amp;#13;
                "0x12a07" : "causeCount",&amp;#13;
                "0x12a56" : "significantModelId",&amp;#13;
                "0x12a63" : "webContextURL",&amp;#13;
                "0x12a6f" : "eventSymptomList",&amp;#13;
                "0x12a70" : "eventSymptomCount",&amp;#13;
                "0x12a82" : "IPtoDomainMap",&amp;#13;
                "0x12b4c" : "alarmTitle",&amp;#13;
                "0x12c05" : "secureDomainDisplay",&amp;#13;
                "0x12d7f" : "networkAddress",&amp;#13;
                "0x12d83" : "secureDomainAddress",&amp;#13;
                "0x1321a" : "lastOccurrenceDate",&amp;#13;
                "0x129aa" : "modelId",&amp;#13;
                "0x129ab" : "modelTypeId",&amp;#13;
                "0x11b47" : "createDate", // *** Custom field&amp;#13;
                "0x11b41" : "createTime",&amp;#13;
                "0x129e7" : "topologyModelName",&amp;#13;
                "0x129fa" : "modelHandle",&amp;#13;
                "0x110df" : "macAddress"&amp;#13;
            },&amp;#13;
&amp;#13;
            /*&amp;#13;
             * Used to add readable date/time values to&amp;#13;
             * the additional info field&amp;#13;
             */&amp;#13;
            SPECTRUM_DATE_TIME_ATTRIBUTES : {&amp;#13;
                "0x11f4e" : true, // creationDate&amp;#13;
                "0x1321a" : true, // lastOccurrenceDate&amp;#13;
                "0x11b47" : true, // Create Date&amp;#13;
                "0x11b41" : true&amp;#13;
                // Create Time&amp;#13;
            },&amp;#13;
&amp;#13;
            // CA Spectrum attributes to request&amp;#13;
            SPECTRUM_EVENT_MAPPING : {&amp;#13;
                "0x12022" : "",&amp;#13;
                "0x11f9c" : "message_key",&amp;#13;
                "0x11f56" : "severity",&amp;#13;
                "0x129e7" : "",&amp;#13;
                "0x11ee8" : "",&amp;#13;
                "0x1000a" : "",&amp;#13;
                "0x11f4f" : "resolution_state",&amp;#13;
                "0x11f4d" : "",&amp;#13;
                "0x12b4c" : "type",&amp;#13;
                "0x1006e" : "node",&amp;#13;
                "0x11f4e" : "",&amp;#13;
                "0x1296e" : "description",&amp;#13;
                "0x11f50" : "",&amp;#13;
                "0x1321a" : "",&amp;#13;
                "0x129fa" : "",&amp;#13;
                "0x12d7f" : "resource_1",&amp;#13;
                "0x11fc5" : "",&amp;#13;
                "0x110df" : "resource_2",&amp;#13;
                "0x11b47" : "",&amp;#13;
                "0x11b41" : ""&amp;#13;
            },&amp;#13;
&amp;#13;
            // ServiceNow alert field to CA Spectrum attribute&amp;#13;
            ALERT_UPDATE_MAPPING : {&amp;#13;
                "incident" : "0x12022" // Trouble Ticket ID&amp;#13;
            },&amp;#13;
&amp;#13;
            // CA Spectrum Constants&amp;#13;
            CA_SPECTRUM_ALARM_RESPONSE_LIST : "ns1.alarm-response-list",&amp;#13;
            CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST : "ns1.alarm-update-response-list",&amp;#13;
            CA_SPECTRUM_ALARM_RESPONSES : "ns1.alarm-responses",&amp;#13;
            CA_SPECTRUM_ALARM : "ns1.alarm",&amp;#13;
            CA_SPECTRUM_LINK : "ns1.link",&amp;#13;
            CA_SPECTRUM_ATTRIBUTES : "ns1.attribute",&amp;#13;
            CA_SPECTRUM_SUBSCRIPTION_RESPONSE : "ns1.subscription-response",&amp;#13;
            CA_SPECTRUM_SUBSCRIPTION_ID : "ns1.subscription-id",&amp;#13;
            CA_SPECTRUM_HREF : "@href",&amp;#13;
            CA_SPECTRUM_THROTTLE : "@throttle",&amp;#13;
            CA_SPECTRUM_TOTAL_ALARMS : "@total-alarms",&amp;#13;
            CA_SPECTRUM_ID : "@id",&amp;#13;
            CA_SPECTRUM_VALUE : "$",&amp;#13;
            CA_SPECTRUM_ERROR : "@error",&amp;#13;
            CA_SPECTRUM_ERROR_MESSAGE : "@error-message",&amp;#13;
            CA_SPECTRUM_END_OF_RESULTS : "EndOfResults",&amp;#13;
            CA_SPECTRUM_SUCCESS : "Success",&amp;#13;
            CA_SPECTRUM_CREATION_DATE : "0x11f4e",&amp;#13;
            CA_SPECTRUM_LAST_OCCURRENCE : "0x1321a",&amp;#13;
&amp;#13;
            CA_SPECTRUM_INVALID_SUBSCRIPTION_ID : "Invalid subscription ID.",&amp;#13;
            CA_SPECTRUM_NOTIFICATION_LIST : "ns1.notification-list",&amp;#13;
            CA_SPECTRUM_ADDED_INSTANCE : "ns1.added-instance",&amp;#13;
            CA_SPECTRUM_REMOVED_INSTANCE : "ns1.removed-instance",&amp;#13;
            CA_SPECTRUM_PRE_EXISTING : "@preexisting",&amp;#13;
            CA_SPECTRUM_DELETED : "@deleted",&amp;#13;
&amp;#13;
            // Defaults&amp;#13;
            ALARM_CONTENT_FILTER_DEFAULT : "0x11f4e", // creationDate&amp;#13;
            MAX_NOTIFICATIONS_DEFAULT : 3000,&amp;#13;
            PULL_INTERVAL_DEFAULT : 240000,&amp;#13;
            MAX_QUEUE_SIZE_DEFAULT : 15000,&amp;#13;
&amp;#13;
            // Possible attributes for filtering alarms&amp;#13;
            // Property name is used in Connector Instance Values 'content_filter_attribute' parameter&amp;#13;
            ALARM_CONTENT_FILTERS : {&amp;#13;
                "lastOccurrenceDate" : "0x1321a",&amp;#13;
                "creationDate" : "0x11f4e"&amp;#13;
            },&amp;#13;
&amp;#13;
            contentFilterAttribute : "",&amp;#13;
            timeOfEventAttribute : "",&amp;#13;
&amp;#13;
            // ServiceNow Connector parameters&amp;#13;
            SN_THROTTLE : "throttle",&amp;#13;
            MAX_NOTIFICATIONS : "maxNotifications",&amp;#13;
            PULL_INTERVAL : "pullInterval",&amp;#13;
            MAX_QUEUE_SIZE : "maxQueueSize",&amp;#13;
            LAST_EVENT_SUBSCRIPTION_ID : "subscription_id",&amp;#13;
            LAST_EVENT_LAST_OCCURRENCE_SECONDS : "last_occurrence",&amp;#13;
&amp;#13;
            /* &amp;#13;
             * CA Spectrum Severity Codes&amp;#13;
             * &amp;#13;
             * "0" : "Normal"&amp;#13;
             * &amp;#13;
             * "1" : "Minor"&amp;#13;
             * &amp;#13;
             * "2" : "Major"&amp;#13;
             * &amp;#13;
             * "3" : "Critical"&amp;#13;
             * &amp;#13;
             * "4" : "Maintenance"&amp;#13;
             * &amp;#13;
             * "5" : "Suppressed"&amp;#13;
             * &amp;#13;
             * "6" : "Initial"&amp;#13;
             */&amp;#13;
            SPECTRUM_SEVERITY_MAP : {&amp;#13;
                "0" : "5",&amp;#13;
                "1" : "3",&amp;#13;
                "2" : "2",&amp;#13;
                "3" : "1",&amp;#13;
                "4" : "5",&amp;#13;
                "5" : "5",&amp;#13;
                "6" : "5"&amp;#13;
            },&amp;#13;
&amp;#13;
            /*&amp;#13;
             * Example CA Spectrum payload&amp;#13;
             * &amp;#13;
              	&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&amp;#13;
            	&amp;lt;rs:alarm-request throttlesize="${throttle}" &amp;#13;
            	  xmlns:rs="http://www.ca.com/spectrum/restful/schema/request" &amp;#13;
            	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" &amp;#13;
            	  xsi:schemaLocation="http://www.ca.com/spectrum/restful/schema/request ../../../xsd/Request.xsd " &amp;gt;&amp;#13;
            		&amp;lt;!-- Attributes of Interest --&amp;gt;&amp;#13;
                	&amp;lt;rs:attribute-filter&amp;gt;&amp;#13;
                		&amp;lt;search-criteria xmlns="http://www.ca.com/spectrum/restful/schema/filter"&amp;gt;&amp;#13;
                			&amp;lt;filtered-models&amp;gt;&amp;#13;
            					&amp;lt;greater-than&amp;gt;&amp;#13;
            						&amp;lt;attribute id="${search_filter_attribute}"&amp;gt;&amp;#13;
            							&amp;lt;value&amp;gt;${date_seconds}&amp;lt;/value&amp;gt;&amp;#13;
                					&amp;lt;/attribute&amp;gt;&amp;#13;
                				&amp;lt;/greater-than&amp;gt;&amp;#13;
                    		&amp;lt;/filtered-models&amp;gt;&amp;#13;
                		&amp;lt;/search-criteria&amp;gt;&amp;#13;
                	&amp;lt;/rs:attribute-filter&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x12022" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x11f9c" /&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x11f56" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x129e7" /&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x11ee8" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x1000a" /&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x11f4f" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x11f4d" /&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x12b4c" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x1006e" /&amp;gt;&amp;#13;
            		&amp;lt;rs:requested-attribute id="0x11f4e" /&amp;gt;&amp;#13;
                	&amp;lt;rs:requested-attribute id="0x1296e" /&amp;gt;&amp;#13;
            	    &amp;lt;rs:requested-attribute id="0x11f50" /&amp;gt;&amp;#13;
                    &amp;lt;rs:requested-attribute id="0x1321a" /&amp;gt;&amp;#13;
            	    &amp;lt;rs:requested-attribute id="0x129fa" /&amp;gt;&amp;#13;
                    &amp;lt;rs:requested-attribute id="0x12d7f" /&amp;gt;&amp;#13;
            	    &amp;lt;rs:requested-attribute id="0x11fc5" /&amp;gt;&amp;#13;
                    &amp;lt;rs:requested-attribute id="0x110df" /&amp;gt; &amp;#13;
                    &amp;lt;rs:requested-attribute id="0x11b47" /&amp;gt; &amp;#13;
                    &amp;lt;rs:requested-attribute id="0x11b41" /&amp;gt; &amp;#13;
                &amp;lt;/rs:alarm-request&amp;gt;&amp;#13;
             *&amp;#13;
             */&amp;#13;
            ALARM_CONTENT_XML : '&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&amp;lt;rs:alarm-request throttlesize="${throttle}"'&amp;#13;
                    + ' xmlns:rs="http://www.ca.com/spectrum/restful/schema/request" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'&amp;#13;
                    + ' xsi:schemaLocation="http://www.ca.com/spectrum/restful/schema/request ../../../xsd/Request.xsd "&amp;gt;&amp;lt;!-- Attributes of Interest --&amp;gt;'&amp;#13;
                    + '&amp;lt;rs:attribute-filter&amp;gt;&amp;lt;search-criteria xmlns="http://www.ca.com/spectrum/restful/schema/filter"&amp;gt;&amp;lt;filtered-models&amp;gt;&amp;lt;greater-than&amp;gt;'&amp;#13;
                    + '&amp;lt;attribute id="${search_filter_attribute}"&amp;gt;&amp;lt;value&amp;gt;${date_seconds}&amp;lt;/value&amp;gt;&amp;lt;/attribute&amp;gt;&amp;lt;/greater-than&amp;gt;&amp;lt;/filtered-models&amp;gt;&amp;lt;/search-criteria&amp;gt;'&amp;#13;
                    + '&amp;lt;/rs:attribute-filter&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;',&amp;#13;
&amp;#13;
            /*&amp;#13;
             * Example CA Spectrum Subscription payload&amp;#13;
             * &amp;#13;
                &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&amp;#13;
                &amp;lt;rs:subscription-request send-preexisting-instances="true"&amp;#13;
                   xmlns:rs="http://www.ca.com/spectrum/restful/schema/request" &amp;#13;
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" &amp;#13;
                   xsi:schemaLocation="http://www.ca.com/spectrum/restful/schema/request ../../../Rest.a/src/xsd/Request.xsd "&amp;gt;&amp;#13;
                    &amp;lt;rs:pull-delivery-mode&amp;gt;  &amp;#13;
            	      &amp;lt;rs:max-notifications&amp;gt;200&amp;lt;/rs:max-notifications&amp;gt; &amp;#13;
            	      &amp;lt;rs:max-queue-size&amp;gt;10000&amp;lt;/rs:max-queue-size&amp;gt; &amp;#13;
            	      &amp;lt;rs:pull-interval&amp;gt;30000&amp;lt;/rs:pull-interval&amp;gt;  &amp;#13;
                    &amp;lt;/rs:pull-delivery-mode&amp;gt;  	&amp;#13;
                    &amp;lt;rs:alarm-request&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x12022" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x129e7" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x11ee8" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x1000a" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x11f4d" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x12b4c" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x1006e" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x11f4e" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x1296e" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x11f50" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x1321a" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x129fa" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x12d7f" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0xffff0003" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x11fc5" /&amp;gt;&amp;#13;
            	      &amp;lt;rs:requested-attribute id="0x110df" /&amp;gt;&amp;#13;
                    &amp;lt;/rs:alarm-request&amp;gt;&amp;#13;
                &amp;lt;/rs:subscription-request&amp;gt;&amp;#13;
             *&amp;#13;
             */&amp;#13;
            SUBSCRIPTION_CONTENT_XML : '&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&amp;lt;rs:subscription-request ' + ' send-preexisting-instances="${send_preexisting_instances}"'&amp;#13;
                    + ' xmlns:rs="http://www.ca.com/spectrum/restful/schema/request" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'&amp;#13;
                    + ' xsi:schemaLocation="http://www.ca.com/spectrum/restful/schema/request ../../../Rest.a/src/xsd/Request.xsd "&amp;gt;'&amp;#13;
                    + '	&amp;lt;rs:pull-delivery-mode&amp;gt;&amp;lt;rs:max-notifications&amp;gt;${max_notifications}&amp;lt;/rs:max-notifications&amp;gt;' + ' &amp;lt;rs:max-queue-size&amp;gt;${max_queue_size}&amp;lt;/rs:max-queue-size&amp;gt;'&amp;#13;
                    + ' &amp;lt;rs:pull-interval&amp;gt;${pull_interval}&amp;lt;/rs:pull-interval&amp;gt;' + ' &amp;lt;/rs:pull-delivery-mode&amp;gt;'&amp;#13;
                    + ' &amp;lt;rs:alarm-request&amp;gt;${requested_attributes}&amp;lt;/rs:alarm-request&amp;gt;&amp;lt;/rs:subscription-request&amp;gt;',&amp;#13;
&amp;#13;
            errorMessages : [],&amp;#13;
            firstRun : false,&amp;#13;
            subscriptionId : "",&amp;#13;
            lastOccurrenceSecs : "",&amp;#13;
            clearedEvents : [],&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Execute a test of the connection to CA Spectrum&amp;#13;
             * &amp;#13;
             * Step 1 - register a subscription&amp;#13;
             * &amp;#13;
             * Step 2 - go a GET on the subscription&amp;#13;
             * &amp;#13;
             * If either step fails then test fails&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            testConnection : function() {&amp;#13;
&amp;#13;
                this._info("Testing connection");&amp;#13;
&amp;#13;
                this.DEBUG = this.probe.getAdditionalParameter("debug");&amp;#13;
                this.DEBUG = (this.DEBUG == "true" || DEBUG == "1");&amp;#13;
&amp;#13;
                this._info("Debug: " + this.DEBUG);&amp;#13;
&amp;#13;
                var retVal = {&amp;#13;
                    "status" : "",&amp;#13;
                    "error_message" : ""&amp;#13;
                };&amp;#13;
&amp;#13;
                try {&amp;#13;
                    this.subscriptionId = this.startSubscription(false);&amp;#13;
                    if (!this.subscriptionId) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Subscription registration on testConnection failed.");&amp;#13;
                        retVal.error_message = this._setReValErrorMessage();&amp;#13;
                    } else {&amp;#13;
                        var url = this.buildSpectrumPollAlarmsURL();&amp;#13;
                        this._info("Test Connection URL " + url);&amp;#13;
&amp;#13;
                        var response = this.makeSubscriptionGetCall(url);&amp;#13;
                        if (response == null) {&amp;#13;
                            retVal.status = FAILURE.toString();&amp;#13;
                            this._error("Failed to connect to CA Spectrum on testConnection call. Response is null.");&amp;#13;
                        } else if (response == this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID) {&amp;#13;
                            retVal.status = FAILURE.toString();&amp;#13;
                            this._error(this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID);&amp;#13;
                        } else {&amp;#13;
                            var responseObj = this.parseResponse(response);&amp;#13;
                            // If response is not in expected format or if it contained an error then report the&amp;#13;
                            // error and leave&amp;#13;
                            if (responseObj == null) {&amp;#13;
                                retVal.status = FAILURE.toString();&amp;#13;
                                this._error("Response from CA Spectrum is not in expected format: " + response + ".");&amp;#13;
                            } else {&amp;#13;
                                // All good&amp;#13;
                                retVal.status = SUCCESS.toString();&amp;#13;
                            }&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    retVal.status = FAILURE.toString();&amp;#13;
                }&amp;#13;
&amp;#13;
                this._info("TestConnection " + retVal.status);&amp;#13;
                retVal.error_message = this._setReValErrorMessage();&amp;#13;
                return retVal;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Attempt to poll our subscription&amp;#13;
             * &amp;#13;
             * If we don't have one or if it has expired start a new subscription and fetch alarms directly&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            execute : function() {&amp;#13;
&amp;#13;
                var retVal = {&amp;#13;
                    "status" : "",&amp;#13;
                    "error_message" : ""&amp;#13;
                };&amp;#13;
&amp;#13;
                this._info("Execute connection ...");&amp;#13;
&amp;#13;
                this.DEBUG = this.probe.getAdditionalParameter("debug");&amp;#13;
                this.DEBUG = (this.DEBUG == "true" || DEBUG == "1");&amp;#13;
&amp;#13;
                this._info("Debug: " + this.DEBUG);&amp;#13;
&amp;#13;
                // Parse out last event data&amp;#13;
                this._getLastEventInfo();&amp;#13;
&amp;#13;
                // Since we use a subscription to get alarms generally this filter will only&amp;#13;
                // be used to catch up if a subscription expired so it only makes sense&amp;#13;
                // to get alarms who have been created since the last collector run&amp;#13;
                this.contentFilterAttribute = this.ALARM_CONTENT_FILTER_DEFAULT;&amp;#13;
                // var contentFilter = this.probe.getAdditionalParameter("content_filter_attribute");&amp;#13;
                // if (contentFilter &amp;amp;&amp;amp; contentFilter != '' &amp;amp;&amp;amp; contentFilter in this.ALARM_CONTENT_FILTERS) {&amp;#13;
                // this.contentFilterAttribute = this.ALARM_CONTENT_FILTERS[contentFilter];&amp;#13;
                // this._debug("Setting content filter based on " + contentFilter);&amp;#13;
                // } else {&amp;#13;
                // this._debug("Setting content filter based on DEFAULT.");&amp;#13;
                // }&amp;#13;
&amp;#13;
                // Use the filtering date attribute as the time of event value&amp;#13;
                this.timeOfEventAttribute = this.contentFilterAttribute;&amp;#13;
&amp;#13;
                /*&amp;#13;
                 * Poll the subscription for new and removed alarms&amp;#13;
                 * If the poll fails (due to expired&amp;#13;
                 */&amp;#13;
                var pollRetVal = this.pollSubscription();&amp;#13;
                // If the subscription has expired we want to get the alarms directly in order to catch up what might&amp;#13;
                // have been missed&amp;#13;
                if (pollRetVal.doDirectPull) {&amp;#13;
                    retVal = this.getAlarmsDirectly();&amp;#13;
                    this._error("Subscription Poll unsucccessful. Alarms fetched directly.");&amp;#13;
                } else {&amp;#13;
                    retVal.status = pollRetVal.status;&amp;#13;
                    if (retVal.status == SUCCESS.toString()) {&amp;#13;
                        this._debug("Subscription Poll succcessful.");&amp;#13;
                        this.errorMessages.push("Subscription Poll succcessful.");&amp;#13;
                    } else {&amp;#13;
                        this._error("Subscription Poll unsucccessful.");&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                // *************** Set last event in retval&amp;#13;
                var lastEvent = {};&amp;#13;
                lastEvent[this.LAST_EVENT_LAST_OCCURRENCE_SECONDS] = "0";&amp;#13;
                lastEvent[this.LAST_EVENT_SUBSCRIPTION_ID] = "";&amp;#13;
                if (this.lastOccurrenceSecs &amp;gt; 0) {&amp;#13;
                    lastEvent[this.LAST_EVENT_LAST_OCCURRENCE_SECONDS] = this.lastOccurrenceSecs;&amp;#13;
                }&amp;#13;
                if (this.subscriptionId &amp;amp;&amp;amp; this.subscriptionId != "") {&amp;#13;
                    lastEvent[this.LAST_EVENT_SUBSCRIPTION_ID] = this.subscriptionId;&amp;#13;
                }&amp;#13;
                retVal.last_event = JSON.stringify(lastEvent);&amp;#13;
&amp;#13;
                // Send back any messages&amp;#13;
                if (this.errorMessages.length &amp;gt; 0) {&amp;#13;
                    retVal.error_message = this._setReValErrorMessage();&amp;#13;
                }&amp;#13;
&amp;#13;
                return retVal;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Poll an existing subscription If it's expired or we don't have one then start one&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            pollSubscription : function() {&amp;#13;
                var events = [];&amp;#13;
                var errorsFound = false;&amp;#13;
                var alarm;&amp;#13;
                var event;&amp;#13;
&amp;#13;
                // Using false for now - may need to also make a subscription with true&amp;#13;
                // var sendPreExistingInstances = "false";&amp;#13;
                var sendPreExistingInstances = "true";&amp;#13;
&amp;#13;
                var retVal = {&amp;#13;
                    "status" : "",&amp;#13;
                    "error_message" : "",&amp;#13;
                    "doDirectPull" : false&amp;#13;
                };&amp;#13;
&amp;#13;
                if (this.firstRun || !this.subscriptionId || this.subscriptionId == "") {&amp;#13;
                    this.subscriptionId = this.startSubscription(sendPreExistingInstances);&amp;#13;
                    retVal.status = FAILURE.toString();&amp;#13;
                    if (!this.firstRun) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Subscription Id missing. New subscription started.");&amp;#13;
                        return retVal;&amp;#13;
                    } else {&amp;#13;
                        this._info("First run for collector. New subscription started.");&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                var url = this.buildSpectrumPollAlarmsURL();&amp;#13;
                this._info("POLL URL " + url);&amp;#13;
&amp;#13;
                var newAlarmsAdded = 0;&amp;#13;
                var oldAlarmsAdded = 0;&amp;#13;
                var alarmsRemoved = 0;&amp;#13;
                var done = false;&amp;#13;
                var ctr = 0;&amp;#13;
                while (!done) {&amp;#13;
                    // On subsequent calls we make a GET call using the URL returned&amp;#13;
                    var response = this.makeSubscriptionGetCall(url);&amp;#13;
                    if (response == null) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Failed to connect to CA Spectrum on Subscription Get call. Response is null.");&amp;#13;
                        done = true;&amp;#13;
                        return retVal;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    if (response == this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID) {&amp;#13;
                        this.subscriptionId = this.startSubscription(sendPreExistingInstances);&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        // In this situation we want to pull in the new alarms created since the&amp;#13;
                        // last run via a direct fetch of alarms. This is to catch up any missed&amp;#13;
                        // since the subscription expired.&amp;#13;
                        retVal.doDirectPull = true;&amp;#13;
                        this._error(this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID);&amp;#13;
                        done = true;&amp;#13;
                        return retVal;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var responseObj = this.parseResponse(response);&amp;#13;
&amp;#13;
                    // If response is not in expected format or if it contained an error then report the error and leave&amp;#13;
                    if (responseObj == null) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Response from CA Spectrum is not in expected format: " + response + ".");&amp;#13;
                        done = true;&amp;#13;
                        return retVal;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var notificationList = responseObj[this.CA_SPECTRUM_NOTIFICATION_LIST];&amp;#13;
&amp;#13;
                    var addedInstances = [];&amp;#13;
                    var removedInstances = [];&amp;#13;
                    if (notificationList !== null &amp;amp;&amp;amp; typeof notificationList === 'object') {&amp;#13;
                        if (this.CA_SPECTRUM_ADDED_INSTANCE in notificationList) {&amp;#13;
                            addedInstances = notificationList[this.CA_SPECTRUM_ADDED_INSTANCE];&amp;#13;
                        }&amp;#13;
                        if (this.CA_SPECTRUM_REMOVED_INSTANCE in notificationList) {&amp;#13;
                            removedInstances = notificationList[this.CA_SPECTRUM_REMOVED_INSTANCE];&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Force into an array&amp;#13;
                    if (!Array.isArray(addedInstances)) {&amp;#13;
                        var newAddedArray = [];&amp;#13;
                        newAddedArray.push(addedInstances);&amp;#13;
                        addedInstances = newAddedArray;&amp;#13;
                    }&amp;#13;
                    if (!Array.isArray(removedInstances)) {&amp;#13;
                        var newRemovedArray = [];&amp;#13;
                        newRemovedArray.push(removedInstances);&amp;#13;
                        removedInstances = newRemovedArray;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Handle added alarms&amp;#13;
                    var result = this._handleAddedInstances(addedInstances, events);&amp;#13;
                    if (result.status == "error") {&amp;#13;
                        errorsFound = true;&amp;#13;
                    }&amp;#13;
                    newAlarmsAdded += result.total_new;&amp;#13;
                    oldAlarmsAdded += result.total_preexisting;&amp;#13;
&amp;#13;
                    // If this is not the first run then we only make 1 call&amp;#13;
                    // If this is the first run we repeat the call until all pre-existing&amp;#13;
                    // alarms have been fetched&amp;#13;
                    // for a max of 10 calls&amp;#13;
                    ctr++;&amp;#13;
                    if (!this.firstRun || result.total_preexisting == 0 || ctr &amp;gt;= this.MAX_SUBSCRIPTION_LOOPS) {&amp;#13;
                        done = true;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Handle cleared alarms&amp;#13;
                    var result = this._handleRemovedInstances(removedInstances, events);&amp;#13;
                    if (result.status == "error") {&amp;#13;
                        errorsFound = true;&amp;#13;
                    }&amp;#13;
                    alarmsRemoved += result.total_alarms;&amp;#13;
&amp;#13;
                    if (errorsFound) {&amp;#13;
                        done = true;&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                this._debug("New alarms added: " + newAlarmsAdded + ". Pre-existing alarms added: " + oldAlarmsAdded + " Added instances from response: " + addedInstances.length);&amp;#13;
                this._debug("Alarms cleared: " + alarmsRemoved + ". Removed instances from response: " + removedInstances.length);&amp;#13;
&amp;#13;
                // Update any cleared events if they have a related non-cleared event&amp;#13;
                this._updateClearedEvents(events);&amp;#13;
&amp;#13;
                if (events.length == 0) {&amp;#13;
                    this._info("No events returned.");&amp;#13;
                } else {&amp;#13;
                    this._info("Events returned: " + events.length);&amp;#13;
&amp;#13;
                    // Send back the events&amp;#13;
                    if (!this._sendEvents(events)) {&amp;#13;
                        errorsFound = true;&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                // Set final return values&amp;#13;
                retVal.status = errorsFound ? FAILURE.toString() : SUCCESS.toString();&amp;#13;
&amp;#13;
                if (errorsFound) {&amp;#13;
                    this._info("Subscription poll failed.");&amp;#13;
                } else {&amp;#13;
                    this._info("Subscription poll was successful.");&amp;#13;
                }&amp;#13;
                return retVal;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Looks for 'clear' events that have a corresponding new event and if found copies the host, type, text and&amp;#13;
             * resource values to the 'clear' event because we are missing that information on 'clear' events&amp;#13;
             * &amp;#13;
             * @param {array} events&amp;#13;
             */&amp;#13;
            _updateClearedEvents : function(events) {&amp;#13;
                for (var i = 0; i &amp;lt; this.clearedEvents.length; i++) {&amp;#13;
                    clearedEventProps = this.clearedEvents[i];&amp;#13;
                    var alarmId = clearedEventProps.alarmId;&amp;#13;
                    var clearedEvent = clearedEventProps.event;&amp;#13;
                    // Look for a related event that we can copy from&amp;#13;
                    for (var j = 0; j &amp;lt; events.length; j++) {&amp;#13;
                        var event = events[j];&amp;#13;
                        if (event.getMessageKey() == alarmId &amp;amp;&amp;amp; event !== clearedEvent) {&amp;#13;
                            // Found a match&amp;#13;
                            clearedEvent.setHostAddress(event.getHostAddress());&amp;#13;
                            clearedEvent.setType(event.getType());&amp;#13;
                            clearedEvent.setText(event.getText());&amp;#13;
                            clearedEvent.setResource(event.getResource());&amp;#13;
                            this._debug("Updating removed alarm with alarm id: " + clearedEvent.getMessageKey());&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                }&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Processes added instances in the CA Spectrum Subscription GET response&amp;#13;
             * &amp;#13;
             * @param {array} addedInstances&amp;#13;
             * @param {array} events&amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            _handleAddedInstances : function(addedInstances, events) {&amp;#13;
                var result = {&amp;#13;
                    "status" : "success",&amp;#13;
                    "msg" : "",&amp;#13;
                    "total_alarms" : 0,&amp;#13;
                    "total_preexisting" : 0,&amp;#13;
                    "total_new" : 0&amp;#13;
                };&amp;#13;
&amp;#13;
                for (var i = 0; i &amp;lt; addedInstances.length; i++) {&amp;#13;
                    var addedInstance = addedInstances[i];&amp;#13;
                    var preExisting = false;&amp;#13;
                    if (this.CA_SPECTRUM_PRE_EXISTING in addedInstance) {&amp;#13;
                        preExisting = addedInstance[this.CA_SPECTRUM_PRE_EXISTING] == "true";&amp;#13;
                    }&amp;#13;
                    // We only want to add in pre-existing alarms if this is the first run&amp;#13;
                    // If this is not the first run then we've been collecting alarms previously&amp;#13;
                    // and don't want to bring in duplicates&amp;#13;
                    if (!this.firstRun &amp;amp;&amp;amp; preExisting) {&amp;#13;
                        continue;&amp;#13;
                    }&amp;#13;
                    if (this.CA_SPECTRUM_ALARM in addedInstance) {&amp;#13;
                        alarm = addedInstance[this.CA_SPECTRUM_ALARM];&amp;#13;
                        event = this.processEvent(alarm);&amp;#13;
                        events.push(event);&amp;#13;
&amp;#13;
                        result.total_alarms++;&amp;#13;
                        // Track how many pre-existing alarms returned. This is used to&amp;#13;
                        // determine when the first run GET calls should end&amp;#13;
                        if (preExisting) {&amp;#13;
                            result.total_preexisting++;&amp;#13;
                        } else {&amp;#13;
                            result.total_new++;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        this._trackMostRecentEvent(event);&amp;#13;
                    } else {&amp;#13;
                        this._error("WARNING Alarm element not found in added instance entry. Added instance: " + JSON.stringify(addedInstance));&amp;#13;
                        result.status = "error";&amp;#13;
                        result.msg = "At least one added instance was missing alarm element.";&amp;#13;
                    }&amp;#13;
                }&amp;#13;
                return result;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Processes removed instances in the CA Spectrum Subscription GET response&amp;#13;
             * &amp;#13;
             * @param {array} removedInstances&amp;#13;
             * @param {array} events&amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            _handleRemovedInstances : function(removedInstances, events) {&amp;#13;
                var result = {&amp;#13;
                    "status" : "success",&amp;#13;
                    "msg" : "",&amp;#13;
                    "total_alarms" : 0&amp;#13;
                };&amp;#13;
&amp;#13;
                for (var i = 0; i &amp;lt; removedInstances.length; i++) {&amp;#13;
                    var removedInstance = removedInstances[i];&amp;#13;
                    var deleted = false;&amp;#13;
                    if (this.CA_SPECTRUM_DELETED in removedInstance) {&amp;#13;
                        deleted = !(removedInstance[this.CA_SPECTRUM_DELETED] == "false");&amp;#13;
                    }&amp;#13;
                    if (this.CA_SPECTRUM_ALARM in removedInstance) {&amp;#13;
                        alarm = removedInstance[this.CA_SPECTRUM_ALARM];&amp;#13;
                        var alarmId = alarm[this.CA_SPECTRUM_ID];&amp;#13;
                        result.total_alarms++;&amp;#13;
                        event = this.createClearEvent(alarmId);&amp;#13;
                        events.push(event);&amp;#13;
                        this.clearedEvents.push({&amp;#13;
                                    "alarmId" : alarmId,&amp;#13;
                                    "event" : event&amp;#13;
                                });&amp;#13;
                    } else {&amp;#13;
                        this._error("WARNING Alarm element not found in removed instance entry. Removed instance: " + JSON.stringify(removedInstance));&amp;#13;
                        result.status = "error";&amp;#13;
                        result.msg = "At least one removed instance was missing alarm element.";&amp;#13;
                    }&amp;#13;
                }&amp;#13;
                return result;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Checks an event to see if it's create or last occurrence date/time value is more recent that the current&amp;#13;
             * most recent value.&amp;#13;
             * &amp;#13;
             * @param {array} event&amp;#13;
             */&amp;#13;
            _trackMostRecentEvent : function(event) {&amp;#13;
                // Get the appropriate date/time value and check if it's the most recent value&amp;#13;
                // If it is then save it so we can update the last_event property when we're done&amp;#13;
                var lastRunAttr = this.ALARM_CONTENT_FILTER_DEFAULT;&amp;#13;
                if (this.contentFilterAttribute != '') {&amp;#13;
                    lastRunAttr = this.contentFilterAttribute;&amp;#13;
                }&amp;#13;
&amp;#13;
                var lastRunAttrValue = event.getField(lastRunAttr);&amp;#13;
                if (lastRunAttrValue) {&amp;#13;
                    var alarmLastRun = parseInt(lastRunAttrValue);&amp;#13;
                    this._debug("Alarm last occur: " + alarmLastRun + " overall last occur: " + this.lastOccurrenceSecs);&amp;#13;
                    if (alarmLastRun &amp;gt; this.lastOccurrenceSecs) {&amp;#13;
                        this.lastOccurrenceSecs = alarmLastRun;&amp;#13;
                    }&amp;#13;
                }&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Execute a pull of CA Spectrum alarms&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            getAlarmsDirectly : function() {&amp;#13;
&amp;#13;
                var retVal = {&amp;#13;
                    "status" : "",&amp;#13;
                    "error_message" : ""&amp;#13;
                };&amp;#13;
&amp;#13;
                var url = this.buildSpectrumGetAlarmsURL();&amp;#13;
                this._info("POST URL " + url);&amp;#13;
&amp;#13;
                var throttleSize = this.probe.getAdditionalParameter(this.SN_THROTTLE);&amp;#13;
&amp;#13;
                var content = this._buildContent(throttleSize, this.lastOccurrenceSecs);&amp;#13;
                this.lastOccurrenceSecs = -1;&amp;#13;
&amp;#13;
                var done = false;&amp;#13;
                var events = [];&amp;#13;
                var totalAlarms = -1;&amp;#13;
                var pages = 0;&amp;#13;
                var maxPages = 0;&amp;#13;
                var errorsFound = false;&amp;#13;
&amp;#13;
                while (!done) {&amp;#13;
                    pages++;&amp;#13;
&amp;#13;
                    var pagesMsg = "Page: " + pages;&amp;#13;
                    if (maxPages &amp;gt; 0) {&amp;#13;
                        pagesMsg += " of " + maxPages;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var response = null;&amp;#13;
&amp;#13;
                    // On the first call we make a POST Call with an XML payload&amp;#13;
                    // On subsequent calls we make a GET call using the URL returned&amp;#13;
                    if (pages == 1) {&amp;#13;
                        response = this.makePostCall(url, content);&amp;#13;
                    } else {&amp;#13;
                        response = this.makeGetCall(url, content);&amp;#13;
                    }&amp;#13;
                    // If no valid response received then report an error and leave&amp;#13;
                    if (response == null) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Failed to connect to CA Spectrum on execute. Response is null. " + pagesMsg);&amp;#13;
                        done = true;&amp;#13;
                        errorsFound = true;&amp;#13;
                        continue;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var responseObj = this.parseResponse(response);&amp;#13;
                    // If response is not in expected format or if it contained an error then report the error and leave&amp;#13;
                    if (responseObj == null) {&amp;#13;
                        retVal.status = FAILURE.toString();&amp;#13;
                        this._error("Response from CA Spectrum is not in expected format: " + response + ". " + pagesMsg);&amp;#13;
                        errorsFound = true;&amp;#13;
                        done = true;&amp;#13;
                        continue;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var alarmResponseList = responseObj[this.CA_SPECTRUM_ALARM_RESPONSE_LIST];&amp;#13;
&amp;#13;
                    // Check the total alarms we need to fetch&amp;#13;
                    if (totalAlarms &amp;lt; 0 &amp;amp;&amp;amp; this.CA_SPECTRUM_TOTAL_ALARMS in alarmResponseList) {&amp;#13;
                        totalAlarms = parseInt(alarmResponseList[this.CA_SPECTRUM_TOTAL_ALARMS]);&amp;#13;
                        maxPages = Math.ceil(totalAlarms / throttleSize);&amp;#13;
                        this._debug("Total_alarms: " + totalAlarms + " Calculated max pages: " + maxPages);&amp;#13;
                    } else if (!(this.CA_SPECTRUM_TOTAL_ALARMS in alarmResponseList)) {&amp;#13;
                        this._debug("Total_alarms missing from response list. Iteration: " + pages);&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Check if this is last go round&amp;#13;
                    if (this.CA_SPECTRUM_ERROR in alarmResponseList &amp;amp;&amp;amp; alarmResponseList[this.CA_SPECTRUM_ERROR] == this.CA_SPECTRUM_END_OF_RESULTS) {&amp;#13;
                        this._debug("End of Results marker found.");&amp;#13;
                        done = true;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    if (this.CA_SPECTRUM_LINK in alarmResponseList) {&amp;#13;
                        // Set the url for the next go round&amp;#13;
                        var link = alarmResponseList[this.CA_SPECTRUM_LINK];&amp;#13;
                        if (this.CA_SPECTRUM_HREF in link) {&amp;#13;
                            url = link[this.CA_SPECTRUM_HREF];&amp;#13;
                            url = url.replace(/\\/g, "");&amp;#13;
                            url = this.StringUtil.unEscapeHTML(url);&amp;#13;
                        }&amp;#13;
                    } else {&amp;#13;
                        // No link so we should just stop here&amp;#13;
                        if (!done) {&amp;#13;
                            this._error("WARNING No next link or end of results marker found in response from CA Spectrum. " + pagesMsg);&amp;#13;
                        }&amp;#13;
                        done = true;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Check how many alarms returned on this call&amp;#13;
                    var alarmsReturned = 0;&amp;#13;
                    if (this.CA_SPECTRUM_THROTTLE in alarmResponseList) {&amp;#13;
                        alarmsReturned = parseInt(alarmResponseList[this.CA_SPECTRUM_THROTTLE]);&amp;#13;
                    } else {&amp;#13;
                        this._info("Throttle missing from response list. " + pagesMsg);&amp;#13;
                    }&amp;#13;
                    this._info("Found " + alarmsReturned + " records. " + pagesMsg);&amp;#13;
&amp;#13;
                    // If no alarms returned then report it and leave&amp;#13;
                    if (alarmsReturned == 0) {&amp;#13;
                        this._error("WARNING No alarms returned on " + pagesMsg);&amp;#13;
                        done = true;&amp;#13;
                        errorsFound = true;&amp;#13;
                        continue;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    var foundAlarms = false;&amp;#13;
                    var alarmResponses, alarms;&amp;#13;
&amp;#13;
                    if (this.CA_SPECTRUM_ALARM_RESPONSES in alarmResponseList) {&amp;#13;
                        var alarmResponses = alarmResponseList[this.CA_SPECTRUM_ALARM_RESPONSES];&amp;#13;
                        if (this.CA_SPECTRUM_ALARM in alarmResponses) {&amp;#13;
                            var alarms = alarmResponses[this.CA_SPECTRUM_ALARM];&amp;#13;
                            foundAlarms = true;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
&amp;#13;
                    if (!foundAlarms) {&amp;#13;
                        this._error("WARNING Alarms property not found in response. " + pagesMsg);&amp;#13;
                        done = true;&amp;#13;
                        errorsFound = true;&amp;#13;
                        continue;&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // loop through each returned alarm&amp;#13;
                    for (var i = 0; i &amp;lt; alarms.length; i++) {&amp;#13;
                        var alarm = alarms[i];&amp;#13;
                        var event = this.processEvent(alarm);&amp;#13;
                        events.push(event);&amp;#13;
                        this._trackMostRecentEvent(event);&amp;#13;
                    }&amp;#13;
&amp;#13;
                    // Check for any obvious signs that we've iterated enough times&amp;#13;
                    if (!done) {&amp;#13;
                        if (pages &amp;gt;= maxPages) {&amp;#13;
                            this._error("WARNING Calculated max pages reached: " + pages);&amp;#13;
                            errorsFound = true;&amp;#13;
                            done = true;&amp;#13;
                        } else if (events.length &amp;gt;= totalAlarms) {&amp;#13;
                            this._error("WARNING Total alarms from CA Spectrum call reached. Total alarms: " + totalAlarms + " Events: " + events.length);&amp;#13;
                            errorsFound = true;&amp;#13;
                            done = true;&amp;#13;
                        } else if (events.length &amp;gt;= this.MAX_EVENTS_TO_FETCH) {&amp;#13;
                            this._error("WARNING Maximum events processed. Events: " + events.length + " Maximum: " + this.MAX_EVENTS_TO_FETCH);&amp;#13;
                            errorsFound = true;&amp;#13;
                            done = true;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                this._info("Pages: " + pages);&amp;#13;
&amp;#13;
                if (events.length &amp;lt;= 0) {&amp;#13;
                    this._error("No events returned.");&amp;#13;
                    errorsFound = true;&amp;#13;
                } else if (events.length != totalAlarms) {&amp;#13;
                    this._error("WARNING Total alarms expected (" + totalAlarms + ") from CA Spectrum does not match actual alarm count (" + events.length + ")");&amp;#13;
                    errorsFound = true;&amp;#13;
                } else {&amp;#13;
                    this._info("Events returned: " + events.length);&amp;#13;
                }&amp;#13;
&amp;#13;
                // Send back the events&amp;#13;
                if (!this._sendEvents(events)) {&amp;#13;
                    errorsFound = true;&amp;#13;
                }&amp;#13;
&amp;#13;
                // Set final return values&amp;#13;
                retVal.status = errorsFound ? FAILURE.toString() : SUCCESS.toString();&amp;#13;
&amp;#13;
                return retVal;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Sends an array of Event objects back to the instance&amp;#13;
             * &amp;#13;
             * @param {array} events&amp;#13;
             * @return {boolean}&amp;#13;
             */&amp;#13;
            _sendEvents : function(events) {&amp;#13;
                var sendOK = true;&amp;#13;
                // Send back the events&amp;#13;
                var sender = SNEventSenderProvider.getEventSender();&amp;#13;
&amp;#13;
                for (var i = 0; i &amp;lt; events.length; i++) {&amp;#13;
                    if (events[i] &amp;amp;&amp;amp; !this.filterEvent(events[i])) {&amp;#13;
                        if (!sender.sendEvent(events[i])) {&amp;#13;
                            sendOK = false;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                }&amp;#13;
                if (!sendOK) {&amp;#13;
                    this._error("One or more events failed to send.");&amp;#13;
                }&amp;#13;
                return sendOK;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {integer} throttleSize&amp;#13;
             * @param {integer} lastOccurenceDate&amp;#13;
             * @return {}&amp;#13;
             */&amp;#13;
            _buildContent : function(throttleSize, lastOccurenceDate) {&amp;#13;
                var contentTemplate = this.ALARM_CONTENT_XML;&amp;#13;
                var reqAttr = "";&amp;#13;
                for (var spectrumAttrID in this.SPECTRUM_EVENT_MAPPING) {&amp;#13;
                    reqAttr += '&amp;lt;rs:requested-attribute id="' + spectrumAttrID + '" /&amp;gt;';&amp;#13;
                }&amp;#13;
&amp;#13;
                var properties = new this.Properties();&amp;#13;
                properties.setProperty("requested_attributes", reqAttr);&amp;#13;
                properties.setProperty("throttle", throttleSize);&amp;#13;
                properties.setProperty("date_seconds", lastOccurenceDate);&amp;#13;
&amp;#13;
                properties.setProperty("search_filter_attribute", this.contentFilterAttribute);&amp;#13;
                var content = '' + this.StringUtil.substituteVariables(contentTemplate, properties, true);&amp;#13;
                this._debug("Content=" + content);&amp;#13;
                return content;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Register a subscription&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            startSubscription : function(sendPreExistingInstances) {&amp;#13;
                var subscriptionId = '';&amp;#13;
&amp;#13;
                var url = this.buildSpectrumSubscriptionBaseURL();&amp;#13;
                this._info("Subscription POST URL " + url);&amp;#13;
&amp;#13;
                var maxNotifications = this.probe.getAdditionalParameter(this.MAX_NOTIFICATIONS);&amp;#13;
                if (typeof maxNotifications === "undefined" || maxNotifications === null || maxNotifications == "" || maxNotifications == "0") {&amp;#13;
                    maxNotifications = this.MAX_NOTIFICATIONS_DEFAULT;&amp;#13;
                }&amp;#13;
&amp;#13;
                var pullInterval = this.probe.getAdditionalParameter(this.PULL_INTERVAL);&amp;#13;
                if (typeof pullInterval === "undefined" || pullInterval === null || pullInterval == "" || pullInterval == "0") {&amp;#13;
                    pullInterval = this.PULL_INTERVAL_DEFAULT;&amp;#13;
                }&amp;#13;
                var maxQueueSize = this.probe.getAdditionalParameter(this.MAX_QUEUE_SIZE);&amp;#13;
                if (typeof maxQueueSize === "undefined" || maxQueueSize === null || maxQueueSize == "" || maxQueueSize == "0") {&amp;#13;
                    maxQueueSize = this.MAX_QUEUE_SIZE_DEFAULT;&amp;#13;
                }&amp;#13;
&amp;#13;
                var content = this._buildSubscriptionContent(maxNotifications, pullInterval, maxQueueSize, sendPreExistingInstances);&amp;#13;
&amp;#13;
                var response = this.makeSubscriptionPostCall(url, content);&amp;#13;
&amp;#13;
                // If no valid response received then report an error and leave&amp;#13;
                if (response == null) {&amp;#13;
                    this._error("Failed to connect to CA Spectrum on startSubscription. Response is null.");&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
&amp;#13;
                var responseObj = this.parseResponse(response);&amp;#13;
                // {"ns1.subscription-response":{"ns1.subscription-id":"7cc82bd4-2819-4799-8a75-c1938a5e01d3"}}&amp;#13;
                // If response is not in expected format or if it contained an error then report the error and leave&amp;#13;
                if (responseObj == null) {&amp;#13;
                    this._error("Response from CA Spectrum on startSubscription is not in expected format: " + response + ".");&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
&amp;#13;
                if (this.CA_SPECTRUM_SUBSCRIPTION_RESPONSE in responseObj) {&amp;#13;
                    var subResponse = responseObj[this.CA_SPECTRUM_SUBSCRIPTION_RESPONSE];&amp;#13;
                    if (this.CA_SPECTRUM_SUBSCRIPTION_ID in subResponse) {&amp;#13;
                        subscriptionId = subResponse[this.CA_SPECTRUM_SUBSCRIPTION_ID];&amp;#13;
                    } else {&amp;#13;
                        this._error("Missing '" + this.CA_SPECTRUM_SUBSCRIPTION_ID + "' element in response from CA Spectrum on startSubscription. Response: " + response.getBody()&amp;#13;
                                + ".");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                } else {&amp;#13;
                    this._error("Missing '" + this.CA_SPECTRUM_SUBSCRIPTION_RESPONSE + "' element in response from CA Spectrum on startSubscription. Response: "&amp;#13;
                            + response.getBody() + ".");&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return subscriptionId;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {integer} maxNotifications&amp;#13;
             * @param {integer} pullInterval&amp;#13;
             * @return {}&amp;#13;
             */&amp;#13;
            _buildSubscriptionContent : function(maxNotifications, pullInterval, maxQueueSize, sendPreExistingInstances) {&amp;#13;
                var contentTemplate = this.SUBSCRIPTION_CONTENT_XML;&amp;#13;
                var reqAttr = "";&amp;#13;
                for (var spectrumAttrID in this.SPECTRUM_EVENT_MAPPING) {&amp;#13;
                    reqAttr += '&amp;lt;rs:requested-attribute id="' + spectrumAttrID + '" /&amp;gt;';&amp;#13;
                }&amp;#13;
                var properties = new this.Properties();&amp;#13;
                properties.setProperty("requested_attributes", reqAttr);&amp;#13;
                properties.setProperty("pull_interval", pullInterval);&amp;#13;
                properties.setProperty("max_notifications", maxNotifications);&amp;#13;
                properties.setProperty("max_queue_size", maxQueueSize);&amp;#13;
                properties.setProperty("send_preexisting_instances", sendPreExistingInstances);&amp;#13;
&amp;#13;
                var content = '' + this.StringUtil.substituteVariables(contentTemplate, properties, true);&amp;#13;
                this._debug("Subscription Content=" + content);&amp;#13;
                return content;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {Event} event&amp;#13;
             * @return {Boolean}&amp;#13;
             */&amp;#13;
            filterEvent : function(event) {&amp;#13;
                return false;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {string} response&amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            parseResponse : function(response) {&amp;#13;
                var parser = new JSONParser();&amp;#13;
                var responseList;&amp;#13;
                this._debug("Response: " + response.getBody());&amp;#13;
&amp;#13;
                var responseObj = parser.parse(response.getBody());&amp;#13;
&amp;#13;
                if (this.CA_SPECTRUM_ALARM_RESPONSE_LIST in responseObj) {&amp;#13;
                    responseList = responseObj[this.CA_SPECTRUM_ALARM_RESPONSE_LIST];&amp;#13;
                    if (responseList !== null &amp;amp;&amp;amp; typeof responseList === 'object') {&amp;#13;
                        if (this.CA_SPECTRUM_ERROR in responseList &amp;amp;&amp;amp; responseList[this.CA_SPECTRUM_ERROR] != "EndOfResults") {&amp;#13;
                            this._error("Failed with error: " + responseList[this.CA_SPECTRUM_ERROR]);&amp;#13;
                            return null;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                } else if (this.CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST in responseObj) {&amp;#13;
                    responseList = responseObj[this.CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST];&amp;#13;
                    if (responseList !== null &amp;amp;&amp;amp; typeof responseList === 'object') {&amp;#13;
                        if (this.CA_SPECTRUM_ERROR in responseList) {&amp;#13;
                            this._error("Failed with error: " + responseList[this.CA_SPECTRUM_ERROR]);&amp;#13;
                            return null;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                } else if (this.CA_SPECTRUM_NOTIFICATION_LIST in responseObj) {&amp;#13;
                    responseList = responseObj[this.CA_SPECTRUM_NOTIFICATION_LIST];&amp;#13;
                    if (responseList !== null &amp;amp;&amp;amp; typeof responseList === 'object') {&amp;#13;
                        if (this.CA_SPECTRUM_ERROR in responseList) {&amp;#13;
                            this._error("Failed with error: " + responseList[this.CA_SPECTRUM_ERROR]);&amp;#13;
                            return null;&amp;#13;
                        }&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                return responseObj;&amp;#13;
&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Transform the alarm attributes into Event fields&amp;#13;
             * &amp;#13;
             * @param {object} alarm&amp;#13;
             * @return {Event}&amp;#13;
             */&amp;#13;
            processEvent : function(alarm) {&amp;#13;
                var alarmId = alarm[this.CA_SPECTRUM_ID];&amp;#13;
                var alarmAttributes = alarm[this.CA_SPECTRUM_ATTRIBUTES];&amp;#13;
                var entryData = "";&amp;#13;
                var eventAttrs = {};&amp;#13;
&amp;#13;
                var event = new Event();&amp;#13;
&amp;#13;
                for (var i = 0; i &amp;lt; alarmAttributes.length; i++) {&amp;#13;
                    var attribute = alarmAttributes[i];&amp;#13;
                    var attrID = attribute[this.CA_SPECTRUM_ID];&amp;#13;
                    var attrValue = attribute[this.CA_SPECTRUM_VALUE];&amp;#13;
&amp;#13;
                    // Add the attribute id and original value to Additional Information&amp;#13;
                    event.setField(attrID, attrValue);&amp;#13;
&amp;#13;
                    // Convert dates (which are in seconds) to a date&amp;#13;
                    if (attrID in this.SPECTRUM_DATE_TIME_ATTRIBUTES) {&amp;#13;
                        var milliseconds = parseInt(attrValue) * 1000;&amp;#13;
                        var date = new Date();&amp;#13;
                        date.setTime(milliseconds);&amp;#13;
                        var dateStr = date.toISOString();&amp;#13;
                        var snDateStr = dateStr.replace('T', ' ');&amp;#13;
                        attrValue = snDateStr.substring(0, 19);&amp;#13;
                        this._debug("Date/time Conversion: " + attrID + " date string=" + dateStr + " value=" + attrValue);&amp;#13;
                        event.setField(this.SPECTRUM_ALARM_ATTRIBUTES[attrID], attrValue);&amp;#13;
                    }&amp;#13;
&amp;#13;
                    if (attrID in this.SPECTRUM_EVENT_MAPPING &amp;amp;&amp;amp; this.SPECTRUM_EVENT_MAPPING[attrID] != "") {&amp;#13;
                        var eventField = this.SPECTRUM_EVENT_MAPPING[attrID];&amp;#13;
                        eventAttrs[eventField] = attrValue;&amp;#13;
                    } else if (attrID == this.timeOfEventAttribute) {&amp;#13;
                        eventAttrs["time_of_event"] = attrValue;&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                var emsName = this.probe.getParameter("connector_name");&amp;#13;
&amp;#13;
                event.setSource(this.CA_SPECTRUM);&amp;#13;
                event.setEmsSystem(emsName);&amp;#13;
&amp;#13;
                var mappedSeverity = 5;&amp;#13;
&amp;#13;
                if ("time_of_event" in eventAttrs) {&amp;#13;
                    event.setTimeOfEvent(eventAttrs["time_of_event"]);&amp;#13;
                }&amp;#13;
                if ("severity" in eventAttrs) {&amp;#13;
                    mappedSeverity = this.getMappedSeverity(eventAttrs["severity"]);&amp;#13;
                    event.setSeverity(mappedSeverity);&amp;#13;
                }&amp;#13;
                if ("node" in eventAttrs) {&amp;#13;
                    event.setHostAddress(eventAttrs["node"]);&amp;#13;
                }&amp;#13;
                if ("type" in eventAttrs) {&amp;#13;
                    event.setType(eventAttrs["type"]);&amp;#13;
                }&amp;#13;
                if ("message_key" in eventAttrs) {&amp;#13;
                    event.setMessageKey(eventAttrs["message_key"]);&amp;#13;
                }&amp;#13;
                if ("resolution_state" in eventAttrs) {&amp;#13;
                    event.setResolutionState(eventAttrs["resolution_state"]);&amp;#13;
                } else if (mappedSeverity == 5) {&amp;#13;
                    event.setResolutionState("Closing");&amp;#13;
                }&amp;#13;
                if ("description" in eventAttrs) {&amp;#13;
                    event.setText(eventAttrs["description"]);&amp;#13;
                }&amp;#13;
                if ("resource_1" in eventAttrs) {&amp;#13;
                    event.setResource(eventAttrs["resource_1"]);&amp;#13;
                } else if ("resource_2" in eventAttrs) {&amp;#13;
                    event.setResource(eventAttrs["resource_2"]);&amp;#13;
                }&amp;#13;
&amp;#13;
                return event;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Build a 'Clear' event&amp;#13;
             * &amp;#13;
             * @param {object} alarm&amp;#13;
             * @return {Event}&amp;#13;
             */&amp;#13;
            createClearEvent : function(alarmId) {&amp;#13;
                var event = new Event();&amp;#13;
                var emsName = this.probe.getParameter("connector_name");&amp;#13;
                event.setSource(this.CA_SPECTRUM);&amp;#13;
                event.setEmsSystem(emsName);&amp;#13;
                // Set time of event to now&amp;#13;
                var date = new Date();&amp;#13;
                var dateStr = date.toISOString();&amp;#13;
                var snDateStr = dateStr.replace('T', ' ');&amp;#13;
                attrValue = snDateStr.substring(0, 19);&amp;#13;
                event.setTimeOfEvent(snDateStr.substring(0, 19));&amp;#13;
                // Set Severity to Clear&amp;#13;
                event.setSeverity("0");&amp;#13;
                event.setType("Alarm removed.");&amp;#13;
                event.setText("Alarm removed.");&amp;#13;
                event.setMessageKey(alarmId);&amp;#13;
                event.setResolutionState("Closing");&amp;#13;
&amp;#13;
                this._debug("Alarm " + alarmId + " removed. Event=" + event);&amp;#13;
                return event;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Handles the bi-directional update of alarms with relevant information from the instance Generally this is&amp;#13;
             * an incident number.&amp;#13;
             * &amp;#13;
             * @return {object}&amp;#13;
             */&amp;#13;
            updateSource : function() {&amp;#13;
&amp;#13;
                var command = '';&amp;#13;
                var argument = '';&amp;#13;
                var jsonRes = '';&amp;#13;
                var retVal = {};&amp;#13;
&amp;#13;
                this._debug("Bi-directional: Updating the source");&amp;#13;
                var alertsJSONStr = this.probe.getAdditionalParameter("alerts"); // get all the alerts data from the&amp;#13;
                // Update Queue table&amp;#13;
                this._debug("alerts JSON: " + alertsJSONStr);&amp;#13;
                alertsJSONStr = alertsJSONStr + '';&amp;#13;
                var alerts = JSON.parse(alertsJSONStr);&amp;#13;
&amp;#13;
                if (alerts == null) {&amp;#13;
                    this._error("Received json is empty");&amp;#13;
                    retVal.status = "" + FAILURE.toString();&amp;#13;
                    retVal.error_message = this._setReValErrorMessage();&amp;#13;
                    return retVal;&amp;#13;
                }&amp;#13;
&amp;#13;
                var url = this.buildSpectrumAlarmBaseURL();&amp;#13;
&amp;#13;
                if (url == undefined || url == null || url == '') {&amp;#13;
                    this._error("URL parameter is empty");&amp;#13;
                    retVal.status = "" + FAILURE.toString();&amp;#13;
                    retVal.error_message = this._setReValErrorMessage();&amp;#13;
                    return retVal;&amp;#13;
                }&amp;#13;
&amp;#13;
                var foundErrors = false;&amp;#13;
                for (var i = 0; i &amp;lt; alerts.length; ++i) {&amp;#13;
                    var alert = alerts[i];&amp;#13;
                    this._debug("Alarm ID: " + alert.key + " values: " + alert.value.length);&amp;#13;
                    var attributeValues = {};&amp;#13;
                    var attributeValuesSet = false;&amp;#13;
                    for (var j = 0; j &amp;lt; alert.value.length; ++j) {&amp;#13;
                        var alertValue = alert.value[j];&amp;#13;
&amp;#13;
                        if (alertValue.fieldName in this.ALERT_UPDATE_MAPPING) {&amp;#13;
                            var attr = this.ALERT_UPDATE_MAPPING[alertValue.fieldName];&amp;#13;
                            attributeValues[attr] = alertValue.newValue;&amp;#13;
                            attributeValuesSet = true;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        // Handle state updates&amp;#13;
                        /*&amp;#13;
                        if (alertValue.fieldName === 'state' &amp;amp;&amp;amp; (alertValue.oldValue === 'Open' || alertValue.oldValue === 'Reopen') &amp;amp;&amp;amp; alertValue.newValue === 'Closed') {&amp;#13;
                            attributeValues[""] = 'close';&amp;#13;
                        }&amp;#13;
                        if (alertValue.fieldName === 'state' &amp;amp;&amp;amp; alertValue.oldValue === 'Closed' &amp;amp;&amp;amp; (alertValue.newValue === 'Open' || alertValue.newValue === 'Reopen')) {&amp;#13;
                            attributeValues[""] = 'open';&amp;#13;
                        }&amp;#13;
                        */&amp;#13;
                    }&amp;#13;
                    if (attributeValuesSet) {&amp;#13;
                        this.probe.setParameter("action_performed", "true");&amp;#13;
                        var response = this.makePutCall(url, alert.key, attributeValues);&amp;#13;
                        // If no valid response received then report an error and leave&amp;#13;
                        if (response == null) {&amp;#13;
                            this._error("Failed to connect to CA Spectrum on updateSource. Response is null.");&amp;#13;
                            foundErrors = true;&amp;#13;
                            break;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        var responseObj = this.parseResponse(response);&amp;#13;
                        // If response is not in expected format or if it contained an error then report the error and&amp;#13;
                        // leave&amp;#13;
                        if (responseObj == null) {&amp;#13;
                            this._error("Response from CA Spectrum is not in expected format: " + response + ".");&amp;#13;
                            foundErrors = true;&amp;#13;
                            break;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        var foundAlarms = false;&amp;#13;
                        var alarms = [];&amp;#13;
                        var alarmUpdateResponseList = responseObj[this.CA_SPECTRUM_ALARM_UPDATE_RESPONSE_LIST];&amp;#13;
&amp;#13;
                        if (this.CA_SPECTRUM_ALARM_RESPONSES in alarmUpdateResponseList) {&amp;#13;
                            var alarmResponses = alarmUpdateResponseList[this.CA_SPECTRUM_ALARM_RESPONSES];&amp;#13;
                            if (alarmResponses != "" &amp;amp;&amp;amp; this.CA_SPECTRUM_ALARM in alarmResponses) {&amp;#13;
                                alarms = alarmResponses[this.CA_SPECTRUM_ALARM];&amp;#13;
                                foundAlarms = true;&amp;#13;
                            }&amp;#13;
                        }&amp;#13;
&amp;#13;
                        if (!foundAlarms) {&amp;#13;
                            this._error("Alarm not updated. Not found. Alarm ID: " + alert.key);&amp;#13;
                            foundErrors = true;&amp;#13;
                            continue;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        // Force into an array&amp;#13;
                        if (!Array.isArray(alarms)) {&amp;#13;
                            var newArray = [];&amp;#13;
                            newArray.push(alarms);&amp;#13;
                            alarms = newArray;&amp;#13;
                        }&amp;#13;
&amp;#13;
                        // loop through each returned alarm&amp;#13;
                        for (var i = 0; i &amp;lt; alarms.length; i++) {&amp;#13;
                            var alarm = alarms[i];&amp;#13;
                            var alarmId = alarm[this.CA_SPECTRUM_ID];&amp;#13;
                            var alarmAttributes = alarm[this.CA_SPECTRUM_ATTRIBUTES];&amp;#13;
                            if (this.CA_SPECTRUM_ERROR in alarm &amp;amp;&amp;amp; alarm[this.CA_SPECTRUM_ERROR] != this.CA_SPECTRUM_SUCCESS) {&amp;#13;
                                this._error("Failed to update Alarm " + alarmId + " error=" + alarm[this.CA_SPECTRUM_ERROR] + " error message="&amp;#13;
                                        + alarm[this.CA_SPECTRUM_ERROR_MESSAGE]);&amp;#13;
                                foundErrors = true;&amp;#13;
                            }&amp;#13;
                            // Force into an array&amp;#13;
                            if (!Array.isArray(alarmAttributes)) {&amp;#13;
                                var newAttrArray = [];&amp;#13;
                                newAttrArray.push(alarmAttributes);&amp;#13;
                                alarmAttributes = newAttrArray;&amp;#13;
                            }&amp;#13;
&amp;#13;
                            for (var j = 0; j &amp;lt; alarmAttributes.length; j++) {&amp;#13;
                                var attribute = alarmAttributes[j];&amp;#13;
                                var attrID = attribute[this.CA_SPECTRUM_ID];&amp;#13;
                                if (attribute[this.CA_SPECTRUM_ERROR] != this.CA_SPECTRUM_SUCCESS) {&amp;#13;
                                    this._error("Failed to update Alarm " + alarmId + " attribute " + attrID + " error=" + attribute[this.CA_SPECTRUM_ERROR] + " error message="&amp;#13;
                                            + attribute[this.CA_SPECTRUM_ERROR_MESSAGE]);&amp;#13;
                                    foundErrors = true;&amp;#13;
                                }&amp;#13;
                            }&amp;#13;
                        }&amp;#13;
                    } else {&amp;#13;
                        this._debug("Nothing to update on Alarm ID: " + alert.key);&amp;#13;
                    }&amp;#13;
                }&amp;#13;
&amp;#13;
                if (foundErrors) {&amp;#13;
                    retVal.error_message = this._setReValErrorMessage();&amp;#13;
                    retVal.status = "" + FAILURE.toString();&amp;#13;
                } else {&amp;#13;
                    retVal.status = "" + SUCCESS.toString();&amp;#13;
                }&amp;#13;
                return retVal;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Makes the initial POST REST api call to fetch CA SPectrum alarms&amp;#13;
             * &amp;#13;
             * @param {string} url&amp;#13;
             * @param {string} content&amp;#13;
             * @return {HTTPResponse}&amp;#13;
             */&amp;#13;
            makePostCall : function(url, content) {&amp;#13;
                var username = this.probe.getParameter("username");&amp;#13;
                var password = this.probe.getParameter("password");&amp;#13;
&amp;#13;
                this._debug('POST URL: ' + url);&amp;#13;
                var request = new HTTPRequest(url);&amp;#13;
                request.setBasicAuth(username, password);&amp;#13;
                request.addHeader('Accept', 'application/json');&amp;#13;
                request.addHeader('Content-Type', 'application/xml');&amp;#13;
&amp;#13;
                var response = null;&amp;#13;
&amp;#13;
                try {&amp;#13;
                    response = request.post(content);&amp;#13;
                    if (!response) {&amp;#13;
                        this._error("No response on POST call.");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    var status = response.getStatusCode();&amp;#13;
                    if (status != 200) {&amp;#13;
                        this._error("Bad POST response. Status: " + status + " Message: " + response.getErrorMessage());&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    this._debug("POST Status: " + status);&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return response;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Makes the POST REST api call to register a subscription&amp;#13;
             * &amp;#13;
             * @param {string} url&amp;#13;
             * @param {string} content&amp;#13;
             * @return {HTTPResponse}&amp;#13;
             */&amp;#13;
            makeSubscriptionPostCall : function(url, content) {&amp;#13;
                var username = this.probe.getParameter("username");&amp;#13;
                var password = this.probe.getParameter("password");&amp;#13;
&amp;#13;
                this._debug('Subscription POST URL: ' + url);&amp;#13;
                var request = new HTTPRequest(url);&amp;#13;
                request.setBasicAuth(username, password);&amp;#13;
                request.addHeader('Accept', 'application/json');&amp;#13;
                request.addHeader('Content-Type', 'application/xml');&amp;#13;
&amp;#13;
                var response = null;&amp;#13;
&amp;#13;
                try {&amp;#13;
                    response = request.post(content);&amp;#13;
                    if (!response) {&amp;#13;
                        this._error("No response on Subscription POST call.");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    var status = response.getStatusCode();&amp;#13;
                    if (status != 200) {&amp;#13;
                        this._error("Bad Subscription POST response. Status: " + status + " Message: " + response.getErrorMessage());&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    this._debug("Subscription POST Status: " + status);&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return response;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Updates a alarm using a PUT REST call&amp;#13;
             * &amp;#13;
             * @param {string} url&amp;#13;
             * @param {string} content&amp;#13;
             * @return {HTTPResponse}&amp;#13;
             */&amp;#13;
            makePutCall : function(url, alarmID, attributeValues) {&amp;#13;
                var username = this.probe.getParameter("username");&amp;#13;
                var password = this.probe.getParameter("password");&amp;#13;
&amp;#13;
                url += "/" + alarmID;&amp;#13;
&amp;#13;
                this._debug('PUT URL: ' + url);&amp;#13;
                var request = new HTTPRequest(url);&amp;#13;
                request.setLogLevel("all");&amp;#13;
                request.setBasicAuth(username, password);&amp;#13;
                request.addHeader('Accept', 'application/json');&amp;#13;
                request.addHeader('Content-Type', 'application/xml');&amp;#13;
&amp;#13;
                // Add the attributes to be updated as request parameters&amp;#13;
                for (attr in attributeValues) {&amp;#13;
                    request.addParameter("attr", attr);&amp;#13;
                    request.addParameter("val", attributeValues[attr]);&amp;#13;
                    this._debug("Adding parameter attr=" + attr + " val=" + attributeValues[attr]);&amp;#13;
                }&amp;#13;
&amp;#13;
                var response = null;&amp;#13;
&amp;#13;
                try {&amp;#13;
                    response = request.put("");&amp;#13;
                    if (!response) {&amp;#13;
                        this._error("No response on PUT call.");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    var status = response.getStatusCode();&amp;#13;
                    this._debug("PUT Status: " + status);&amp;#13;
                    if (status != 200) {&amp;#13;
                        this._error("Bad PUT response. Status: " + status + " Message: " + response.getErrorMessage());&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return response;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Makes a GET REST api call to fetch CA Spectrum alarms Used after the initial POST call to fetch&amp;#13;
             * subsequent pages of alarms&amp;#13;
             * &amp;#13;
             * @param {string} url&amp;#13;
             * @return {HTTPResponse}&amp;#13;
             */&amp;#13;
            makeGetCall : function(url) {&amp;#13;
                var username = this.probe.getParameter("username");&amp;#13;
                var password = this.probe.getParameter("password");&amp;#13;
&amp;#13;
                this._debug('GET URL: ' + url);&amp;#13;
                var request = new HTTPRequest(url);&amp;#13;
                request.setBasicAuth(username, password);&amp;#13;
                request.addHeader('Accept', 'application/json');&amp;#13;
                request.addHeader('Content-Type', 'application/xml');&amp;#13;
&amp;#13;
                var response = null;&amp;#13;
&amp;#13;
                try {&amp;#13;
                    response = request.get();&amp;#13;
                    if (!response) {&amp;#13;
                        this._error("No response on GET call.");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    var status = response.getStatusCode();&amp;#13;
                    if (status != 200) {&amp;#13;
                        this._error("Bad GET response. Status: " + status + " Message: " + response.getErrorMessage());&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    this._debug("GET Status: " + status);&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return response;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Makes a GET REST api call to fetch CA Spectrum alarms Used after the initial POST call to fetch&amp;#13;
             * subsequent pages of alarms&amp;#13;
             * &amp;#13;
             * @param {string} url&amp;#13;
             * @return {HTTPResponse}&amp;#13;
             */&amp;#13;
            makeSubscriptionGetCall : function(url) {&amp;#13;
                var username = this.probe.getParameter("username");&amp;#13;
                var password = this.probe.getParameter("password");&amp;#13;
&amp;#13;
                this._debug('Subscriptions GET URL: ' + url);&amp;#13;
                var request = new HTTPRequest(url);&amp;#13;
                request.setBasicAuth(username, password);&amp;#13;
                request.addHeader('Accept', 'application/json');&amp;#13;
                request.addHeader('Content-Type', 'application/xml');&amp;#13;
&amp;#13;
                var response = null;&amp;#13;
&amp;#13;
                try {&amp;#13;
                    response = request.get();&amp;#13;
                    if (!response) {&amp;#13;
                        this._error("No response on Subscriptions GET call.");&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                    var status = response.getStatusCode();&amp;#13;
                    this._debug("Subscriptions GET Status: " + status);&amp;#13;
                    if (status != 200) {&amp;#13;
                        if (status == 400 &amp;amp;&amp;amp; response.getBody() == this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID) {&amp;#13;
                            this._error(this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID);&amp;#13;
                            return this.CA_SPECTRUM_INVALID_SUBSCRIPTION_ID;&amp;#13;
                        }&amp;#13;
                        this._error("Bad Subscriptions GET response. Status: " + status + " Message: " + response.getErrorMessage());&amp;#13;
                        return null;&amp;#13;
                    }&amp;#13;
                } catch (e) {&amp;#13;
                    this._error(e.toString());&amp;#13;
                    return null;&amp;#13;
                }&amp;#13;
                return response;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {string} spectrumSeverity&amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            getMappedSeverity : function(spectrumSeverity) {&amp;#13;
                var mappedSeverity = 5; // info&amp;#13;
                if (spectrumSeverity in this.SPECTRUM_SEVERITY_MAP) {&amp;#13;
                    mappedSeverity = this.SPECTRUM_SEVERITY_MAP[spectrumSeverity];&amp;#13;
                }&amp;#13;
                return mappedSeverity;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {integer} daysAgo&amp;#13;
             * @return {integer}&amp;#13;
             */&amp;#13;
            getPriorDateInSeconds : function(daysAgo) {&amp;#13;
                var dt = new Date();&amp;#13;
                var ms = dt.getTime();&amp;#13;
                ms = ms - (daysAgo * 24 * 60 * 60 * 1000);&amp;#13;
                return Math.round(ms / 1000);&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @return {integer}&amp;#13;
             */&amp;#13;
            _getLastEventInfo : function() {&amp;#13;
                var lastEvent = this.probe.getParameter("last_event");&amp;#13;
                this._debug("Last event: " + lastEvent);&amp;#13;
&amp;#13;
                // Check if the first run&amp;#13;
                if (typeof lastEvent === "undefined" || lastEvent === null || lastEvent == "") {&amp;#13;
                    this.firstRun = true;&amp;#13;
                    this.subscriptionId = "";&amp;#13;
                    this.lastOccurrenceSecs = this._getInitialSyncValue();&amp;#13;
                    this._info("First run of collector.");&amp;#13;
                    return;&amp;#13;
                }&amp;#13;
&amp;#13;
                if (lastEvent.substr(0, 1) == "{") {&amp;#13;
                    var lastEventObj = new JSONParser().parse(lastEvent);&amp;#13;
                    this.subscriptionId = lastEventObj[this.LAST_EVENT_SUBSCRIPTION_ID];&amp;#13;
                    this.lastOccurrenceSecs = lastEventObj[this.LAST_EVENT_LAST_OCCURRENCE_SECONDS];&amp;#13;
                } else {&amp;#13;
                    this.subscriptionId = this._getSubscriptionId(lastEvent);&amp;#13;
                    this.lastOccurrenceSecs = this._getLastRunDateTimeInSeconds(lastEvent);&amp;#13;
                }&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @return {integer}&amp;#13;
             */&amp;#13;
            _getSubscriptionId : function(lastEvent) {&amp;#13;
                var subscriptionId = "";&amp;#13;
                if (typeof lastEvent !== "undefined" &amp;amp;&amp;amp; lastEvent !== null &amp;amp;&amp;amp; lastEvent != "" &amp;amp;&amp;amp; lastEvent != "0") {&amp;#13;
                    var dotIdx = lastEvent.indexOf('.')&amp;#13;
                    if (dotIdx &amp;gt;= 0) {&amp;#13;
                        subscriptionId = lastEvent.substr(dotIdx + 1);&amp;#13;
                    }&amp;#13;
                }&amp;#13;
                this._debug("Subscription id: " + subscriptionId);&amp;#13;
                return subscriptionId;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @return {integer}&amp;#13;
             */&amp;#13;
            _getLastRunDateTimeInSeconds : function(lastEvent) {&amp;#13;
                var lastRun = "";&amp;#13;
                if (typeof lastEvent !== "undefined" &amp;amp;&amp;amp; lastEvent !== null &amp;amp;&amp;amp; lastEvent != "" &amp;amp;&amp;amp; lastEvent != "0") {&amp;#13;
                    var dotIdx = lastEvent.indexOf('.')&amp;#13;
                    if (dotIdx &amp;gt;= 0) {&amp;#13;
                        lastRun = lastEvent.substr(0, dotIdx);&amp;#13;
                    } else {&amp;#13;
                        lastRun = lastEvent;&amp;#13;
                    }&amp;#13;
                }&amp;#13;
                if (lastRun == "") {&amp;#13;
                    lastRun = this._getInitialSyncValue();&amp;#13;
                } else {&amp;#13;
                    lastRun = parseInt(lastRun);&amp;#13;
                }&amp;#13;
&amp;#13;
                var milliseconds = parseInt(lastRun) * 1000;&amp;#13;
                var date = new Date();&amp;#13;
                date.setTime(milliseconds);&amp;#13;
                var dateStr = date.toISOString();&amp;#13;
                this._debug("Last run: " + lastRun + " Readable: " + dateStr);&amp;#13;
                return lastRun;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Get the parameter that specifies how many days to look backwards for alarms&amp;#13;
             * &amp;#13;
             * @return {integer}&amp;#13;
             */&amp;#13;
            _getInitialSyncValue : function() {&amp;#13;
                var daysAgo = this.probe.getAdditionalParameter("initial_sync_in_days");&amp;#13;
                if (daysAgo &amp;lt; 1) {&amp;#13;
                    daysAgo = 7;&amp;#13;
                    this._info("Number of days to sync cant be lower than 1, reverted to 7 days");&amp;#13;
                }&amp;#13;
                return this.getPriorDateInSeconds(daysAgo);&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Builds a url for fetching CA Spectrum alarms&amp;#13;
             * &amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            buildSpectrumPollAlarmsURL : function() {&amp;#13;
                var url = this.buildSpectrumSubscriptionBaseURL();&amp;#13;
                url += "/" + this.subscriptionId;&amp;#13;
                return url;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Builds a url for fetching CA Spectrum alarms&amp;#13;
             * &amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            buildSpectrumGetAlarmsURL : function() {&amp;#13;
                var url = this.buildSpectrumAlarmBaseURL();&amp;#13;
&amp;#13;
                var symptoms = this.probe.getAdditionalParameter("include_symptoms");&amp;#13;
                symptoms = symptoms == 'true' ? 'yes' : 'no';&amp;#13;
&amp;#13;
                url += "?symptoms=" + symptoms;&amp;#13;
                return url;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Builds the base url for accessing the alarms resource&amp;#13;
             * &amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            buildSpectrumAlarmBaseURL : function() {&amp;#13;
                var host = this.probe.getParameter("host");&amp;#13;
&amp;#13;
                var port = this.probe.getAdditionalParameter("port");&amp;#13;
                port = port == 80 ? "" : ":" + port;&amp;#13;
&amp;#13;
                var protocol = this.probe.getAdditionalParameter("protocol") || "http";&amp;#13;
&amp;#13;
                var url = protocol + "://" + host + port + "/spectrum/restful/alarms";&amp;#13;
                return url;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Builds the base url for accessing the alarms resource&amp;#13;
             * &amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            buildSpectrumSubscriptionBaseURL : function() {&amp;#13;
                var host = this.probe.getParameter("host");&amp;#13;
&amp;#13;
                var port = this.probe.getAdditionalParameter("port");&amp;#13;
                port = port == 80 ? "" : ":" + port;&amp;#13;
&amp;#13;
                var protocol = this.probe.getAdditionalParameter("protocol") || "http";&amp;#13;
&amp;#13;
                var url = protocol + "://" + host + port + "/spectrum/restful/subscription";&amp;#13;
                return url;&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * Returns a string containing all generated error messages separated by a line feed.&amp;#13;
             * &amp;#13;
             * @return {string}&amp;#13;
             */&amp;#13;
            _setReValErrorMessage : function() {&amp;#13;
                return this.errorMessages.join("\n");&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {string} message&amp;#13;
             */&amp;#13;
            _error : function(message) {&amp;#13;
                this.errorMessages.push(message);&amp;#13;
                ms.log("*** ERROR: " + this.type + " " + message);&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {string} message&amp;#13;
             */&amp;#13;
            _info : function(message) {&amp;#13;
                ms.log("*** INFO: " + this.type + " " + message);&amp;#13;
            },&amp;#13;
&amp;#13;
            /**&amp;#13;
             * &amp;#13;
             * @param {string} message&amp;#13;
             */&amp;#13;
            _debug : function(message) {&amp;#13;
                if (this.DEBUG) {&amp;#13;
                    ms.log("*** DEBUG: " + this.type + " " + message);&amp;#13;
                }&amp;#13;
            },&amp;#13;
&amp;#13;
            type : "CA_Spectrum"&amp;#13;
        });&lt;/source_text&gt;
        &lt;source_type&gt;Javascript&lt;/source_type&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-05 19:03:30&lt;/sys_created_on&gt;
        &lt;sys_id&gt;6d64a8e5db610010d0cb5385ca96196f&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-12-06 18:35:51&lt;/sys_updated_on&gt;
    &lt;/x_58056_md_docs_markdown_source&gt;
    &lt;sys_attachment action="INSERT_OR_UPDATE"&gt;
        &lt;average_image_color/&gt;
        &lt;chunk_size_bytes&gt;700000&lt;/chunk_size_bytes&gt;
        &lt;compressed&gt;true&lt;/compressed&gt;
        &lt;content_type&gt;application/msword&lt;/content_type&gt;
        &lt;encryption_context/&gt;
        &lt;file_name&gt;CA_Spectrum.doc&lt;/file_name&gt;
        &lt;hash&gt;392e8b3d92eda26205c16775199246f50a93bc0d50f92338f06450d6fff6176f&lt;/hash&gt;
        &lt;image_height/&gt;
        &lt;image_width/&gt;
        &lt;size_bytes&gt;15438&lt;/size_bytes&gt;
        &lt;size_compressed&gt;3468&lt;/size_compressed&gt;
        &lt;state&gt;available&lt;/state&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:14:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;0089274bdba94010d0cb5385ca961993&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;system&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-12-11 01:14:36&lt;/sys_updated_on&gt;
        &lt;table_name&gt;x_58056_md_docs_markdown_source&lt;/table_name&gt;
        &lt;table_sys_id&gt;6d64a8e5db610010d0cb5385ca96196f&lt;/table_sys_id&gt;
    &lt;/sys_attachment&gt;
    &lt;sys_attachment_doc action="INSERT_OR_UPDATE"&gt;
        &lt;data&gt;H4sIAAAAAAAAAA==&lt;/data&gt;
        &lt;length&gt;16&lt;/length&gt;
        &lt;position&gt;0&lt;/position&gt;
        &lt;sys_attachment display_value="CA_Spectrum.doc" sys_id="0089274bdba94010d0cb5385ca961993"&gt;0089274bdba94010d0cb5385ca961993&lt;/sys_attachment&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:14:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;4089274bdba94010d0cb5385ca961993&lt;/sys_id&gt;
    &lt;/sys_attachment_doc&gt;
    &lt;sys_attachment_doc action="INSERT_OR_UPDATE"&gt;
        &lt;data&gt;7Vp7bxu5Ef8/QL4DqyB37sFr2ZblOooi1LHdOxfxnWs7KdCiOHB3uRLPu8s9kmvZd7jv3hmS+9RK8quXtCgSyNohh5z5zXAeXI1nOokJuU3iVI1EFPGAvevlMh2pYMYSqryEB1IoEWkvEImb4f70HNtcyPAeTDjNsbzrzbTORv3+fD7fmg+2hJz2ry76FydHHsqzt92bvBjPGA3hDzBMXhAyRvbR3+HjWAR5wlKN1IL+ibP55FzyVI/7FaE24R9CJJM3227UPNVGj8X3Qv+QaZ7wX9hfhHwvxVwx2Yft+x37jvso1Fjpu5hNDIC/vjSrBSIWckReDQaDty9f/PbyxcsXvgjviuFIpHpEdgbZbX9na4/0vmPxDdM8oL1N0juUnMbwRdFUebA5j95WXN6c8ekMmFMhExq7kZinzJu5EVix2NOIZDYORMiK3X3QgUlP0pDnakRAisX5mWRk0uDKaBjydDoi227ThMopT6tnI54C3IC0dTBkCfkDTzIhNU21m4IQer5k9LqlwHzGNfNURsE9cG9H9mlwPZUiT8MR0RLwyKhk5WpWj5YAEU14fDciZyyNxSY5EykN4O+RSJWIqQJ8j0QuOZPkezYHlBORCrOvxaCJAOq/2SZqXUAScpXFFDbjKVqgxOXWm/NQz5DONS+VXIuguGEyisW8zdgwL09n4BMNROeSZi1AK+Q854u/D35dCI58FgnZBeSyEcNFI81kF5MZqE5aqlnaPhDPo8qWW3zxCJDd7ewW/wzN4Vly5J37XPshfGZGT0WTrB4FlgnZO2Y/0U85uQSjIVFgZHjPtdJwehLyiUnaHGuq4p6aOrUO6ZvdrcH2wevuEDIYlvYctAJBIwz5Ig47AbivE9YF2n7dPim7gPJeCfEzOegOOtUufgzwYw8/hvix3w7f4ZuD4e6funbvXUnm55DlNDm7XBusayi1cN5phQKgQODchggKAXQhbrTczqqz2zCMhXLnYG9r/3XbMNt7OwdBza4dfMPB1sHeAifbO6C7frXjKuyKqJKKMiIuCLAKIM1utReyQEiquUjLhezWw3KbWmp4Fb3Bf42w5pWyR/ivJclwOFz0v52d0tNKyCE5kv2SXOgGEwl4Gw+bWzYzasOsaLcu4w3hcIHB22XDcD9kVRbf71Z6O9qJDrqVDvfCA+Y/VupFlJbgsVa9va7Y8SWHvAe767oYV+GwaOZ1XvjwMtHuJluVXrHf3v7+wZvWMTG166jLL1wNs9OytqdFhnBV8cnRfaE1FPlkxwwYSbLlmXNQKzuz7kNQJVKcAG4g0mn3pAXXahZJdXS3yyTTEageGpNqqpXq75Z4PSLUlxWlH4vguq7+wila0KeqJsmim5EHeGtetjExV7r0kJ9zKltKL9qz5g8xi0Dv3cobYo7rFl/vV1Q0I14Q+RFdFtVMqGcsXBRxcK8K4suLP9UBAJMAZItnZH9/f2kEKUvQfwZQF6lv3vVimk5zOmVe71+2IO0aWX7C6rZoH5oC01oZ9oH7zJ6XAjEH+FKkzDGjMZ+CF6P3rG4OTeuDVGPlZju5tM9c0i51NNB2wEvEL56mvoO2SLee6CA2KW7inPnXXHuzu2zGUtUAzqzdPaA66W2abVKOwMRnXEqBzVLtyVOBFHF5lrEtLTXc3t6ufKTOE+VxDHyMpTVq1xJLRKgtQO4nS32hPycs5BRszKumq2r/HKE7jr2KoqLI+63NaCr+Fml3kTRYJO0tkoaLpP26aIU8APHbiprh4TIe6Zn2dUTojSgz7oLEJvz/nAvNupYeBvhvGS92yb927sxTxaGxXr01eHHcWKDMSWZkGRtPpp1MRSIrBmq3I7Xc1eGgr1fot2CCeippnXOrOhJqey0JKb8ZP3wx7tsbvXHfXT3iHpNxyG+ICZjvvnYXA1/j7eQu4eG7HvVSmrCA/qgyFmiZJ7T2vTcZU4Lj73pNap9Ojg5/vHQE2G8XVswmX6W+yt7azzFLJic3eAtxRlOwJd48YphNgQeO5tnpMblk8gbyEJwxnulxHxjG/QxFGxjR9F3GvJ/oDbUTepMrIIzIGEGb/LWkj/uGAEIMKl6jr9cQ+ghJBXtD+gb/0PBDRGdpqDyaSeGz3uTEPgM7SHl4jkQn8GxY7ZowPROh6k3O7JdizT0z6uc8DkuYYyoTnyqWyxgANSKYCYVYhzjhPUz4ePFh44+VkHsGaRTjvVmP6BkjuBCBlSCpSUKDgCkF2cUMmY0UkUxB+gqc1L7E218sTCcXTOcSgjM6jyE4hOAJE1S5sTGMXKLNlGm7zzJtvmXaKKTWaUNLNSKmgxlqcXRIimWcNv8ZJTKI9Ku1OIcZX7waKvftwYAKZpWDXdbmfcF+BjmZahbEDKp4DCdmHx4WKtnhIxw20WbDjJ+GyzUB23z1avDmreEx34hZeEHicyoh9EHSqwlt5ctj+Ii5E8Hs6LYjwv8J4B33YbQ95TQsJn3jxvtmoWwtRkaz5RCxWxbkmhWQuMduYx5qzZJMEy0I+jsBY5G6xxByGpE5I6FIDTaazOgNI1DsEDA5jwhHiiLsNuOShdDeUqkB0pTNm+vQNLS+X3hGCPMDHd/d2zMslMvVjngMxjG2Mx+F/pZuvcEMLALxQAs7/7DGO7EPDzLgeyHA29LlupQBtECpUGZaBM5jN9Bt1hNrczBElqNVo6eEm3XAg0wJzTIWKgBGcn1Xhh73XBP+zEy8dAMbxcyC8GTTtBcsrGTDygPNtC4WgT5Q40NJBiEHilIG5VSoQnqn6FTUdD7HOccw5zS9tHM2cNLhVDxZXbdOoSX0G2zK5APVdFzL9UzoNUzQAY3jWvZAKuTxI6BuALnTD89gDma/b0+uyMXJ5RWhGSe4DgYcGw4WHZN8VBBJ7OsxTCXuLSI5/wEWaDJjiGE/51hLYoOg0NOXePd9IQVVnuQ0311dnV8wlQlwiNWQZkIVmHquEq9jew7DBbibxQvCFSgvQLUC8PPVkeCpWJUTnNS/F6B5iacrCzyqYUsfQuENjXOmGvjmNXhtRj6GLwXDJ8PQiffHDE88+rVhI7mpeig5/+hARyk+D6itEuO4XWJU4009H1uK3N849WqgO5jUK9D/B5ZngnpNkKlj/piA0x1oJJtyhSjTRhH4vxBnMioVVJl2WvG3QNQMFmtsFKNPzvLFQk9Sb10Vh+V/3VilTkCve0l3wYmtMNT40AeA4TEaNor/U+wTTP9QdQrQPnT3FeBWqesj4PHZqtRMCuxPq6axVNAO1NrFTg2v8A0T9LlJ1d5WyUJh6SVsL0AizuLw8XFief/4TP2hwbZuH8XSMJOssB2UspqmQZUtDUPDB5DjXLITx3FacHQid/HM0WDZ5o/NYes8B8yrA3tTWTsXSD0qqevaMJyNOQR9p1oLY2U9TZFLzTKyQ7xlEdTN2IUZU+HSHy4Dqy507YwDGbp5ZIgoj5U9WUYS8/xsRyu39ZC56CngsbRLQ+sG5zuahrFLIz73bKcLwkNCtsxVziVz0AUwiaGMgwPGUzyH9p1cJEXikrl1A/ItS5mERHQHZA4HU2Fc4mnAQzycaZ74TG49m+4/mks0l3/0TAqtQSn+C/NiqrQIglwykAr1KaCxLEeWZaPguQSeTYJMPxRM2DM+OXnU1+/uE8upC5s/ra9cB1rdYx2ACb1NheYRD4x1lYfXF7i7hPrdg1EoyXIL77qgZfeoR60CcVjm+/omm+aS5NTtsolvcP6G21iL3D/UPdAwbTHWGKcu45qpdQWWNgDPHUVXWDtkfj5NIMdCJV2axxA3HPXpYNp1VlRIDYkYvs1tS2SIn0siaIlcO6Lu0sB0q6VgMHZqxy5hzDRs3SEVuiYTC7NCRniimuClGPgZxNqZmIN7p3cEL44w+8RCXJvX0HMqQ2Xv8R92O7j29gjFx8hiKi8M3XW9PsCAKVdOYaBDqefaXOYphmDNk+qmrhSqLdBFnmL0u4LJ1ZVdXEj6ZM8oV3rsUbuX1vXoysNOXevB8TT879JwZqoHGoYsLEN/88kz+lb5wHIc4pwy2G3QxuOmffXTXcaeuwYC6glkKgsOrP3NqatXcnVoTZVW9XCPbQsakhbAUinpXTu0WyW6pjxXSezAlCwRNzXI28/dJriwsyojyBbhnmZwbL+3IdrSfm5TYEhtpzKkfa5MhoWFVbtlfRwwUUFtrLDvJf6wAkt2Axb2ALartjgok6wwc9Vr/kfb8unm8de9ygO1tcTr586aAwYv8Ar2BAfP7GB3bncCYENoDGAu6CjUDHj1HMdkatoeDefBbETcTgoKWCwHcMC/A278jSCJGAvv3wOtew/2o5ZglETgT0yD4vVrM9uYGWcw48LMWPk2FqQ6mrHg2niBmYP2VozZ983uHsm+6cdrJMw2xHRapnEhmOj7mOmJKaOwA0yEZMQKZ0si04cbBk1Q8GLQcCwi86g3w4vu1ADNNrn2lwzdB8bOOLIz1p+cD1DL2RLOQBS0ftCgrObmno2C90gbCfHXxeZ1vUUa39MDzBH+KBEmZdx16DMAaZPgb7A2zQ9czcTi1x0WNlUcy87tic8CmiuGt36gD0l48WMR2uzo4X+3/P+xU45mge8hvwF2+yO5Pv4ob/JvHCgnVk48AAA=&lt;/data&gt;
        &lt;length&gt;4612&lt;/length&gt;
        &lt;position&gt;1&lt;/position&gt;
        &lt;sys_attachment display_value="CA_Spectrum.doc" sys_id="0089274bdba94010d0cb5385ca961993"&gt;0089274bdba94010d0cb5385ca961993&lt;/sys_attachment&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:14:35&lt;/sys_created_on&gt;
        &lt;sys_id&gt;c089274bdba94010d0cb5385ca961993&lt;/sys_id&gt;
    &lt;/sys_attachment_doc&gt;
    &lt;sys_attachment action="INSERT_OR_UPDATE"&gt;
        &lt;average_image_color/&gt;
        &lt;chunk_size_bytes&gt;700000&lt;/chunk_size_bytes&gt;
        &lt;compressed&gt;true&lt;/compressed&gt;
        &lt;content_type&gt;application/pdf&lt;/content_type&gt;
        &lt;encryption_context/&gt;
        &lt;file_name&gt;CA_Spectrum.pdf&lt;/file_name&gt;
        &lt;hash&gt;0d85b0c4ed1d416ae6047de4b17a64bbee8ae64c75e24ddeb85907c8e601168e&lt;/hash&gt;
        &lt;image_height/&gt;
        &lt;image_width/&gt;
        &lt;size_bytes&gt;29301&lt;/size_bytes&gt;
        &lt;size_compressed&gt;5948&lt;/size_compressed&gt;
        &lt;state&gt;available&lt;/state&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:17:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;523a638bdba94010d0cb5385ca961907&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;system&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-12-11 01:17:44&lt;/sys_updated_on&gt;
        &lt;table_name&gt;x_58056_md_docs_markdown_source&lt;/table_name&gt;
        &lt;table_sys_id&gt;6d64a8e5db610010d0cb5385ca96196f&lt;/table_sys_id&gt;
    &lt;/sys_attachment&gt;
    &lt;sys_attachment_doc action="INSERT_OR_UPDATE"&gt;
        &lt;data&gt;H4sIAAAAAAAAAA==&lt;/data&gt;
        &lt;length&gt;16&lt;/length&gt;
        &lt;position&gt;0&lt;/position&gt;
        &lt;sys_attachment display_value="CA_Spectrum.pdf" sys_id="523a638bdba94010d0cb5385ca961907"&gt;523a638bdba94010d0cb5385ca961907&lt;/sys_attachment&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:17:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;923a638bdba94010d0cb5385ca961907&lt;/sys_id&gt;
    &lt;/sys_attachment_doc&gt;
    &lt;sys_attachment_doc action="INSERT_OR_UPDATE"&gt;
        &lt;data&gt;7V3rc+M2kv+uvwJfUjO5mqGJB1+pra2ad7yXufHazt3VZbZStER7mMiiQ1Lz2L9+u4EGCFoiJVF25a7qUruymhAaTQDd6F+jgfnu7PXb5zyQM8lCVl39NvvLX04uv90V7OQsvylm8FkXq5ZxKD2fnZwXTbWu50XDhHnwvliU+cvqK/slhAcxF0EYsiTDP/+YnbyqVi3UbpjSv/7rX2fFaoGNqK6xn4rVTfuJSS4TKG/aushvZ2EgQvZlFrJ3sz9mf7CXl/D7G6ZC5B4Ddyi9XEDxc54Fqfke8DRlUC+K4DNSGatvZidvBeMpVrq8Zk9fvfj14q6Yt/X69nt2+dvszSX7+wbzWARxZJlL+x0aDJn/qZlLlgVJpHm/+Yy99D5fQafd4ld49RW0VdXs/elrdlHUn4uaNfO6vGuHG5ciiNybpYGQ428W2TfDAfuBab4DosYMXiYyv/5b/jnfIUmUJUGSTJDk1TJvmv1F2WdIotiOsQgDydnzLAiNaIGUMGu9TxIH5KVR+QrTb+HLg+IrkcBnminze9X9/sVZXV0Vw5IoHmSp7ZXYjtXuXnlftJ+qRTPMmCs9kQxjEXD9Hbsqsyyu1uVyYfvqxTKvb1/mTfHz+U8fn378fpCxQk1Uh0/nl9haw9pPBbuCZti6XrJrmMv5HHS/KVc3uihHMRpWk1EYliJOgji2UoRBIs3ria7B86Jd16vmh2EeEfRt3L0Jj0emQNQxBoMC4o7wFXEQJ/e7fmBMh8bjXdHqIWl2jkcogyyePB65G4jrop1/wnF49YJZKWg8BhuXSRZE2XHDIME+quzhh0HKNIjDI4fhrFou9xsHCbqZZn/SOIiMBxE/bhxEogLFH34cBKqZOHIcLtZXZn0pq9U+VkqIJEj5n22lBOimUscNC0/jQKqHHxaOarexQOweljl4U23xalnktfZQPj7VvXG6GBkNLkGsqWsGqMYT3dwTVmCDw62ABsrxNQFcz/y2aIt6a4fHmk0WBWLDnva6QL+wrn/ylnfM0f2E2aoLIoUORiqDNGK3jCgVxBK/84SlupFIBjKj7/NZBH4ityXaLaAa5rvmBb+yFHgsVAMGUlpe+vt8Rq2YEisL1vDkms9ebu2AJEWuOzvgdLGlC/7Ne3tYosGptm8PFMht5Ip1C0Zi892+PZXod6Qa9jvwsm8fx+Bx0dvHUZCklpf+bt+eSkzrpoYn1+bb03qqArGhsvqH6PcZLEGQI3pMfBPfwzfxJr6RKtyOb/pvlJgmjrJCcaaCLDzcCmkTMcI24UHIDzdCxddivm6L0SUgVmkgw8ONzou2LW7vWtZW7A5Wfwajxxpv+WGn1+xLwRbV6knLPuWfC1at4P81K69ZiU8aVny9K+tiwZo2r1uwX6viS59FvlqYdd4uJQv4/bxdfht+GwFunjhyEMM4SOXhg2js2jDfCOxMpg4fxetyCaaYVhFt20eGM0LjtGHdB4bzQJMfwfq06UP3Z5xbevoG7417boxLJNIg6mx+JDLoUjJ7SGTW6hNhDZ8t0/bN1iJCc7S2LxIaR9taScCl46gJa/5sGclhavkyDlnAKIyOdupVmk5y6l9WFSz1qxHGsZrk1d9YPPWaNG0cVAEsn+LMvzF2CVT+bo2m4/oQJ17x5GgnXoXhJCd+l4rLJJ7kxEO3v8/v7orFBShQXbbQ7Y116e2TEUwVSS909rA6D72ASjCm8/cl3aL+xsv29F8KgVpn9R/JTJD+S6GbNNpKhNV/W6Z13NZyhFFrInkgI2ZrQacIx1ETVv9tGclhavkyDum/yDKsfxyYhCUhTA6fh7vBZBrwbNI8PKvLqn4N2OV0dVHMK3DmPj5d5N+aFzfVGJCUEUYIH2UKCgAsYtzTJgG3zLwS/MSbovamHqLNtHO4RaiCyHrcItRNmYlChJ16tkxPL1uLCM3RTj0kQ+t3i1AEMnUcNWGnni1zYoWC9WQcmno8DYP0WMAcyx7Y3HfqUYeOMAYvIZ2AmG/z34t3RfsqXy4/Pl3XyzGgDEsAnwCU30MTGEN6B0zP31xcsvyuZHNoEL1Y42huLkTs5wZ81PwaJqmOapSrsi3zJTv7AAz6ldF5Lf5YI6y5A4zTwMpm4t+9eesJtGOpS8DCjK90e7ltmQcerBjboVrymFAtvQfV0g2opoSKxqFavAWqbY3awwTaZx1KwBEAPbbGIAnB/idkDJJQGK8XVZcIawxsmVZ4W4sIzdFh8CwzvqQG4WbJIBRuCAfDqcxgb6rlyzhkDOIkwfDHcZAn9oOP+xuDHy8vz2A63FWrphjhLuMgngB80CKcVU1nEp6xuZlMY3iW+wjwUNuwoeAjZuJsP381SjPPg5quxXHmBSK3roJ7zvkInIOw872QTK3vFUW6FUJKhnDYi8oMvqJajgg73yuKEtzXs7Vg8IXjqAmHvaiM5DC1fBmHYm8R8E43ghb9AKyZKXt1CMAY2RmBSAnSRP2pWyLxDeE6hMrMS1MtIjgt9ESGiMaoFqJoawSIcB1CZSSHqeXLOAhGeYqRu6OMQIRm7NGMgAIzpaYagbVvA0xY9TV8aWEkrwBI/me+XBfNGFCFTkwmGIWf7xbgCaPLoBtla723kbOzn8kyoFUYblWGiCaO1XzFQ71NfrzmyyzFyJZDXbDKxFbzERILq/lE2IluywyyolpEaI4OdQEZOtSVJTqabFCXIRzqojInVhixnoxDmi8z6QU2jtV8CfiLd5qPZGY1X6a6JRLfEA6GUpl5aarlCN5pvkx5oKzmS3Dbk8Rx1ITrECojOUwtX8bBDkniIBufHaQwO/YhZBwFkTc54hitAUkX60ZIckO4vqAy875UiwjN0fVFrHMtbC1g7CaHIVxfUBnJYWr5Mg72BfzZjGX3+6JvM3b1iYLJ6M0PlWHKAkkZ6cboDQzh+oTKzHtTLSI0R9cnQHI3PxQohZsfhnB9QmVOLB6ynoxDK4MU0dERcRnqxf6RVgaRqklxcVwZ/A3vPcGjiEUgJjuI/3fAoxDKy9abvPpgpIOP69Seqw8HRBh3ysTBkiurTDzTrZipT4RVJlumFcbWIkJztMrEM467b7YWD0TiOGrCKpMtIzlMLV/GwcALOOHJkcrEUb5HUyYuUi+sM12ZDsZdPIwxfnUE7tqOt+ripmxQffLe3uCgHLB0bsbCD571Md8S9d4eM8keM2bCw3tBE/3g3gY34Ov/j5rsHTWhAc4izzc/1o+MwR/MOt8pThXtKegsDt2STePQRJfHYcrMS1MtIjRH1yFAcus7xeARRsJx1ITrECpzYvGI9WQcDCNBv3QpthPDSEqiK/JYYSQO4HjCpsZdXjeFZf/xaW2/jWyiAzrZDLw+0CY64ODNcGxPYCvhXrEL8IjjbjcjQv/b7mZEsW6KIg2GcLELKjPxCapFRERQh0ilAz1USyEWsRwVQR1qzZSRHIqCSp2Mg7ELJbzw4MTYBXi50YTdjJ05G6G/nBww56rl0l9Ox7fRk9RzgPdfOjHrluUrVnyFFRIDE/fzb8r2SZdlU9Vb8nFg3V1R/g2Qo/GT6Ng8cgkIZkIe+a4hUnioYUIe+V1dYbKqn505tseehUE6IX/8ss5XzXVV33YZsV3cqsHtycokx7DrsliOnFRAZK3G00322s9XMeruznDBPnmbUioMfDh0LCNC6ohXZWzimxrLGsKhYyozCJhqEaEoHOpInll0jJkIseOoCYeOqcyJhbV8GQfRMfpEx2aEY9LfhGSSHUl/ApP+JuSSaG3u254GnMezunhDduJ0Bb9ZzUcjpgLTAidkhp8f6K4LTNgbN/77oVTp7YhvT1MZ6IQdISBEhEr0UKsIHWrVrVqMqYkOtZoyh1pF6KFWEwp1qBWWvw61uiWbCB+1YplDrVjLl3EMtaojrTeiVvkI1hvxqppgvcF4tnTSb9fyykOwMBNMd5elho1hlhqa8LlrFNGpH/G5aIs7wHvPhyCr+YGAH9xUFEdCJsDz3ro9HvYpSqhSw6INzK7zctmYRVzLqOmRNGIvNDCes835o6JacR/Vis1cAJnuyAX489O2d03uqXnba73tdKH79lGSt3/MV4slhV2uyucmrRomX75kpm2c7RTB/ALzDab0svicw8iXK3Rmcj1Tr+vqlqKaxpayd8WqqPPl8hs8LsG7adA9LVfzcmGB9OC0Xq1vr4o6GEF/IcbsjkMJYIb5hHS7nSgBDKyYgEx/1Ye3SC0+Pm0/1VXbLouL8p/FM7bMm/bDfL4GhZsXmJA3BljBq1OPBVhFvMUT6BtjT/C9cvDw2G3moVYeYdSVcCTX7RHGNIRDrVRmkCnVIkJzdKiVmy0kqiUD5VCrIRxqpTInltt4chwHUhDCzDtau7VbNkZwr75RmT4VbftGZRlmQtAmbaYbpU1aQ7hNWirT729rEZHSbi6RZiuJaunDDpZjTLu51JopIzm8DSjHceBwUBJ5+jD12LGfwrq/ro4BUOUZy0O11Peoncbe5l//o2rL63KuLWLzTCe0n0Jp/TlfPmNQ/vd1sTYa7ezf1tDrBB8dd+I3TeID5X0nWc9Ubpne919+r9kt0QmJvV3mFOM2dt/XC/QS0e0yZ116ja1FhObY7TLH5vyH3ZuW/r61ib26Pe0u15tq+TIO7zKLXrLclq7xZ8F+3QLCg8/luiXSByvsRrMX7iWi22g2ZebVqZYjOO+6BXekpdtoBlnc1rUhuo1mU0ZyhHQup5NxsFtU1Av+bp8xTh127byDsqq4F1sQbp4Akbp5YogutmDKXGxBKC+2oLx5IqVePVxsIYy82EIY9WILXXYK1fJlHOwQkdnrOx4Yk0quj227zuEpnkQicXmG29v0KoZwnUNlpgOoFhGao+scIEM3W2DRVW62GMJ1DpU5sULJejIOn55QXpb41KP4iXd5x0MsEQJesovyHbBELIqr9Q2sB0XTAE4aPSgRepsYD31QItxyHKuvgUbA/bbrM1zwu3MSIaVn6pMLuiV7qkET3TmJsLNCws8cI45d4CMN4swFPlI8t2gDH5roAh+mjMQytXwZBwMfeBxrAv76tajrqt5nODkevdrA1A8znByDmuMxrUOGE08zeXEsPDvl4lhCt0SdbwgXx6IyM2RUyxHci2Ph2SkXx8JTVS6OZQg3nFRGcphavoxDw4l7vVOU86ZoT03ezcW31Vwnfo2iapg1m5nWu0H1u6LVaPjOji1QecvweBw4SYC2P1VfwCNcfWN4XAmjR8uq+p1d5fPfv+T1ojE3aOxIJvfPi+0I4TzqvWJc3Q/hqM3EhCTj/9tDODuPM02N4eCs+wkAoI7yn66uq52BHD7BjuzuF8l791A9XL+Eie2LSf1yvl4hJL4sb/2ThkvbY2PBjlQFYiNT4YGCHWYTexeqfzNwzN130vCMgod0okh2SCey6f7mUITykY4to6MUnvUljt0xC94hHSRkd3CD+0jHlpEcvEM6juPAzrxwl/xNj7nB3EgeQzHx7Hw6UTF9MH+62G/aqTjaslP1MNNOIXYaX+r3nXYY5fD2qxRCILvOI+H2q4hw4SMqMyEiqkWE8verlJTdfhUSbr+KCBc+ojKSQ3b7VY7jQPiI86P3qySsB1P2q3ZOO5mEkzasfv2kY+4vFoti0QV3nuY9+pm5u2k06KOSSbtZZybdAVOYsUkXs8ccBO229Lay/A0p3KjqpSRtTzOXXl7B9PSEUHqRw+3pCb0e26INeV3n3zyNwFvfUg/IZPqiUQIymW6PgIwhHJChMgNkqBYRnGIOjgwtkBFZiJPXcgwp5kCtmTInVpixnoxDoQSR+icoh29e2as7MDjbGQgB3m5oDQQSsTUQRLjuoDLzylSLiIiiDEQqPOlla0m00pajpCgDtWbKSA5Ty5dxMHgAvMWRBgJvLOCPsKEtOPeCsgfbh/PitvrcsxD1vSd72Ahoq3dl5+E2ghp9aCvBY+UF9SdbCa4Uqs6YOtzvtT0Ug0uB53QcQoYVS1k7waVukfCsIRxCpjKDgqkWEZqjQ8jSxGepFu/utiPCIWQqIzlsLLiTcchOcOEfsjzOTnCuE/pddwCZuoAB1+2Q8IZw3UFl5pWpliNCL2DATXSWaqnusjsiXHdQGclhI8GdjIMBA7nlLqzDzAQYomzDSgwA7ke96I7fv+mOb7nqjk+56u4B8x3A7vApLnmp8fHucFscR1uuHXwYHzwGH3zzUpGp4bYY7EDSaU8MNiKy2hNL3RLl7xvCnQigMpP1T7WIkHRvEZH6NjlbS3R75kS4EwFURnKYWr6MgycCsIOnxNtwV+ONWaOe7lyrolQf/j14rbpA/cP0Em23MF/FpNGaOdrosBrG2Pz8lJEEDundRT39jgYl8czJg5jfCEaKe+EDN3A6bqBTnu0VAppw4QMqMyifajmCe+EDqW8UsLVCnYVLHDXRXUoQdidwbS1fxuEb8rJdJxB3pwGAIeQTTNXV7hvyUu9WqYNmd3uOp4ff4B7BezJZ47fkRd4/LnBIKq3uG8wi1NZFH8LLy5W+gmC5ZDc62aoFL01vVzCyTg1rCgxBY8HVN6i9LFcFuy6KxXBylRIcA+/HjVSoegcAH+yC8jT07PIBA9XWYALeVw0M1xyUbs8LNGWUeDdp7D9arz4V89+1QdItoOlpisLcdvqkYeY+aDyEgYEcVmFakM4LYphud9KWtwX7jDsTmDR3W9UFONNzzQf3EHTiqa7QQiHUp0JdY3hYaev6aFAOvb7jioGhez/vWzUZ8t4lA3gDmrtkIBTeJQOGcDvXVGZ2p6kWEbx3yUAYepcMANFdMmAIt3NNZSSHZ+IcxwHwmaSTzpv8ajIr9R3dxf7rIzCcdPDkp6r63WwpPZl714I3ZkLpA0A5WJTaYLYFGhW8f9dMXrx4F2budbWGL/PqrqRc0U8w956xFpxb+Cy+mh/a+93NbGzG0zxpRe7JxK6Keb5uCjyfBH3Dbkt7h3zeTziF//VfZgSFJ7tuyNsLaGbJlhvZJ+KpVF+N4fBUmtAdDohwUt0OoR9DODxFZQYzUS0iNEeHp1J9Bs7W0odSLEdNODxFZSRHRPsSnYxu6m9DOdtATjM7+fcS3LFfcM/xnEX6M9Gfmf7U+eTwx5Rz8wMNb9Yw/okPa7w76PCfMHgLi97Jj8Xyc9GW81y3eYLPZidvVvMK5+3Jf5WrF6umtPTs5GJ9hXNU/5h7rNMx1s9fVsvFcfyzUf4frpblH+viqCZEuPMVHqQZvqUZGKu6LOrjGIthxscPgJAj3B+kX9QO8R+kkWhLI7hP2jw/r27z1XHM40Hmx3f/NtU1vE/bfFnOj+O+TXs7yR+ihW36+z/53fVrqHWVt81W7hcALRd5vdjN3nGfnWCk9aJo2S8nZ6/fspNLXEtPTm/BlL6kv6/o7ylYSWyRYTVYYLR9PJ+Zf2CNvkqmTQ9+VUyE9DVigmJOsF4Jija9TZjWEvyaMqHoa8b0rMOvHK/Isd8xgG+/CyZsg2DHRWbjUSf//UFjbpQQyO6FZdh/48V6XtTs6W8NvjMPvj6/zfGY1PewDKB3DCs8ZgSwp69/ECHPuOAhT3ii1PMwfRKGT773WXOPtVmHXuUwA6qbmVmQbLjtw12xemGOa9HidPK2bH9kq/Vy+Q/z25/yb9Uauv/DqnhVLde3K6+dr3VxPcPdrVno/mNxFMmIXTPzTMRpCH2kS1b2WcpVdO8Z/pdtPOM4iP1nUoYbdaXC/Jr+M2h381mGS2zvGef6H1+790xutMujcKNdHnEMM/afZVEkNp7F8f12hYw2+AkZb/ATcRZu1I2z7P67iSTMwo1nPL3fpyIR2X35RCJTvvFMJRvyJVGyWTdONuRLknjjPZI0ut+nIsk2+kqkYbTxHqlMN/ilKvHmFaDZclnUesJj/jTOyZPzqmqZpKmOSUZMugtj9DlgPX8FCMZn33335sPbfwEXWiDsdXIAAA==&lt;/data&gt;
        &lt;length&gt;7920&lt;/length&gt;
        &lt;position&gt;1&lt;/position&gt;
        &lt;sys_attachment display_value="CA_Spectrum.pdf" sys_id="523a638bdba94010d0cb5385ca961907"&gt;523a638bdba94010d0cb5385ca961907&lt;/sys_attachment&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-12-11 01:17:44&lt;/sys_created_on&gt;
        &lt;sys_id&gt;163a638bdba94010d0cb5385ca961907&lt;/sys_id&gt;
    &lt;/sys_attachment_doc&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-05 21:33:48</sys_created_on>
        <sys_id>137555162fe7991448dca1fef699b69e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CA_Spectrum</sys_name>
        <sys_package display_value="Markdown Documents" source="x_58056_md_docs">7ac0b5344f212300ecf18c318110c745</sys_package>
        <sys_policy/>
        <sys_scope display_value="Markdown Documents">7ac0b5344f212300ecf18c318110c745</sys_scope>
        <sys_update_name>sys_metadata_link_137555162fe7991448dca1fef699b69e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-05 21:33:48</sys_updated_on>
        <tablename>x_58056_md_docs_markdown_source</tablename>
    </sys_metadata_link>
</record_update>
