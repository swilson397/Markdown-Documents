<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>unload.demo</directory>
        <documentkey>4e02dfa04f40b700ecf18c318110c72d</documentkey>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="x_58056_md_docs_markdown_source">
    <x_58056_md_docs_markdown_source action="INSERT_OR_UPDATE">
        <abstract_syntax_tree>{
    "type": "Program",
    "body": [
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "JavadocToMarkdown"
                    },
                    "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "Literal",
                                        "value": "use strict",
                                        "raw": "\"use strict\""
                                    },
                                    "directive": "use strict"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "self"
                                            },
                                            "init": {
                                                "type": "ThisExpression"
                                            }
                                        }
                                    ],
                                    "kind": "var"
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "fromDoc"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "code"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "headingsLevel"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "fnAddTagsMarkdown"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "codeName"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "description"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "sections"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "sections"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "getSections"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "code"
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "codeName"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "out"
                                                    },
                                                    "right": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "Identifier",
                                                    "name": "codeName"
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "Identifier",
                                                                                    "name": "stringRepeat"
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": "#",
                                                                                        "raw": "\"#\""
                                                                                    },
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "headingsLevel"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": " ",
                                                                                "raw": "\" \""
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Identifier",
                                                                            "name": "codeName"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "stringRepeat"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "value": "#",
                                                                                    "raw": "\"#\""
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "headingsLevel"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": " Documentation",
                                                                            "raw": "\" Documentation\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "Identifier",
                                                    "name": "description"
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "Literal",
                                                                            "value": "\n",
                                                                            "raw": "\"\\n\""
                                                                        },
                                                                        "right": {
                                                                            "type": "Identifier",
                                                                            "name": "description"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ForStatement",
                                                "init": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 0,
                                                        "raw": "0"
                                                    }
                                                },
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "&lt;",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "sections"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                        }
                                                    }
                                                },
                                                "update": {
                                                    "type": "UpdateExpression",
                                                    "operator": "++",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "prefix": false
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "fromSection"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "sections"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "headingsLevel"
                                                                            },
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "fnAddTagsMarkdown"
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "out"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "join"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "",
                                                                "raw": "\"\""
                                                            }
                                                        ]
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "\n",
                                                        "raw": "\"\\n\""
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "fromStaticTypesDoc"
                                            }
                                        },
                                        "right": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "headingsLevel"
                                                }
                                            ],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "fromDoc"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "headingsLevel"
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "tag"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "assocBuffer"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "tokens"
                                                                                        },
                                                                                        "init": null
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "SwitchStatement",
                                                                                "discriminant": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tag"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "key"
                                                                                    }
                                                                                },
                                                                                "cases": [
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "abstract",
                                                                                            "raw": "\"abstract\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Abstract",
                                                                                                            "raw": "\"Abstract\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "access",
                                                                                            "raw": "\"access\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Access",
                                                                                                            "raw": "\"Access\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "author",
                                                                                            "raw": "\"author\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Author",
                                                                                                            "raw": "\"Author\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "constructor",
                                                                                            "raw": "\"constructor\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Constructor",
                                                                                                            "raw": "\"Constructor\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "copyright",
                                                                                            "raw": "\"copyright\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Copyright",
                                                                                                            "raw": "\"Copyright\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "deprec",
                                                                                            "raw": "\"deprec\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "deprecated",
                                                                                            "raw": "\"deprecated\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Deprecated",
                                                                                                            "raw": "\"Deprecated\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "example",
                                                                                            "raw": "\"example\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Example",
                                                                                                            "raw": "\"Example\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "exception",
                                                                                            "raw": "\"exception\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "throws",
                                                                                            "raw": "\"throws\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 2,
                                                                                                                "raw": "2"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Exceptions",
                                                                                                            "raw": "\"Exceptions\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "+",
                                                                                                                    "left": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "`",
                                                                                                                        "raw": "\"`\""
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "tokens"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": 0,
                                                                                                                            "raw": "0"
                                                                                                                        }
                                                                                                                    }
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "` — ",
                                                                                                                    "raw": "\"` — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 1,
                                                                                                                    "raw": "1"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "exports",
                                                                                            "raw": "\"exports\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Exports",
                                                                                                            "raw": "\"Exports\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "license",
                                                                                            "raw": "\"license\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "License",
                                                                                                            "raw": "\"License\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "link",
                                                                                            "raw": "\"link\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Link",
                                                                                                            "raw": "\"Link\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "name",
                                                                                            "raw": "\"name\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Alias",
                                                                                                            "raw": "\"Alias\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "package",
                                                                                            "raw": "\"package\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Package",
                                                                                                            "raw": "\"Package\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "param",
                                                                                            "raw": "\"param\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 2,
                                                                                                                "raw": "2"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Parameters",
                                                                                                            "raw": "\"Parameters\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "+",
                                                                                                                    "left": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "`",
                                                                                                                        "raw": "\"`\""
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "tokens"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": 0,
                                                                                                                            "raw": "0"
                                                                                                                        }
                                                                                                                    }
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "` — ",
                                                                                                                    "raw": "\"` — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 1,
                                                                                                                    "raw": "1"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "private",
                                                                                            "raw": "\"private\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Private",
                                                                                                            "raw": "\"Private\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "return",
                                                                                            "raw": "\"return\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "returns",
                                                                                            "raw": "\"returns\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Returns",
                                                                                                            "raw": "\"Returns\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "see",
                                                                                            "raw": "\"see\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "See also",
                                                                                                            "raw": "\"See also\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "since",
                                                                                            "raw": "\"since\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Since",
                                                                                                            "raw": "\"Since\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "static",
                                                                                            "raw": "\"static\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Static",
                                                                                                            "raw": "\"Static\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "subpackage",
                                                                                            "raw": "\"subpackage\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Sub-package",
                                                                                                            "raw": "\"Sub-package\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "this",
                                                                                            "raw": "\"this\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "This",
                                                                                                            "raw": "\"This\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "`",
                                                                                                                    "raw": "\"`\""
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": false,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "tag"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "value"
                                                                                                                    }
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "`",
                                                                                                                "raw": "\"`\""
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "todo",
                                                                                            "raw": "\"todo\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "To-do",
                                                                                                            "raw": "\"To-do\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "version",
                                                                                            "raw": "\"version\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Version",
                                                                                                            "raw": "\"Version\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": null,
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        }
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "fromDynamicTypesDoc"
                                            }
                                        },
                                        "right": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "headingsLevel"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "fnFormatType"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "fnFormatTypeAndName"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "codeName"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "description"
                                                }
                                            ],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "fromDoc"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "headingsLevel"
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "tag"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "assocBuffer"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "tokens"
                                                                                        },
                                                                                        "init": null
                                                                                    }
                                                                                ],
                                                                                "kind": "var"
                                                                            },
                                                                            {
                                                                                "type": "SwitchStatement",
                                                                                "discriminant": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tag"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "key"
                                                                                    }
                                                                                },
                                                                                "cases": [
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "abstract",
                                                                                            "raw": "\"abstract\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Abstract",
                                                                                                            "raw": "\"Abstract\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "access",
                                                                                            "raw": "\"access\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Access",
                                                                                                            "raw": "\"Access\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "author",
                                                                                            "raw": "\"author\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Author",
                                                                                                            "raw": "\"Author\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "constructor",
                                                                                            "raw": "\"constructor\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Constructor",
                                                                                                            "raw": "\"Constructor\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "copyright",
                                                                                            "raw": "\"copyright\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Copyright",
                                                                                                            "raw": "\"Copyright\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "deprec",
                                                                                            "raw": "\"deprec\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "deprecated",
                                                                                            "raw": "\"deprecated\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Deprecated",
                                                                                                            "raw": "\"Deprecated\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "example",
                                                                                            "raw": "\"example\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Example",
                                                                                                            "raw": "\"Example\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "exception",
                                                                                            "raw": "\"exception\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "throws",
                                                                                            "raw": "\"throws\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 2,
                                                                                                                "raw": "2"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Exceptions",
                                                                                                            "raw": "\"Exceptions\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "fnFormatType"
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "tokens"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": 0,
                                                                                                                                "raw": "0"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": " — ",
                                                                                                                    "raw": "\" — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 1,
                                                                                                                    "raw": "1"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "exports",
                                                                                            "raw": "\"exports\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Exports",
                                                                                                            "raw": "\"Exports\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "license",
                                                                                            "raw": "\"license\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "License",
                                                                                                            "raw": "\"License\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "link",
                                                                                            "raw": "\"link\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Link",
                                                                                                            "raw": "\"Link\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "name",
                                                                                            "raw": "\"name\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Alias",
                                                                                                            "raw": "\"Alias\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "package",
                                                                                            "raw": "\"package\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Package",
                                                                                                            "raw": "\"Package\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "param",
                                                                                            "raw": "\"param\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 3,
                                                                                                                "raw": "3"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Parameters",
                                                                                                            "raw": "\"Parameters\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "fnFormatTypeAndName"
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "tokens"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": 0,
                                                                                                                                "raw": "0"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "tokens"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": 1,
                                                                                                                                "raw": "1"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": " — ",
                                                                                                                    "raw": "\" — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 2,
                                                                                                                    "raw": "2"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "private",
                                                                                            "raw": "\"private\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Private",
                                                                                                            "raw": "\"Private\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": null,
                                                                                                            "raw": "null"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "return",
                                                                                            "raw": "\"return\""
                                                                                        },
                                                                                        "consequent": []
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "returns",
                                                                                            "raw": "\"returns\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 2,
                                                                                                                "raw": "2"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Returns",
                                                                                                            "raw": "\"Returns\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "fnFormatType"
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "tokens"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": 0,
                                                                                                                                "raw": "0"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": " — ",
                                                                                                                    "raw": "\" — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 1,
                                                                                                                    "raw": "1"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "see",
                                                                                            "raw": "\"see\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "See also",
                                                                                                            "raw": "\"See also\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "since",
                                                                                            "raw": "\"since\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Since",
                                                                                                            "raw": "\"Since\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "static",
                                                                                            "raw": "\"static\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Static",
                                                                                                            "raw": "\"Static\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "subpackage",
                                                                                            "raw": "\"subpackage\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Sub-package",
                                                                                                            "raw": "\"Sub-package\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "this",
                                                                                            "raw": "\"this\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "This",
                                                                                                            "raw": "\"This\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "`",
                                                                                                                    "raw": "\"`\""
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": false,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "tag"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "value"
                                                                                                                    }
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "`",
                                                                                                                "raw": "\"`\""
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "todo",
                                                                                            "raw": "\"todo\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "To-do",
                                                                                                            "raw": "\"To-do\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "var",
                                                                                            "raw": "\"var\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "tokens"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "stringTokenize"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": false,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tag"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "value"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "raw": "/\\s+/g",
                                                                                                                "regex": {
                                                                                                                    "pattern": "\\s+",
                                                                                                                    "flags": "g"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 2,
                                                                                                                "raw": "2"
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Type",
                                                                                                            "raw": "\"Type\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "fnFormatType"
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "tokens"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": 0,
                                                                                                                                "raw": "0"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": " — ",
                                                                                                                    "raw": "\" — \""
                                                                                                                }
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "tokens"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 1,
                                                                                                                    "raw": "1"
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": {
                                                                                            "type": "Literal",
                                                                                            "value": "version",
                                                                                            "raw": "\"version\""
                                                                                        },
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "addToBuffer"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Version",
                                                                                                            "raw": "\"Version\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "tag"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "value"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchCase",
                                                                                        "test": null,
                                                                                        "consequent": [
                                                                                            {
                                                                                                "type": "BreakStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "codeName"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "description"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        }
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "fromJavadoc"
                                            }
                                        },
                                        "right": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "headingsLevel"
                                                }
                                            ],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "self"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "fromStaticTypesDoc"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "headingsLevel"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        }
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "fromPHPDoc"
                                            }
                                        },
                                        "right": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "headingsLevel"
                                                }
                                            ],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "self"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "fromDynamicTypesDoc"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "headingsLevel"
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "type"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "Literal",
                                                                                            "value": "`",
                                                                                            "raw": "\"`\""
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "type"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "`",
                                                                                        "raw": "\"`\""
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "type"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "name"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Literal",
                                                                                            "raw": "/^\\$([a-zA-Z0-9_$]+)$/",
                                                                                            "regex": {
                                                                                                "pattern": "^\\$([a-zA-Z0-9_$]+)$",
                                                                                                "flags": ""
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "test"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "name"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ReturnStatement",
                                                                                            "argument": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "`",
                                                                                                                "raw": "\"`\""
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "name"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "` — `",
                                                                                                            "raw": "\"` — `\""
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "type"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "`",
                                                                                                    "raw": "\"`\""
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ReturnStatement",
                                                                                            "argument": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "`",
                                                                                                        "raw": "\"`\""
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "type"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "`",
                                                                                                    "raw": "\"`\""
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        }
                                    }
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "fromJSDoc"
                                            }
                                        },
                                        "right": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "headingsLevel"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "codeName"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "description"
                                                }
                                            ],
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "self"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "fromDynamicTypesDoc"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "headingsLevel"
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "type"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "Literal",
                                                                                            "value": "`",
                                                                                            "raw": "\"`\""
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "type"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "substr"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": 1,
                                                                                                    "raw": "1"
                                                                                                },
                                                                                                {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "-",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "type"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "length"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": 2,
                                                                                                        "raw": "2"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "`",
                                                                                        "raw": "\"`\""
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                },
                                                                {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "type"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "name"
                                                                        }
                                                                    ],
                                                                    "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                            {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Literal",
                                                                                            "raw": "/^\\{([^{}]+)\\}$/",
                                                                                            "regex": {
                                                                                                "pattern": "^\\{([^{}]+)\\}$",
                                                                                                "flags": ""
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "test"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "type"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ReturnStatement",
                                                                                            "argument": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "`",
                                                                                                                "raw": "\"`\""
                                                                                                            },
                                                                                                            "right": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "name"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "` — `",
                                                                                                            "raw": "\"` — `\""
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "type"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "substr"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": 1,
                                                                                                                "raw": "1"
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "-",
                                                                                                                "left": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": false,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "type"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "length"
                                                                                                                    }
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 2,
                                                                                                                    "raw": "2"
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "`",
                                                                                                    "raw": "\"`\""
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ReturnStatement",
                                                                                            "argument": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "`",
                                                                                                        "raw": "\"`\""
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "type"
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "`",
                                                                                                    "raw": "\"`\""
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "generator": false,
                                                                    "expression": false,
                                                                    "async": false
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "codeName"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "description"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                        }
                                    }
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "fromSection"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "section"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "headingsLevel"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "fnAddTagsMarkdown"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "assocBuffer"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "description"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "field"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "p"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "t"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "tags"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "out"
                                                    },
                                                    "right": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "field"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "getFieldDeclaration"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "section"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "line"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "field"
                                                    },
                                                    "prefix": true
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Literal",
                                                                "value": "",
                                                                "raw": "\"\""
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "\n\n",
                                                            "raw": "\"\\n\\n\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "stringRepeat"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Literal",
                                                                                "value": "#",
                                                                                "raw": "\"#\""
                                                                            },
                                                                            {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "headingsLevel"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": " `",
                                                                        "raw": "\" `\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Identifier",
                                                                    "name": "field"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "`",
                                                                "raw": "\"`\""
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "docCommentParts"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "section"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "doc"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "split"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "raw": "/^(?:\\t| )*?\\*(?:\\t| )*?(?=@)/m",
                                                                    "regex": {
                                                                        "pattern": "^(?:\\t| )*?\\*(?:\\t| )*?(?=@)",
                                                                        "flags": "m"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "rawMainDescription"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "docCommentParts"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "shift"
                                                                }
                                                            },
                                                            "arguments": []
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "rawTags"
                                                        },
                                                        "init": {
                                                            "type": "Identifier",
                                                            "name": "docCommentParts"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "description"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "getDocDescription"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "rawMainDescription"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "description"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "\n\n",
                                                                        "raw": "\"\\n\\n\""
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "description"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "tags"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "getDocTags"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "rawTags"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "tags"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "\n",
                                                                        "raw": "\"\\n\""
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "assocBuffer"
                                                                },
                                                                "right": {
                                                                    "type": "ObjectExpression",
                                                                    "properties": []
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "ForStatement",
                                                            "init": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "t"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                }
                                                            },
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&lt;",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "t"
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "tags"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "length"
                                                                    }
                                                                }
                                                            },
                                                            "update": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "t"
                                                                },
                                                                "prefix": false
                                                            },
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "fnAddTagsMarkdown"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "tags"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "t"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "assocBuffer"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ForInStatement",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "p"
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "assocBuffer"
                                                            },
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "assocBuffer"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "hasOwnProperty"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "p"
                                                                                }
                                                                            ]
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "out"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "fromTagGroup"
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "p"
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "assocBuffer"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "p"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "each": false
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "join"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "fromTagGroup"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "name"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "entries"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "j"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "out"
                                                    },
                                                    "right": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "\n",
                                                            "raw": "\"\\n\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "==",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "name"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "Parameters",
                                                        "raw": "\"Parameters\""
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "Literal",
                                                                                "value": "**",
                                                                                "raw": "\"**\""
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "name"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "**",
                                                                            "raw": "\"**\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "\n\n| Name | Type | Description |",
                                                                        "raw": "\"\\n\\n| Name | Type | Description |\""
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "\n| --- | --- | --- |",
                                                                        "raw": "\"\\n| --- | --- | --- |\""
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ForStatement",
                                                            "init": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                }
                                                            },
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&lt;",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "entries"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "length"
                                                                    }
                                                                }
                                                            },
                                                            "update": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                },
                                                                "prefix": false
                                                            },
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "parts"
                                                                                },
                                                                                "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "entries"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "split"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "value": "—",
                                                                                            "raw": "\"—\""
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "entryLine"
                                                                                },
                                                                                "init": {
                                                                                    "type": "Literal",
                                                                                    "value": "\n| ",
                                                                                    "raw": "\"\\n| \""
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "ForStatement",
                                                                        "init": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "j"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        },
                                                                        "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "&lt;",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "j"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 3,
                                                                                "raw": "3"
                                                                            }
                                                                        },
                                                                        "update": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "j"
                                                                            },
                                                                            "prefix": false
                                                                        },
                                                                        "body": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "LogicalExpression",
                                                                                        "operator": "&amp;&amp;",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "&lt;",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "j"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "parts"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "length"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "UnaryExpression",
                                                                                            "operator": "!",
                                                                                            "argument": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "gs"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "nil"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "parts"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "j"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "prefix": true
                                                                                        }
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "entryLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "parts"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "j"
                                                                                                            }
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": " | ",
                                                                                                            "raw": "\" | \""
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "entryLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "... | ",
                                                                                                        "raw": "\"... | \""
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "entryLine"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "out"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "\n",
                                                                        "raw": "\"\\n\""
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "name"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "Returns",
                                                            "raw": "\"Returns\""
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "out"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "push"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "Literal",
                                                                                    "value": "**",
                                                                                    "raw": "\"**\""
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "name"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "**",
                                                                                "raw": "\"**\""
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "out"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "push"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "Literal",
                                                                                "value": "\n ",
                                                                                "raw": "\"\\n \""
                                                                            },
                                                                            "right": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "entries"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 0,
                                                                                    "raw": "0"
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "out"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "push"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "\n",
                                                                            "raw": "\"\\n\""
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "LogicalExpression",
                                                                    "operator": "&amp;&amp;",
                                                                    "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "entries"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "length"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "1"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "===",
                                                                        "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "entries"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": null,
                                                                            "raw": "null"
                                                                        }
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "out"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "push"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": " * **",
                                                                                                "raw": "\" * **\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "name"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "**",
                                                                                            "raw": "\"**\""
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "out"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "push"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": " * **",
                                                                                                "raw": "\" * **\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "name"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": ":**",
                                                                                            "raw": "\":**\""
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "&gt;",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "entries"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "length"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": 1,
                                                                                    "raw": "1"
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "ForStatement",
                                                                                        "init": {
                                                                                            "type": "AssignmentExpression",
                                                                                            "operator": "=",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": 0,
                                                                                                "raw": "0"
                                                                                            }
                                                                                        },
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "&lt;",
                                                                                            "left": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "entries"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "length"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        "update": {
                                                                                            "type": "UpdateExpression",
                                                                                            "operator": "++",
                                                                                            "argument": {
                                                                                                "type": "Identifier",
                                                                                                "name": "i"
                                                                                            },
                                                                                            "prefix": false
                                                                                        },
                                                                                        "body": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "ExpressionStatement",
                                                                                                    "expression": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "out"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "push"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": "\n",
                                                                                                                "raw": "\"\\n\""
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "ExpressionStatement",
                                                                                                    "expression": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "out"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "push"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "   * ",
                                                                                                                    "raw": "\"   * \""
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": true,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "entries"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "i"
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": {
                                                                                "type": "IfStatement",
                                                                                "test": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "===",
                                                                                    "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "entries"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "length"
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": 1,
                                                                                        "raw": "1"
                                                                                    }
                                                                                },
                                                                                "consequent": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                        {
                                                                                            "type": "ExpressionStatement",
                                                                                            "expression": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "out"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "push"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": " ",
                                                                                                            "raw": "\" \""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "entries"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 0,
                                                                                                                "raw": "0"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "alternate": null
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "join"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "",
                                                            "raw": "\"\""
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "getSections"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "code"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "codeName"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "docLine"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "fieldDeclaration"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "fullRegex"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "protoTypeFound"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": false,
                                                            "raw": "false"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "init": {
                                                            "type": "ArrayExpression",
                                                            "elements": []
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "\\/\\*\\*([^]*?)\\*\\/([^{;/]+)",
                                                            "raw": "\"\\\\/\\\\*\\\\*([^]*?)\\\\*\\\\/([^{;/]+)\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "gs"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "nil"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "codeName"
                                                            }
                                                        ]
                                                    },
                                                    "prefix": true
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regexList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "Literal",
                                                                                "value": "(",
                                                                                "raw": "\"(\""
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "codeName"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Literal",
                                                                            "value": "\\.[^{;/]+)",
                                                                            "raw": "\"\\\\.[^{;/]+)\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "(.*\\s*:\\s*function[^{;/]+)",
                                                            "raw": "\"(.*\\\\s*:\\\\s*function[^{;/]+)\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "\\s*(.*)\\s*=\\s*(function[^{;/]+)",
                                                            "raw": "\"\\\\s*(.*)\\\\s*=\\\\s*(function[^{;/]+)\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": ".*\\s*(function\\s*\\([^{;/]+)",
                                                            "raw": "\".*\\\\s*(function\\\\s*\\\\([^{;/]+)\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "regexList"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "value": ".*\\s*(function\\s+[^{;/]+)",
                                                            "raw": "\".*\\\\s*(function\\\\s+[^{;/]+)\""
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "gs"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "info"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "Literal",
                                                                "value": "Regex = ",
                                                                "raw": "\"Regex = \""
                                                            },
                                                            "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regexList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "join"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "|",
                                                                        "raw": "\"|\""
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "regex"
                                                    },
                                                    "right": {
                                                        "type": "NewExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "RegExp"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regexList"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "join"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "|",
                                                                        "raw": "\"|\""
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "gm",
                                                                "raw": "\"gm\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "out"
                                                    },
                                                    "right": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "WhileStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "regex"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "exec"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "m"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "index"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regex"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "lastIndex"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "regex"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lastIndex"
                                                                                }
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "1"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "LogicalExpression",
                                                                            "operator": "&amp;&amp;",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "UnaryExpression",
                                                                                    "operator": "typeof",
                                                                                    "argument": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 2,
                                                                                            "raw": "2"
                                                                                        }
                                                                                    },
                                                                                    "prefix": true
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "string",
                                                                                    "raw": "\"string\""
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "!==",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": 2,
                                                                                        "raw": "2"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": null,
                                                                                    "raw": "null"
                                                                                }
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "fieldDeclaration"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "m"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Literal",
                                                                                                        "value": 2,
                                                                                                        "raw": "2"
                                                                                                    }
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "trim"
                                                                                                }
                                                                                            },
                                                                                            "arguments": []
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "m"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": 1,
                                                                                                "raw": "1"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Literal",
                                                                                                "raw": "/^import\\s+/",
                                                                                                "regex": {
                                                                                                    "pattern": "^import\\s+",
                                                                                                    "flags": ""
                                                                                                }
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "test"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ContinueStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                },
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "===",
                                                                                        "left": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "docLine"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "indexOf"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": "*",
                                                                                                    "raw": "\"*\""
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "UnaryExpression",
                                                                                            "operator": "-",
                                                                                            "argument": {
                                                                                                "type": "Literal",
                                                                                                "value": 1,
                                                                                                "raw": "1"
                                                                                            },
                                                                                            "prefix": true
                                                                                        }
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "docLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "*",
                                                                                                            "raw": "\"*\""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "docLine"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "docLine"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "replace"
                                                                                                }
                                                                                            },
                                                                                            "arguments": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "raw": "/\\*[ ]*$/gm",
                                                                                                    "regex": {
                                                                                                        "pattern": "\\*[ ]*$",
                                                                                                        "flags": "gm"
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "value": "* &lt;p&gt;",
                                                                                                    "raw": "\"* &lt;p&gt;\""
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "gs"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "info"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Groups 1 and 2: line=",
                                                                                                            "raw": "\"Groups 1 and 2: line=\""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "fieldDeclaration"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": " docLine=",
                                                                                                        "raw": "\" docLine=\""
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "docLine"
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "out"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "ObjectExpression",
                                                                                                "properties": [
                                                                                                    {
                                                                                                        "type": "Property",
                                                                                                        "key": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "line"
                                                                                                        },
                                                                                                        "computed": false,
                                                                                                        "value": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "fieldDeclaration"
                                                                                                        },
                                                                                                        "kind": "init",
                                                                                                        "method": false,
                                                                                                        "shorthand": false
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "Property",
                                                                                                        "key": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "doc"
                                                                                                        },
                                                                                                        "computed": false,
                                                                                                        "value": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "docLine"
                                                                                                        },
                                                                                                        "kind": "init",
                                                                                                        "method": false,
                                                                                                        "shorthand": false
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 3,
                                                                                "raw": "3"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 3,
                                                                            "raw": "3"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "str"
                                                                                },
                                                                                "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "m"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": 3,
                                                                                                "raw": "3"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "trim"
                                                                                        }
                                                                                    },
                                                                                    "arguments": []
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "&gt;=",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "str"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "indexOf"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": ".prototype",
                                                                                        "raw": "\".prototype\""
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "protoTypeFound"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": true,
                                                                                            "raw": "true"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "protoTypeFound"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "fieldDeclaration"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 3,
                                                                                            "raw": "3"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "docLine"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "\n     * \n     * &lt;p&gt;",
                                                                                "raw": "\"\\n     * \\n     * &lt;p&gt;\""
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "gs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "info"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": "Group 3: line=",
                                                                                                "raw": "\"Group 3: line=\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": " docLine=",
                                                                                            "raw": "\" docLine=\""
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "docLine"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "properties": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "line"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "doc"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "docLine"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 4,
                                                                                "raw": "4"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 4,
                                                                            "raw": "4"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "fieldDeclaration"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 4,
                                                                                            "raw": "4"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "functionDetails"
                                                                                },
                                                                                "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parsePrototypeFunctionDeclaration"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "fieldDeclaration"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "docLine"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "\n     * ",
                                                                                        "raw": "\"\\n     * \""
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionDetails"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionName"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "\n     * &lt;p&gt;",
                                                                                    "raw": "\"\\n     * &lt;p&gt;\""
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "functionDetails"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parameters"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "forEach"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "FunctionExpression",
                                                                                    "id": null,
                                                                                    "params": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "parm"
                                                                                        }
                                                                                    ],
                                                                                    "body": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "docLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "\n     * @param {string} ",
                                                                                                            "raw": "\"\\n     * @param {string} \""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "parm"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "generator": false,
                                                                                    "expression": false,
                                                                                    "async": false
                                                                                },
                                                                                {
                                                                                    "type": "ThisExpression"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "findReturn"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "code"
                                                                                },
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "index"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "+=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "\n     * @returns {string}",
                                                                                            "raw": "\"\\n     * @returns {string}\""
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "gs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "info"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": "Group 4: line=",
                                                                                                "raw": "\"Group 4: line=\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": " docLine=",
                                                                                            "raw": "\" docLine=\""
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "docLine"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "properties": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "line"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "doc"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "docLine"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 5,
                                                                                "raw": "5"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 5,
                                                                            "raw": "5"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "LogicalExpression",
                                                                            "operator": "&amp;&amp;",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "UnaryExpression",
                                                                                    "operator": "typeof",
                                                                                    "argument": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 6,
                                                                                            "raw": "6"
                                                                                        }
                                                                                    },
                                                                                    "prefix": true
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "string",
                                                                                    "raw": "\"string\""
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "!==",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": 6,
                                                                                        "raw": "6"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": null,
                                                                                    "raw": "null"
                                                                                }
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "fieldDeclaration"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "m"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Literal",
                                                                                                        "value": 6,
                                                                                                        "raw": "6"
                                                                                                    }
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "trim"
                                                                                                }
                                                                                            },
                                                                                            "arguments": []
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "varParts"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "m"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 5,
                                                                                                                    "raw": "5"
                                                                                                                }
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "trim"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": []
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "split"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Literal",
                                                                                                        "value": " ",
                                                                                                        "raw": "\" \""
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "funcName"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": true,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "varParts"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "-",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "varParts"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "length"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": 1,
                                                                                                        "raw": "1"
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "functionDetails"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "parseFunctionDeclaration"
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "fieldDeclaration"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "UnaryExpression",
                                                                                        "operator": "!",
                                                                                        "argument": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "functionDetails"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "valid"
                                                                                            }
                                                                                        },
                                                                                        "prefix": true
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ContinueStatement",
                                                                                                "label": null
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                },
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "gs"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "nil"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "funcName"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "funcName"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "functionDetails"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "functionName"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "\n     * ",
                                                                                                    "raw": "\"\\n     * \""
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "funcName"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": "\n     * &lt;p&gt;",
                                                                                                "raw": "\"\\n     * &lt;p&gt;\""
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "functionDetails"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "parameters"
                                                                                                }
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "forEach"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "FunctionExpression",
                                                                                                "id": null,
                                                                                                "params": [
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "parm"
                                                                                                    }
                                                                                                ],
                                                                                                "body": {
                                                                                                    "type": "BlockStatement",
                                                                                                    "body": [
                                                                                                        {
                                                                                                            "type": "ExpressionStatement",
                                                                                                            "expression": {
                                                                                                                "type": "AssignmentExpression",
                                                                                                                "operator": "+=",
                                                                                                                "left": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "docLine"
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "+",
                                                                                                                    "left": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "\n     * @param {string} ",
                                                                                                                        "raw": "\"\\n     * @param {string} \""
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "parm"
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                "generator": false,
                                                                                                "expression": false,
                                                                                                "async": false
                                                                                            },
                                                                                            {
                                                                                                "type": "ThisExpression"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "Identifier",
                                                                                            "name": "findReturn"
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "code"
                                                                                            },
                                                                                            {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "m"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "index"
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "docLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "\n     * @returns {string}",
                                                                                                        "raw": "\"\\n     * @returns {string}\""
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "gs"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "info"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "Groups 5 and 6: line=",
                                                                                                            "raw": "\"Groups 5 and 6: line=\""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "fieldDeclaration"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": " docLine=",
                                                                                                        "raw": "\" docLine=\""
                                                                                                    }
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "docLine"
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "out"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "ObjectExpression",
                                                                                                "properties": [
                                                                                                    {
                                                                                                        "type": "Property",
                                                                                                        "key": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "line"
                                                                                                        },
                                                                                                        "computed": false,
                                                                                                        "value": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "fieldDeclaration"
                                                                                                        },
                                                                                                        "kind": "init",
                                                                                                        "method": false,
                                                                                                        "shorthand": false
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "Property",
                                                                                                        "key": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "doc"
                                                                                                        },
                                                                                                        "computed": false,
                                                                                                        "value": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "docLine"
                                                                                                        },
                                                                                                        "kind": "init",
                                                                                                        "method": false,
                                                                                                        "shorthand": false
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 7,
                                                                                "raw": "7"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 7,
                                                                            "raw": "7"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "fieldDeclaration"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 7,
                                                                                            "raw": "7"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "functionDetails"
                                                                                },
                                                                                "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parseFunctionDeclaration"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "fieldDeclaration"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "functionDetails"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "valid"
                                                                                }
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "docLine"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "\n     * ",
                                                                                        "raw": "\"\\n     * \""
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionDetails"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionName"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "\n     * &lt;p&gt;",
                                                                                    "raw": "\"\\n     * &lt;p&gt;\""
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "functionDetails"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parameters"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "forEach"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "FunctionExpression",
                                                                                    "id": null,
                                                                                    "params": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "parm"
                                                                                        }
                                                                                    ],
                                                                                    "body": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "docLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "\n     * @param {string} ",
                                                                                                            "raw": "\"\\n     * @param {string} \""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "parm"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "generator": false,
                                                                                    "expression": false,
                                                                                    "async": false
                                                                                },
                                                                                {
                                                                                    "type": "ThisExpression"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "findReturn"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "code"
                                                                                },
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "index"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "+=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "\n     * @returns {string}",
                                                                                            "raw": "\"\\n     * @returns {string}\""
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "gs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "info"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": "Group 7: line=",
                                                                                                "raw": "\"Group 7: line=\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": " docLine=",
                                                                                            "raw": "\" docLine=\""
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "docLine"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "properties": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "line"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "doc"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "docLine"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 8,
                                                                                "raw": "8"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 8,
                                                                            "raw": "8"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "fieldDeclaration"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 8,
                                                                                            "raw": "8"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                            {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "functionDetails"
                                                                                },
                                                                                "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parseFunctionDeclaration"
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "fieldDeclaration"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "var"
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "functionDetails"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "valid"
                                                                                }
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "docLine"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "\n     * ",
                                                                                        "raw": "\"\\n     * \""
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionDetails"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "functionName"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "\n     * &lt;p&gt;",
                                                                                    "raw": "\"\\n     * &lt;p&gt;\""
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "functionDetails"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parameters"
                                                                                    }
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "forEach"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "FunctionExpression",
                                                                                    "id": null,
                                                                                    "params": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "parm"
                                                                                        }
                                                                                    ],
                                                                                    "body": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "+=",
                                                                                                    "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "docLine"
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "\n     * @param {string} ",
                                                                                                            "raw": "\"\\n     * @param {string} \""
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "parm"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "generator": false,
                                                                                    "expression": false,
                                                                                    "async": false
                                                                                },
                                                                                {
                                                                                    "type": "ThisExpression"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "findReturn"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "code"
                                                                                },
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "index"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "+=",
                                                                                        "left": {
                                                                                            "type": "Identifier",
                                                                                            "name": "docLine"
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "\n     * @returns {string}",
                                                                                            "raw": "\"\\n     * @returns {string}\""
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "gs"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "info"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                                "type": "Literal",
                                                                                                "value": "Group 8: line=",
                                                                                                "raw": "\"Group 8: line=\""
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Literal",
                                                                                            "value": " docLine=",
                                                                                            "raw": "\" docLine=\""
                                                                                        }
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "docLine"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "properties": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "line"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "fieldDeclaration"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "key": {
                                                                                                "type": "Identifier",
                                                                                                "name": "doc"
                                                                                            },
                                                                                            "computed": false,
                                                                                            "value": {
                                                                                                "type": "Identifier",
                                                                                                "name": "docLine"
                                                                                            },
                                                                                            "kind": "init",
                                                                                            "method": false,
                                                                                            "shorthand": false
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "out"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "findReturn"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "code"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "index"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "returnFound"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": false,
                                                            "raw": "false"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "codeSnippet"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "code"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "substr"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "index"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "endIndex"
                                                        },
                                                        "init": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "codeSnippet"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "level"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "value": 0,
                                                            "raw": "0"
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "raw": "/({)|(})/gm",
                                                            "regex": {
                                                                "pattern": "({)|(})",
                                                                "flags": "gm"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "WhileStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "regex"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "exec"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "codeSnippet"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "m"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "index"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regex"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "lastIndex"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "regex"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lastIndex"
                                                                                }
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "1"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "level"
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 2,
                                                                                "raw": "2"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 2,
                                                                            "raw": "2"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "&gt;",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "level"
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 0,
                                                                                "raw": "0"
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "UpdateExpression",
                                                                                        "operator": "--",
                                                                                        "argument": {
                                                                                            "type": "Identifier",
                                                                                            "name": "level"
                                                                                        },
                                                                                        "prefix": false
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&lt;=",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "level"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "endIndex"
                                                                            },
                                                                            "right": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "m"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "index"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "BreakStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "gs"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "info"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "Literal",
                                                                "value": "Function curly level = ",
                                                                "raw": "\"Function curly level = \""
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "level"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "codeSnippet"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "codeSnippet"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "substr"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                },
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "endIndex"
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex2"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "raw": "/\\s+return\\s+/gm",
                                                            "regex": {
                                                                "pattern": "\\s+return\\s+",
                                                                "flags": "gm"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "BinaryExpression",
                                                    "operator": "&gt;=",
                                                    "left": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "codeSnippet"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "search"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "regex2"
                                                            }
                                                        ]
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 0,
                                                        "raw": "0"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "parsePrototypeFunctionDeclaration"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "fieldDeclaration"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "result"
                                                        },
                                                        "init": {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Identifier",
                                                                        "name": "functionName"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "Literal",
                                                                        "value": "",
                                                                        "raw": "\"\""
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Identifier",
                                                                        "name": "parameters"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "ArrayExpression",
                                                                        "elements": []
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "fieldDeclaration"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "match"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "raw": "/^[^:]+/",
                                                                    "regex": {
                                                                        "pattern": "^[^:]+",
                                                                        "flags": ""
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "result"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "functionName"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "str"
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trim"
                                                            }
                                                        },
                                                        "arguments": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "fieldDeclaration"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "match"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "raw": "/\\((.*?)\\)/",
                                                                "regex": {
                                                                    "pattern": "\\((.*?)\\)",
                                                                    "flags": ""
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "parms"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "str"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "split"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": ",",
                                                                    "raw": "\",\""
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "parms"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "forEach"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "parm"
                                                                }
                                                            ],
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "parm"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parm"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "parm"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "result"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "parameters"
                                                                                                }
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "parm"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "generator": false,
                                                            "expression": false,
                                                            "async": false
                                                        },
                                                        {
                                                            "type": "ThisExpression"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "parseFunctionDeclaration"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "fieldDeclaration"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "result"
                                                        },
                                                        "init": {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Identifier",
                                                                        "name": "valid"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "Literal",
                                                                        "value": true,
                                                                        "raw": "true"
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Identifier",
                                                                        "name": "functionName"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "Literal",
                                                                        "value": "",
                                                                        "raw": "\"\""
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Identifier",
                                                                        "name": "parameters"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "ArrayExpression",
                                                                        "elements": []
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "fieldDeclaration"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "match"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "raw": "/function\\s*(.*)\\s*\\(/",
                                                                    "regex": {
                                                                        "pattern": "function\\s*(.*)\\s*\\(",
                                                                        "flags": ""
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        },
                                                        "prefix": true
                                                    },
                                                    "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "&lt;",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "str"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": 2,
                                                            "raw": "2"
                                                        }
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "result"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "valid"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": false,
                                                                    "raw": "false"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "result"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "functionName"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "str"
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                }
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trim"
                                                            }
                                                        },
                                                        "arguments": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "gs"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "nil"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "functionName"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "result"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "functionName"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": "Self invoking",
                                                                    "raw": "\"Self invoking\""
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "str"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "fieldDeclaration"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "match"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "raw": "/\\((.*?)\\)/",
                                                                "regex": {
                                                                    "pattern": "\\((.*?)\\)",
                                                                    "flags": ""
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "parms"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "str"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "split"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": ",",
                                                                    "raw": "\",\""
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "parms"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "forEach"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "parm"
                                                                }
                                                            ],
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "parm"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "parm"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "trim"
                                                                                    }
                                                                                },
                                                                                "arguments": []
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "parm"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "result"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "parameters"
                                                                                                }
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "push"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "parm"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "generator": false,
                                                            "expression": false,
                                                            "async": false
                                                        },
                                                        {
                                                            "type": "ThisExpression"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "getFieldDeclaration"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "line"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "raw": "/^([^\\{;]+)(.*?)$/gm",
                                                            "regex": {
                                                                "pattern": "^([^\\{;]+)(.*?)$",
                                                                "flags": "gm"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "WhileStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "regex"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "exec"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "line"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "m"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "index"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regex"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "lastIndex"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "regex"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lastIndex"
                                                                                }
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "1"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "1"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ReturnStatement",
                                                                        "argument": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "cleanSingleLine"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": 1,
                                                                                        "raw": "1"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Literal",
                                                    "value": "",
                                                    "raw": "\"\""
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "replaceHTMLWithMarkdown"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "html"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "html"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "replace"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Literal",
                                                            "raw": "/&lt;\\s*?code\\s*?&gt;(.*?)&lt;\\s*?\\/\\s*?code\\s*?&gt;/g",
                                                            "regex": {
                                                                "pattern": "&lt;\\s*?code\\s*?&gt;(.*?)&lt;\\s*?\\/\\s*?code\\s*?&gt;",
                                                                "flags": "g"
                                                            }
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "`$1`",
                                                            "raw": "\"`$1`\""
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "getDocDescription"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "docLines"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "raw": "/^(\\t| )*?\\*(\\t| )+(.*?)$/gm",
                                                            "regex": {
                                                                "pattern": "^(\\t| )*?\\*(\\t| )+(.*?)$",
                                                                "flags": "gm"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": {
                                                            "type": "ArrayExpression",
                                                            "elements": []
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "WhileStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "regex"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "exec"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "docLines"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "m"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "index"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "regex"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "lastIndex"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "regex"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lastIndex"
                                                                                }
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&amp;&amp;",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "typeof",
                                                                        "argument": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "m"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": 3,
                                                                                "raw": "3"
                                                                            }
                                                                        },
                                                                        "prefix": true
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "string",
                                                                        "raw": "\"string\""
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "!==",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "m"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": 3,
                                                                            "raw": "3"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": null,
                                                                        "raw": "null"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "m"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 3,
                                                                                    "raw": "3"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "Identifier",
                                                                                    "name": "cleanLine"
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 3,
                                                                                            "raw": "3"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "m"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": 3,
                                                                                    "raw": "3"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "Identifier",
                                                                                    "name": "replaceHTMLWithMarkdown"
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 3,
                                                                                            "raw": "3"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "out"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": 3,
                                                                                        "raw": "3"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "cleanLine"
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "out"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "join"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": " ",
                                                                            "raw": "\" \""
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "replace"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "raw": "/&lt;(\\/)?p&gt;/gi",
                                                                    "regex": {
                                                                        "pattern": "&lt;(\\/)?p&gt;",
                                                                        "flags": "gi"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "\n\n",
                                                                    "raw": "\"\\n\\n\""
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "getDocTags"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "docLines"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                        },
                                                        "init": {
                                                            "type": "Literal",
                                                            "raw": "/^(?:\\t| )*?@([a-zA-Z]+)([\\s\\S]*)/",
                                                            "regex": {
                                                                "pattern": "^(?:\\t| )*?@([a-zA-Z]+)([\\s\\S]*)",
                                                                "flags": ""
                                                            }
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "out"
                                                        },
                                                        "init": {
                                                            "type": "ArrayExpression",
                                                            "elements": []
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ForStatement",
                                                "init": {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                            },
                                                            "init": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "&lt;",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "docLines"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                        }
                                                    }
                                                },
                                                "update": {
                                                    "type": "UpdateExpression",
                                                    "operator": "++",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "prefix": false
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "m"
                                                                },
                                                                "right": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "regex"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "exec"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "docLines"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "i"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "!==",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "m"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": null,
                                                                    "raw": "null"
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "LogicalExpression",
                                                                            "operator": "&amp;&amp;",
                                                                            "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "UnaryExpression",
                                                                                    "operator": "typeof",
                                                                                    "argument": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 1,
                                                                                            "raw": "1"
                                                                                        }
                                                                                    },
                                                                                    "prefix": true
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "string",
                                                                                    "raw": "\"string\""
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "!==",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": 1,
                                                                                        "raw": "1"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": null,
                                                                                    "raw": "null"
                                                                                }
                                                                            }
                                                                        },
                                                                        "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                                {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                        "type": "LogicalExpression",
                                                                                        "operator": "&amp;&amp;",
                                                                                        "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "===",
                                                                                            "left": {
                                                                                                "type": "UnaryExpression",
                                                                                                "operator": "typeof",
                                                                                                "argument": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "m"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Literal",
                                                                                                        "value": 2,
                                                                                                        "raw": "2"
                                                                                                    }
                                                                                                },
                                                                                                "prefix": true
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": "string",
                                                                                                "raw": "\"string\""
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "!==",
                                                                                            "left": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": true,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "m"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 2,
                                                                                                    "raw": "2"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Literal",
                                                                                                "value": null,
                                                                                                "raw": "null"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "BlockStatement",
                                                                                        "body": [
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "m"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 2,
                                                                                                            "raw": "2"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "m"
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": 2,
                                                                                                                    "raw": "2"
                                                                                                                }
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "trim"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": []
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "operator": "=",
                                                                                                    "left": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "m"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 2,
                                                                                                            "raw": "2"
                                                                                                        }
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": false,
                                                                                                            "object": {
                                                                                                                "type": "CallExpression",
                                                                                                                "callee": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": false,
                                                                                                                    "object": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "m"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": 2,
                                                                                                                            "raw": "2"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "split"
                                                                                                                    }
                                                                                                                },
                                                                                                                "arguments": [
                                                                                                                    {
                                                                                                                        "type": "Literal",
                                                                                                                        "raw": "/[\\r\\n]{1,2}(?:\\t| )*?\\*(?:\\t| )*/",
                                                                                                                        "regex": {
                                                                                                                            "pattern": "[\\r\\n]{1,2}(?:\\t| )*?\\*(?:\\t| )*",
                                                                                                                            "flags": ""
                                                                                                                        }
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "join"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": "\n\n     ",
                                                                                                                "raw": "\"\\n\\n     \""
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            {
                                                                                                "type": "ExpressionStatement",
                                                                                                "expression": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "out"
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "push"
                                                                                                        }
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                        {
                                                                                                            "type": "ObjectExpression",
                                                                                                            "properties": [
                                                                                                                {
                                                                                                                    "type": "Property",
                                                                                                                    "key": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "key"
                                                                                                                    },
                                                                                                                    "computed": false,
                                                                                                                    "value": {
                                                                                                                        "type": "CallExpression",
                                                                                                                        "callee": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "cleanSingleLine"
                                                                                                                        },
                                                                                                                        "arguments": [
                                                                                                                            {
                                                                                                                                "type": "MemberExpression",
                                                                                                                                "computed": true,
                                                                                                                                "object": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "m"
                                                                                                                                },
                                                                                                                                "property": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": 1,
                                                                                                                                    "raw": "1"
                                                                                                                                }
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    },
                                                                                                                    "kind": "init",
                                                                                                                    "method": false,
                                                                                                                    "shorthand": false
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "Property",
                                                                                                                    "key": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "value"
                                                                                                                    },
                                                                                                                    "computed": false,
                                                                                                                    "value": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "m"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": 2,
                                                                                                                            "raw": "2"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "kind": "init",
                                                                                                                    "method": false,
                                                                                                                    "shorthand": false
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "alternate": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        "alternate": null
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "out"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "cleanLine"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "line"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "line"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "trim"
                                                            }
                                                        },
                                                        "arguments": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "line"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "replace"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "raw": "/ *([\\n\\r\\t]) */gm",
                                                                "regex": {
                                                                    "pattern": " *([\\n\\r\\t]) *",
                                                                    "flags": "gm"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "$1",
                                                                "raw": "\"$1\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "line"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "replace"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "raw": "/[ ]{2,}/g",
                                                                "regex": {
                                                                    "pattern": "[ ]{2,}",
                                                                    "flags": "g"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": " ",
                                                                "raw": "\" \""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "cleanSingleLine"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "line"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "cleanLine"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "line"
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                    },
                                                    "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "line"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "replace"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "raw": "/(\\n|\\r|\\t)/g",
                                                                "regex": {
                                                                    "pattern": "(\\n|\\r|\\t)",
                                                                    "flags": "g"
                                                                }
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": " ",
                                                                "raw": "\" \""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "addToBuffer"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "buffer"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "key"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "value"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "typeof",
                                                            "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "buffer"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "key"
                                                                }
                                                            },
                                                            "prefix": true
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "undefined",
                                                            "raw": "\"undefined\""
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "buffer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": null,
                                                            "raw": "null"
                                                        }
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "buffer"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                "alternate": null
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "buffer"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                            }
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "value"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "stringTokenize"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "splitByRegex"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "limit"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "counter"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "start"
                                                        },
                                                        "init": null
                                                    },
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "tokens"
                                                        },
                                                        "init": null
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "tokens"
                                                    },
                                                    "right": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "counter"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "raw": "1"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "start"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 0,
                                                        "raw": "0"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "WhileStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "m"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "splitByRegex"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "exec"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "str"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "===",
                                                                "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "m"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "index"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "splitByRegex"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "lastIndex"
                                                                    }
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "splitByRegex"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lastIndex"
                                                                                }
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "IfStatement",
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "&lt;",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "counter"
                                                                },
                                                                "right": {
                                                                    "type": "Identifier",
                                                                    "name": "limit"
                                                                }
                                                            },
                                                            "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "tokens"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "push"
                                                                                }
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "str"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "substring"
                                                                                        }
                                                                                    },
                                                                                    "arguments": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "start"
                                                                                        },
                                                                                        {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "m"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "index"
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "start"
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "m"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "index"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "m"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": 0,
                                                                                            "raw": "0"
                                                                                        }
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "length"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "alternate": null
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "counter"
                                                                },
                                                                "prefix": false
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "tokens"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "push"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "str"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "substring"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "start"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ForStatement",
                                                "init": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "tokens"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                        }
                                                    }
                                                },
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "&lt;",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "limit"
                                                    }
                                                },
                                                "update": {
                                                    "type": "UpdateExpression",
                                                    "operator": "++",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                    },
                                                    "prefix": false
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "tokens"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "push"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Literal",
                                                                        "value": "",
                                                                        "raw": "\"\""
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "Identifier",
                                                    "name": "tokens"
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                },
                                {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "stringRepeat"
                                    },
                                    "params": [
                                        {
                                            "type": "Identifier",
                                            "name": "str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "count"
                                        }
                                    ],
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                            "type": "NewExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "Array"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "count"
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "join"
                                                        }
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "str"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }
            ],
            "kind": "var"
        }
    ],
    "sourceType": "script"
}</abstract_syntax_tree>
        <added_manually>false</added_manually>
        <api_markdown>## JavadocToMarkdown

### `var JavadocToMarkdown = function()`

Generate Markdown from your Javadoc, PHPDoc or JSDoc comments

Usage: Create a new instance of `JavadocToMarkdown` and then call either `fromJavadoc()`, `fromPHPDoc()` or `fromJSDoc()`

 * **Constructor**

### `function fromDoc(code, headingsLevel, fnAddTagsMarkdown, codeName, description)`

Generates Markdown documentation from code on a more abstract level

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 
| `fnAddTagsMarkdown`  |  `function`  |  the function that processes doc tags and generates the Markdown documentation | 

**Returns**
 `string` — the Markdown documentation


### `this.fromStaticTypesDoc = function(code, headingsLevel)`

Generates Markdown documentation from a statically typed language's doc comments

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 

**Returns**
 `string` — the Markdown documentation


### `function(tag, assocBuffer)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `tag`  |  `string`  |   | 
| `assocBuffer`  |  `string`  |   | 

**Returns**
 `string` — 


### `this.fromDynamicTypesDoc = function(  code,  headingsLevel,  fnFormatType,  fnFormatTypeAndName,  codeName,  description  )`

Generates Markdown documentation from a dynamically typed language's doc comments

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 
| `fnFormatType`  |  `function`  |  the function that formats a type information (single argument) | 
| `fnFormatTypeAndName`  |  `function`  |  the function that formats type and name information (two arguments) | 

**Returns**
 `string` — the Markdown documentation


### `function(tag, assocBuffer)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `tag`  |  `string`  |   | 
| `assocBuffer`  |  `string`  |   | 


### `this.fromJavadoc = function(code, headingsLevel)`

Generates Markdown documentation from Javadoc comments

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 

**Returns**
 `string` — the Markdown documentation


### `this.fromPHPDoc = function(code, headingsLevel)`

Generates Markdown documentation from PHPDoc comments

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 

**Returns**
 `string` — the Markdown documentation


### `function(type)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `type`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(type, name)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `type`  |  `string`  |   | 
| `name`  |  `string`  |   | 

**Returns**
 `string` — 


### `this.fromJSDoc = function(code, headingsLevel, codeName, description)`

Generates Markdown documentation from JSDoc comments

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |  the code that contains doc comments | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 

**Returns**
 `string` — the Markdown documentation


### `function(type)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `type`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(type, name)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `type`  |  `string`  |   | 
| `name`  |  `string`  |   | 

**Returns**
 `string` — 


### `function fromSection(section, headingsLevel, fnAddTagsMarkdown)`

Generates Markdown documentation from a given section

The function processes units of documentation, a line of code with accompanying doc comment

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `section`  |  `object`  |  the section that consists of code line and doc comment | 
| `headingsLevel`  |  `number`  |  the headings level to use as the base (1-6) | 
| `fnAddTagsMarkdown`  |  `function`  |  the function that processes doc tags and generates the Markdown documentation | 

**Returns**
 `string` — the Markdown documentation


### `function fromTagGroup(name, entries)`

fromTagGroup

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `name`  |  `string`  |   | 
| `entries`  |  `string`  |   | 

**Returns**
 `string` — 


### `function getSections(code, codeName)`

getSections

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |   | 
| `codeName`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function findReturn(code, index)`

findReturn

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `code`  |  `string`  |   | 
| `index`  |  `string`  |   | 

**Returns**
 `string` — 


### `function  if (level &gt; 0)`

if

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `level`  |  `string`  |  &gt; 0 | 


### `function parsePrototypeFunctionDeclaration(fieldDeclaration)`

parsePrototypeFunctionDeclaration

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `fieldDeclaration`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function parseFunctionDeclaration(fieldDeclaration)`

parseFunctionDeclaration

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `fieldDeclaration`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(parm)`

Self invoking

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `parm`  |  `string`  |   | 


### `function getFieldDeclaration(line)`

getFieldDeclaration

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `line`  |  `string`  |   | 

**Returns**
 `string` — 


### `function replaceHTMLWithMarkdown(html)`

replaceHTMLWithMarkdown

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `html`  |  `string`  |   | 

**Returns**
 `string` — 


### `function getDocDescription(docLines)`

getDocDescription

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `docLines`  |  `string`  |   | 

**Returns**
 `string` — 


### `function getDocTags(docLines)`

getDocTags

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `docLines`  |  `string`  |   | 

**Returns**
 `string` — 


### `function cleanLine(line)`

cleanLine

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `line`  |  `string`  |   | 

**Returns**
 `string` — 


### `function cleanSingleLine(line)`

cleanSingleLine

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `line`  |  `string`  |   | 

**Returns**
 `string` — 


### `function addToBuffer(buffer, key, value)`

addToBuffer

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `buffer`  |  `string`  |   | 
| `key`  |  `string`  |   | 
| `value`  |  `string`  |   | 


### `function(splitByRegex, limit)`

String.prototype.tokenize

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `splitByRegex`  |  `string`  |   | 
| `limit`  |  `string`  |   | 

**Returns**
 `string` — 


### `function stringTokenize(str, splitByRegex, limit)`

stringTokenize

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `str`  |  `string`  |   | 
| `splitByRegex`  |  `string`  |   | 
| `limit`  |  `string`  |   | 

**Returns**
 `string` — 


### `function(count)`

String.prototype.repeat

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `count`  |  `string`  |   | 

**Returns**
 `string` — 


### `function stringRepeat(str, count)`

stringRepeat

**Parameters**

| Name | Type | Description |
| --- | --- | --- |
| `str`  |  `string`  |   | 
| `count`  |  `string`  |   | 

**Returns**
 `string` — 

</api_markdown>
        <html/>
        <markdown_document display_value="KB0010043 v0.01">31bb13674f322300ecf18c318110c77e</markdown_document>
        <markdown_link/>
        <order/>
        <project_code_document_version/>
        <remote>false</remote>
        <remote_json/>
        <remote_source_id/>
        <show_html>false</show_html>
        <show_markdown>false</show_markdown>
        <source_description/>
        <source_id>3080db964f532300ecf18c318110c7be</source_id>
        <source_key/>
        <source_name/>
        <source_script_field>script</source_script_field>
        <source_table>sys_script_include</source_table>
        <source_text/>
        <source_type>Document</source_type>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2019-03-04 19:21:54</sys_created_on>
        <sys_id>4e02dfa04f40b700ecf18c318110c72d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2019-03-04 19:21:54</sys_updated_on>
    </x_58056_md_docs_markdown_source>
</record_update>
]]></payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-05 21:32:51</sys_created_on>
        <sys_id>d5459dd22fe7991448dca1fef699b6bb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Markdown Documents" source="x_58056_md_docs">7ac0b5344f212300ecf18c318110c745</sys_package>
        <sys_policy/>
        <sys_scope display_value="Markdown Documents">7ac0b5344f212300ecf18c318110c745</sys_scope>
        <sys_update_name>sys_metadata_link_d5459dd22fe7991448dca1fef699b6bb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-05 21:32:51</sys_updated_on>
        <tablename>x_58056_md_docs_markdown_source</tablename>
    </sys_metadata_link>
</record_update>
