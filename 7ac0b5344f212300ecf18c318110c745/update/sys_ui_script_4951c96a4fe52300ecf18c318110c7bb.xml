<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_58056_md_docs.modes_min</name>
        <script>/*! Editor.md v1.5.0 | modes.min.js | Open source online markdown editor. | MIT License | By: Pandao | https://github.com/pandao/editor.md | 2015-06-09 */&#13;
!(function(e) {&#13;
    "object" == typeof exports &amp;&amp; "object" == typeof module ? e(require("../lib/codemirror")) : "function" == typeof define &amp;&amp; define.amd         ? define(["../lib/codemirror"], e) : e(CodeMirror);&#13;
})(function(e) {&#13;
    "use strict";&#13;
    e.modeInfo = [&#13;
        { name: "APL", mime: "text/apl", mode: "apl", ext: ["dyalog", "apl"] },&#13;
        {&#13;
            name: "Asterisk",&#13;
            mime: "text/x-asterisk",&#13;
            mode: "asterisk",&#13;
            file: /^extensions\\.conf$/i&#13;
        },&#13;
        { name: "C", mime: "text/x-csrc", mode: "clike", ext: ["c", "h"] },&#13;
        {&#13;
            name: "C++",&#13;
            mime: "text/x-c++src",&#13;
            mode: "clike",&#13;
            ext: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],&#13;
            alias: ["cpp"]&#13;
        },&#13;
        { name: "Cobol", mime: "text/x-cobol", mode: "cobol", ext: ["cob", "cpy"] },&#13;
        { name: "C#", mime: "text/x-csharp", mode: "clike", ext: ["cs"], alias: ["csharp"] },&#13;
        { name: "Clojure", mime: "text/x-clojure", mode: "clojure", ext: ["clj"] },&#13;
        {&#13;
            name: "CoffeeScript",&#13;
            mime: "text/x-coffeescript",&#13;
            mode: "coffeescript",&#13;
            ext: ["coffee"],&#13;
            alias: ["coffee", "coffee-script"]&#13;
        },&#13;
        {&#13;
            name: "Common Lisp",&#13;
            mime: "text/x-common-lisp",&#13;
            mode: "commonlisp",&#13;
            ext: ["cl", "lisp", "el"],&#13;
            alias: ["lisp"]&#13;
        },&#13;
        {&#13;
            name: "Cypher",&#13;
            mime: "application/x-cypher-query",&#13;
            mode: "cypher",&#13;
            ext: ["cyp", "cypher"]&#13;
        },&#13;
        { name: "Cython", mime: "text/x-cython", mode: "python", ext: ["pyx", "pxd", "pxi"] },&#13;
        { name: "CSS", mime: "text/css", mode: "css", ext: ["css"] },&#13;
        { name: "CQL", mime: "text/x-cassandra", mode: "sql", ext: ["cql"] },&#13;
        { name: "D", mime: "text/x-d", mode: "d", ext: ["d"] },&#13;
        { name: "Dart", mimes: ["application/dart", "text/x-dart"], mode: "dart", ext: ["dart"] },&#13;
        { name: "diff", mime: "text/x-diff", mode: "diff", ext: ["diff", "patch"] },&#13;
        { name: "Django", mime: "text/x-django", mode: "django" },&#13;
        { name: "Dockerfile", mime: "text/x-dockerfile", mode: "dockerfile", file: /^Dockerfile$/ },&#13;
        { name: "DTD", mime: "application/xml-dtd", mode: "dtd", ext: ["dtd"] },&#13;
        { name: "Dylan", mime: "text/x-dylan", mode: "dylan", ext: ["dylan", "dyl", "intr"] },&#13;
        { name: "EBNF", mime: "text/x-ebnf", mode: "ebnf" },&#13;
        { name: "ECL", mime: "text/x-ecl", mode: "ecl", ext: ["ecl"] },&#13;
        { name: "Eiffel", mime: "text/x-eiffel", mode: "eiffel", ext: ["e"] },&#13;
        {&#13;
            name: "Embedded Javascript",&#13;
            mime: "application/x-ejs",&#13;
            mode: "htmlembedded",&#13;
            ext: ["ejs"]&#13;
        },&#13;
        { name: "Embedded Ruby", mime: "application/x-erb", mode: "htmlembedded", ext: ["erb"] },&#13;
        { name: "Erlang", mime: "text/x-erlang", mode: "erlang", ext: ["erl"] },&#13;
        { name: "Forth", mime: "text/x-forth", mode: "forth", ext: ["forth", "fth", "4th"] },&#13;
        {&#13;
            name: "Fortran",&#13;
            mime: "text/x-fortran",&#13;
            mode: "fortran",&#13;
            ext: ["f", "for", "f77", "f90"]&#13;
        },&#13;
        { name: "F#", mime: "text/x-fsharp", mode: "mllike", ext: ["fs"], alias: ["fsharp"] },&#13;
        { name: "Gas", mime: "text/x-gas", mode: "gas", ext: ["s"] },&#13;
        { name: "Gherkin", mime: "text/x-feature", mode: "gherkin", ext: ["feature"] },&#13;
        {&#13;
            name: "GitHub Flavored Markdown",&#13;
            mime: "text/x-gfm",&#13;
            mode: "gfm",&#13;
            file: /^(readme|contributing|history).md$/i&#13;
        },&#13;
        { name: "Go", mime: "text/x-go", mode: "go", ext: ["go"] },&#13;
        { name: "Groovy", mime: "text/x-groovy", mode: "groovy", ext: ["groovy"] },&#13;
        { name: "HAML", mime: "text/x-haml", mode: "haml", ext: ["haml"] },&#13;
        { name: "Haskell", mime: "text/x-haskell", mode: "haskell", ext: ["hs"] },&#13;
        { name: "Haxe", mime: "text/x-haxe", mode: "haxe", ext: ["hx"] },&#13;
        { name: "HXML", mime: "text/x-hxml", mode: "haxe", ext: ["hxml"] },&#13;
        {&#13;
            name: "ASP.NET",&#13;
            mime: "application/x-aspx",&#13;
            mode: "htmlembedded",&#13;
            ext: ["aspx"],&#13;
            alias: ["asp", "aspx"]&#13;
        },&#13;
        {&#13;
            name: "HTML",&#13;
            mime: "text/html",&#13;
            mode: "htmlmixed",&#13;
            ext: ["html", "htm"],&#13;
            alias: ["xhtml"]&#13;
        },&#13;
        { name: "HTTP", mime: "message/http", mode: "http" },&#13;
        { name: "IDL", mime: "text/x-idl", mode: "idl", ext: ["pro"] },&#13;
        { name: "Jade", mime: "text/x-jade", mode: "jade", ext: ["jade"] },&#13;
        { name: "Java", mime: "text/x-java", mode: "clike", ext: ["java"] },&#13;
        {&#13;
            name: "Java Server Pages",&#13;
            mime: "application/x-jsp",&#13;
            mode: "htmlembedded",&#13;
            ext: ["jsp"],&#13;
            alias: ["jsp"]&#13;
        },&#13;
        {&#13;
            name: "JavaScript",&#13;
            mimes: [&#13;
                "text/javascript",&#13;
                "text/ecmascript",&#13;
                "application/javascript",&#13;
                "application/x-javascript",&#13;
                "application/ecmascript"&#13;
            ],&#13;
            mode: "javascript",&#13;
            ext: ["js"],&#13;
            alias: ["ecmascript", "js", "node"]&#13;
        },&#13;
        {&#13;
            name: "JSON",&#13;
            mimes: ["application/json", "application/x-json"],&#13;
            mode: "javascript",&#13;
            ext: ["json", "map"],&#13;
            alias: ["json5"]&#13;
        },&#13;
        {&#13;
            name: "JSON-LD",&#13;
            mime: "application/ld+json",&#13;
            mode: "javascript",&#13;
            ext: ["jsonld"],&#13;
            alias: ["jsonld"]&#13;
        },&#13;
        { name: "Jinja2", mime: "null", mode: "jinja2" },&#13;
        { name: "Julia", mime: "text/x-julia", mode: "julia", ext: ["jl"] },&#13;
        { name: "Kotlin", mime: "text/x-kotlin", mode: "kotlin", ext: ["kt"] },&#13;
        { name: "LESS", mime: "text/x-less", mode: "css", ext: ["less"] },&#13;
        {&#13;
            name: "LiveScript",&#13;
            mime: "text/x-livescript",&#13;
            mode: "livescript",&#13;
            ext: ["ls"],&#13;
            alias: ["ls"]&#13;
        },&#13;
        { name: "Lua", mime: "text/x-lua", mode: "lua", ext: ["lua"] },&#13;
        {&#13;
            name: "Markdown",&#13;
            mime: "text/x-markdown",&#13;
            mode: "markdown",&#13;
            ext: ["markdown", "md", "mkd"]&#13;
        },&#13;
        { name: "mIRC", mime: "text/mirc", mode: "mirc" },&#13;
        { name: "MariaDB SQL", mime: "text/x-mariadb", mode: "sql" },&#13;
        { name: "Modelica", mime: "text/x-modelica", mode: "modelica", ext: ["mo"] },&#13;
        { name: "MS SQL", mime: "text/x-mssql", mode: "sql" },&#13;
        { name: "MySQL", mime: "text/x-mysql", mode: "sql" },&#13;
        { name: "Nginx", mime: "text/x-nginx-conf", mode: "nginx", file: /nginx.*\.conf$/i },&#13;
        { name: "NTriples", mime: "text/n-triples", mode: "ntriples", ext: ["nt"] },&#13;
        { name: "Objective C", mime: "text/x-objectivec", mode: "clike", ext: ["m", "mm"] },&#13;
        { name: "OCaml", mime: "text/x-ocaml", mode: "mllike", ext: ["ml", "mli", "mll", "mly"] },&#13;
        { name: "Octave", mime: "text/x-octave", mode: "octave", ext: ["m"] },&#13;
        { name: "Pascal", mime: "text/x-pascal", mode: "pascal", ext: ["p", "pas"] },&#13;
        { name: "PEG.js", mime: "null", mode: "pegjs", ext: ["jsonld"] },&#13;
        { name: "Perl", mime: "text/x-perl", mode: "perl", ext: ["pl", "pm"] },&#13;
        {&#13;
            name: "PHP",&#13;
            mime: "application/x-httpd-php",&#13;
            mode: "php",&#13;
            ext: ["php", "php3", "php4", "php5", "phtml"]&#13;
        },&#13;
        { name: "Pig", mime: "text/x-pig", mode: "pig", ext: ["pig"] },&#13;
        {&#13;
            name: "Plain Text",&#13;
            mime: "text/plain",&#13;
            mode: "null",&#13;
            ext: ["txt", "text", "conf", "def", "list", "log"]&#13;
        },&#13;
        { name: "PLSQL", mime: "text/x-plsql", mode: "sql", ext: ["pls"] },&#13;
        {&#13;
            name: "Properties files",&#13;
            mime: "text/x-properties",&#13;
            mode: "properties",&#13;
            ext: ["properties", "ini", "in"],&#13;
            alias: ["ini", "properties"]&#13;
        },&#13;
        { name: "Python", mime: "text/x-python", mode: "python", ext: ["py", "pyw"] },&#13;
        { name: "Puppet", mime: "text/x-puppet", mode: "puppet", ext: ["pp"] },&#13;
        { name: "Q", mime: "text/x-q", mode: "q", ext: ["q"] },&#13;
        { name: "R", mime: "text/x-rsrc", mode: "r", ext: ["r"], alias: ["rscript"] },&#13;
        { name: "reStructuredText", mime: "text/x-rst", mode: "rst", ext: ["rst"], alias: ["rst"] },&#13;
        { name: "RPM Changes", mime: "text/x-rpm-changes", mode: "rpm" },&#13;
        { name: "RPM Spec", mime: "text/x-rpm-spec", mode: "rpm", ext: ["spec"] },&#13;
        {&#13;
            name: "Ruby",&#13;
            mime: "text/x-ruby",&#13;
            mode: "ruby",&#13;
            ext: ["rb"],&#13;
            alias: ["jruby", "macruby", "rake", "rb", "rbx"]&#13;
        },&#13;
        { name: "Rust", mime: "text/x-rustsrc", mode: "rust", ext: ["rs"] },&#13;
        { name: "Sass", mime: "text/x-sass", mode: "sass", ext: ["sass"] },&#13;
        { name: "Scala", mime: "text/x-scala", mode: "clike", ext: ["scala"] },&#13;
        { name: "Scheme", mime: "text/x-scheme", mode: "scheme", ext: ["scm", "ss"] },&#13;
        { name: "SCSS", mime: "text/x-scss", mode: "css", ext: ["scss"] },&#13;
        {&#13;
            name: "Shell",&#13;
            mime: "text/x-sh",&#13;
            mode: "shell",&#13;
            ext: ["sh", "ksh", "bash"],&#13;
            alias: ["bash", "sh", "zsh"]&#13;
        },&#13;
        { name: "Sieve", mime: "application/sieve", mode: "sieve", ext: ["siv", "sieve"] },&#13;
        { name: "Slim", mimes: ["text/x-slim", "application/x-slim"], mode: "slim", ext: ["slim"] },&#13;
        { name: "Smalltalk", mime: "text/x-stsrc", mode: "smalltalk", ext: ["st"] },&#13;
        { name: "Smarty", mime: "text/x-smarty", mode: "smarty", ext: ["tpl"] },&#13;
        { name: "SmartyMixed", mime: "text/x-smarty", mode: "smartymixed" },&#13;
        { name: "Solr", mime: "text/x-solr", mode: "solr" },&#13;
        { name: "Soy", mime: "text/x-soy", mode: "soy", ext: ["soy"], alias: ["closure template"] },&#13;
        {&#13;
            name: "SPARQL",&#13;
            mime: "application/sparql-query",&#13;
            mode: "sparql",&#13;
            ext: ["rq", "sparql"],&#13;
            alias: ["sparul"]&#13;
        },&#13;
        {&#13;
            name: "Spreadsheet",&#13;
            mime: "text/x-spreadsheet",&#13;
            mode: "spreadsheet",&#13;
            alias: ["excel", "formula"]&#13;
        },&#13;
        { name: "SQL", mime: "text/x-sql", mode: "sql", ext: ["sql"] },&#13;
        { name: "MariaDB", mime: "text/x-mariadb", mode: "sql" },&#13;
        { name: "sTeX", mime: "text/x-stex", mode: "stex" },&#13;
        { name: "LaTeX", mime: "text/x-latex", mode: "stex", ext: ["text", "ltx"], alias: ["tex"] },&#13;
        { name: "SystemVerilog", mime: "text/x-systemverilog", mode: "verilog", ext: ["v"] },&#13;
        { name: "Tcl", mime: "text/x-tcl", mode: "tcl", ext: ["tcl"] },&#13;
        { name: "Textile", mime: "text/x-textile", mode: "textile", ext: ["textile"] },&#13;
        { name: "TiddlyWiki ", mime: "text/x-tiddlywiki", mode: "tiddlywiki" },&#13;
        { name: "Tiki wiki", mime: "text/tiki", mode: "tiki" },&#13;
        { name: "TOML", mime: "text/x-toml", mode: "toml", ext: ["toml"] },&#13;
        { name: "Tornado", mime: "text/x-tornado", mode: "tornado" },&#13;
        { name: "Turtle", mime: "text/turtle", mode: "turtle", ext: ["ttl"] },&#13;
        {&#13;
            name: "TypeScript",&#13;
            mime: "application/typescript",&#13;
            mode: "javascript",&#13;
            ext: ["ts"],&#13;
            alias: ["ts"]&#13;
        },&#13;
        { name: "VB.NET", mime: "text/x-vb", mode: "vb", ext: ["vb"] },&#13;
        { name: "VBScript", mime: "text/vbscript", mode: "vbscript", ext: ["vbs"] },&#13;
        { name: "Velocity", mime: "text/velocity", mode: "velocity", ext: ["vtl"] },&#13;
        { name: "Verilog", mime: "text/x-verilog", mode: "verilog", ext: ["v"] },&#13;
        {&#13;
            name: "XML",&#13;
            mimes: ["application/xml", "text/xml"],&#13;
            mode: "xml",&#13;
            ext: ["xml", "xsl", "xsd"],&#13;
            alias: ["rss", "wsdl", "xsd"]&#13;
        },&#13;
        { name: "XQuery", mime: "application/xquery", mode: "xquery", ext: ["xy", "xquery"] },&#13;
        { name: "YAML", mime: "text/x-yaml", mode: "yaml", ext: ["yaml"], alias: ["yml"] },&#13;
        { name: "Z80", mime: "text/x-z80", mode: "z80", ext: ["z80"] }&#13;
    ];&#13;
    for (var t = 0; t &lt; e.modeInfo.length; t++) {&#13;
        var r = e.modeInfo[t];&#13;
        r.mimes &amp;&amp; (r.mime = r.mimes[0]);&#13;
    }&#13;
    (e.findModeByMIME = function(t) {&#13;
        t = t.toLowerCase();&#13;
        for (var r = 0; r &lt; e.modeInfo.length; r++) {&#13;
            var n = e.modeInfo[r];&#13;
            if (n.mime == t) return n;&#13;
            if (n.mimes) for (var i = 0; i &lt; n.mimes.length; i++) if (n.mimes[i] == t) return n;&#13;
        }&#13;
    }),&#13;
        (e.findModeByExtension = function(t) {&#13;
            for (var r = 0; r &lt; e.modeInfo.length; r++) {&#13;
                var n = e.modeInfo[r];&#13;
                if (n.ext) for (var i = 0; i &lt; n.ext.length; i++) if (n.ext[i] == t) return n;&#13;
            }&#13;
        }),&#13;
        (e.findModeByFileName = function(t) {&#13;
            for (var r = 0; r &lt; e.modeInfo.length; r++) {&#13;
                var n = e.modeInfo[r];&#13;
                if (n.file &amp;&amp; n.file.test(t)) return n;&#13;
            }&#13;
            var i = t.lastIndexOf("."),&#13;
                o = i &gt; -1 &amp;&amp; t.substring(i + 1, t.length);&#13;
            return o ? e.findModeByExtension(o) : void 0;&#13;
        }),&#13;
        (e.findModeByName = function(t) {&#13;
            t = t.toLowerCase();&#13;
            for (var r = 0; r &lt; e.modeInfo.length; r++) {&#13;
                var n = e.modeInfo[r];&#13;
                if (n.name.toLowerCase() == t) return n;&#13;
                if (n.alias)&#13;
                    for (var i = 0; i &lt; n.alias.length; i++)&#13;
                        if (n.alias[i].toLowerCase() == t) return n;&#13;
            }&#13;
        });&#13;
}),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e) {&#13;
            for (var t = {}, r = 0; r &lt; e.length; ++r) t[e[r]] = !0;&#13;
            return t;&#13;
        }&#13;
        function r(e, t) {&#13;
            for (var r, n = !1; null != (r = e.next()); ) {&#13;
                if (n &amp;&amp; "/" == r) {&#13;
                    t.tokenize = null;&#13;
                    break;&#13;
                }&#13;
                n = "*" == r;&#13;
            }&#13;
            return ["comment", "comment"];&#13;
        }&#13;
        function n(e, t) {&#13;
            return (&#13;
                e.skipTo("--&gt;") ? (e.match("--&gt;"), (t.tokenize = null)) : e.skipToEnd(),&#13;
                ["comment", "comment"]&#13;
            );&#13;
        }&#13;
        e.defineMode("css", function(t, r) {&#13;
            function n(e, t) {&#13;
                return (m = t), e;&#13;
            }&#13;
            function i(e, t) {&#13;
                var r = e.next();&#13;
                if (g[r]) {&#13;
                    var i = g[r](e, t);&#13;
                    if (i !== !1) return i;&#13;
                }&#13;
                return "@" == r&#13;
                    ? (e.eatWhile(/[\w\\\-]/), n("def", e.current()))&#13;
                    : "=" == r || (("~" == r || "|" == r) &amp;&amp; e.eat("="))&#13;
                        ? n(null, "compare")&#13;
                        : '"' == r || "'" == r&#13;
                            ? ((t.tokenize = o(r)), t.tokenize(e, t))&#13;
                            : "#" == r&#13;
                                ? (e.eatWhile(/[\w\\\-]/), n("atom", "hash"))&#13;
                                : "!" == r&#13;
                                    ? (e.match(/^\s*\w*/), n("keyword", "important"))&#13;
                                    : /\d/.test(r) || ("." == r &amp;&amp; e.eat(/\d/))&#13;
                                        ? (e.eatWhile(/[\w.%]/), n("number", "unit"))&#13;
                                        : "-" !== r&#13;
                                            ? /[,+&gt;*\/]/.test(r)&#13;
                                                ? n(null, "select-op")&#13;
                                                : "." == r &amp;&amp; e.match(/^-?[_a-z][_a-z0-9-]*/i)&#13;
                                                    ? n("qualifier", "qualifier")&#13;
                                                    : /[:;{}\[\]\(\)]/.test(r)&#13;
                                                        ? n(null, r)&#13;
                                                        : ("u" == r &amp;&amp; e.match(/rl(-prefix)?\(/)) ||&#13;
                                                          ("d" == r &amp;&amp; e.match("omain(")) ||&#13;
                                                          ("r" == r &amp;&amp; e.match("egexp("))&#13;
                                                            ? (e.backUp(1),&#13;
                                                              (t.tokenize = a),&#13;
                                                              n("property", "word"))&#13;
                                                            : /[\w\\\-]/.test(r)&#13;
                                                                ? (e.eatWhile(/[\w\\\-]/),&#13;
                                                                  n("property", "word"))&#13;
                                                                : n(null, null)&#13;
                                            : /[\d.]/.test(e.peek())&#13;
                                                ? (e.eatWhile(/[\w.%]/), n("number", "unit"))&#13;
                                                : e.match(/^-[\w\\\-]+/)&#13;
                                                    ? (e.eatWhile(/[\w\\\-]/),&#13;
                                                      e.match(/^\s*:/, !1)&#13;
                                                          ? n("variable-2", "variable-definition")&#13;
                                                          : n("variable-2", "variable"))&#13;
                                                    : e.match(/^\w+-/)&#13;
                                                        ? n("meta", "meta")&#13;
                                                        : void 0;&#13;
            }&#13;
            function o(e) {&#13;
                return function(t, r) {&#13;
                    for (var i, o = !1; null != (i = t.next()); ) {&#13;
                        if (i == e &amp;&amp; !o) {&#13;
                            ")" == e &amp;&amp; t.backUp(1);&#13;
                            break;&#13;
                        }&#13;
                        o = !o &amp;&amp; "\\" == i;&#13;
                    }&#13;
                    return (&#13;
                        (i == e || (!o &amp;&amp; ")" != e)) &amp;&amp; (r.tokenize = null), n("string", "string")&#13;
                    );&#13;
                };&#13;
            }&#13;
            function a(e, t) {&#13;
                return (&#13;
                    e.next(),&#13;
                    e.match(/\s*[\"\')]/, !1) ? (t.tokenize = null) : (t.tokenize = o(")")),&#13;
                    n(null, "(")&#13;
                );&#13;
            }&#13;
            function s(e, t, r) {&#13;
                (this.type = e), (this.indent = t), (this.prev = r);&#13;
            }&#13;
            function l(e, t, r) {&#13;
                return (e.context = new s(r, t.indentation() + p, e.context)), r;&#13;
            }&#13;
            function c(e) {&#13;
                return (e.context = e.context.prev), e.context.type;&#13;
            }&#13;
            function u(e, t, r) {&#13;
                return M[r.context.type](e, t, r);&#13;
            }&#13;
            function d(e, t, r, n) {&#13;
                for (var i = n || 1; i &gt; 0; i--) r.context = r.context.prev;&#13;
                return u(e, t, r);&#13;
            }&#13;
            function f(e) {&#13;
                var t = e.current().toLowerCase();&#13;
                h = S.hasOwnProperty(t) ? "atom" : C.hasOwnProperty(t) ? "keyword" : "variable";&#13;
            }&#13;
            r.propertyKeywords || (r = e.resolveMode("text/css"));&#13;
            var m,&#13;
                h,&#13;
                p = t.indentUnit,&#13;
                g = r.tokenHooks,&#13;
                v = r.documentTypes || {},&#13;
                b = r.mediaTypes || {},&#13;
                y = r.mediaFeatures || {},&#13;
                x = r.propertyKeywords || {},&#13;
                k = r.nonStandardPropertyKeywords || {},&#13;
                w = r.fontProperties || {},&#13;
                _ = r.counterDescriptors || {},&#13;
                C = r.colorKeywords || {},&#13;
                S = r.valueKeywords || {},&#13;
                T = r.allowNested,&#13;
                M = {};&#13;
            return (&#13;
                (M.top = function(e, t, r) {&#13;
                    if ("{" == e) return l(r, t, "block");&#13;
                    if ("}" == e &amp;&amp; r.context.prev) return c(r);&#13;
                    if (/@(media|supports|(-moz-)?document)/.test(e)) return l(r, t, "atBlock");&#13;
                    if (/@(font-face|counter-style)/.test(e))&#13;
                        return (r.stateArg = e), "restricted_atBlock_before";&#13;
                    if (/^@(-(moz|ms|o|webkit)-)?keyframes$/.test(e)) return "keyframes";&#13;
                    if (e &amp;&amp; "@" == e.charAt(0)) return l(r, t, "at");&#13;
                    if ("hash" == e) h = "builtin";&#13;
                    else if ("word" == e) h = "tag";&#13;
                    else {&#13;
                        if ("variable-definition" == e) return "maybeprop";&#13;
                        if ("interpolation" == e) return l(r, t, "interpolation");&#13;
                        if (":" == e) return "pseudo";&#13;
                        if (T &amp;&amp; "(" == e) return l(r, t, "parens");&#13;
                    }&#13;
                    return r.context.type;&#13;
                }),&#13;
                (M.block = function(e, t, r) {&#13;
                    if ("word" == e) {&#13;
                        var n = t.current().toLowerCase();&#13;
                        return x.hasOwnProperty(n)&#13;
                            ? ((h = "property"), "maybeprop")&#13;
                            : k.hasOwnProperty(n)&#13;
                                ? ((h = "string-2"), "maybeprop")&#13;
                                : T&#13;
                                    ? ((h = t.match(/^\s*:(?:\s|$)/, !1) ? "property" : "tag"),&#13;
                                      "block")&#13;
                                    : ((h += " error"), "maybeprop");&#13;
                    }&#13;
                    return "meta" == e&#13;
                        ? "block"&#13;
                        : T || ("hash" != e &amp;&amp; "qualifier" != e)&#13;
                            ? M.top(e, t, r)&#13;
                            : ((h = "error"), "block");&#13;
                }),&#13;
                (M.maybeprop = function(e, t, r) {&#13;
                    return ":" == e ? l(r, t, "prop") : u(e, t, r);&#13;
                }),&#13;
                (M.prop = function(e, t, r) {&#13;
                    if (";" == e) return c(r);&#13;
                    if ("{" == e &amp;&amp; T) return l(r, t, "propBlock");&#13;
                    if ("}" == e || "{" == e) return d(e, t, r);&#13;
                    if ("(" == e) return l(r, t, "parens");&#13;
                    if ("hash" != e || /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(t.current())) {&#13;
                        if ("word" == e) f(t);&#13;
                        else if ("interpolation" == e) return l(r, t, "interpolation");&#13;
                    } else h += " error";&#13;
                    return "prop";&#13;
                }),&#13;
                (M.propBlock = function(e, t, r) {&#13;
                    return "}" == e&#13;
                        ? c(r)&#13;
                        : "word" == e&#13;
                            ? ((h = "property"), "maybeprop")&#13;
                            : r.context.type;&#13;
                }),&#13;
                (M.parens = function(e, t, r) {&#13;
                    return "{" == e || "}" == e&#13;
                        ? d(e, t, r)&#13;
                        : ")" == e&#13;
                            ? c(r)&#13;
                            : "(" == e&#13;
                                ? l(r, t, "parens")&#13;
                                : ("word" == e &amp;&amp; f(t), "parens");&#13;
                }),&#13;
                (M.pseudo = function(e, t, r) {&#13;
                    return "word" == e ? ((h = "variable-3"), r.context.type) : u(e, t, r);&#13;
                }),&#13;
                (M.atBlock = function(e, t, r) {&#13;
                    if ("(" == e) return l(r, t, "atBlock_parens");&#13;
                    if ("}" == e) return d(e, t, r);&#13;
                    if ("{" == e) return c(r) &amp;&amp; l(r, t, T ? "block" : "top");&#13;
                    if ("word" == e) {&#13;
                        var n = t.current().toLowerCase();&#13;
                        h =&#13;
                            "only" == n || "not" == n || "and" == n || "or" == n&#13;
                                ? "keyword"&#13;
                                : v.hasOwnProperty(n)&#13;
                                    ? "tag"&#13;
                                    : b.hasOwnProperty(n)&#13;
                                        ? "attribute"&#13;
                                        : y.hasOwnProperty(n)&#13;
                                            ? "property"&#13;
                                            : x.hasOwnProperty(n)&#13;
                                                ? "property"&#13;
                                                : k.hasOwnProperty(n)&#13;
                                                    ? "string-2"&#13;
                                                    : S.hasOwnProperty(n)&#13;
                                                        ? "atom"&#13;
                                                        : "error";&#13;
                    }&#13;
                    return r.context.type;&#13;
                }),&#13;
                (M.atBlock_parens = function(e, t, r) {&#13;
                    return ")" == e&#13;
                        ? c(r)&#13;
                        : "{" == e || "}" == e&#13;
                            ? d(e, t, r, 2)&#13;
                            : M.atBlock(e, t, r);&#13;
                }),&#13;
                (M.restricted_atBlock_before = function(e, t, r) {&#13;
                    return "{" == e&#13;
                        ? l(r, t, "restricted_atBlock")&#13;
                        : "word" == e &amp;&amp; "@counter-style" == r.stateArg&#13;
                            ? ((h = "variable"), "restricted_atBlock_before")&#13;
                            : u(e, t, r);&#13;
                }),&#13;
                (M.restricted_atBlock = function(e, t, r) {&#13;
                    return "}" == e&#13;
                        ? ((r.stateArg = null), c(r))&#13;
                        : "word" == e&#13;
                            ? ((h =&#13;
                                  ("@font-face" == r.stateArg &amp;&amp;&#13;
                                      !w.hasOwnProperty(t.current().toLowerCase())) ||&#13;
                                  ("@counter-style" == r.stateArg &amp;&amp;&#13;
                                      !_.hasOwnProperty(t.current().toLowerCase()))&#13;
                                      ? "error"&#13;
                                      : "property"),&#13;
                              "maybeprop")&#13;
                            : "restricted_atBlock";&#13;
                }),&#13;
                (M.keyframes = function(e, t, r) {&#13;
                    return "word" == e&#13;
                        ? ((h = "variable"), "keyframes")&#13;
                        : "{" == e&#13;
                            ? l(r, t, "top")&#13;
                            : u(e, t, r);&#13;
                }),&#13;
                (M.at = function(e, t, r) {&#13;
                    return ";" == e&#13;
                        ? c(r)&#13;
                        : "{" == e || "}" == e&#13;
                            ? d(e, t, r)&#13;
                            : ("word" == e ? (h = "tag") : "hash" == e &amp;&amp; (h = "builtin"), "at");&#13;
                }),&#13;
                (M.interpolation = function(e, t, r) {&#13;
                    return "}" == e&#13;
                        ? c(r)&#13;
                        : "{" == e || ";" == e&#13;
                            ? d(e, t, r)&#13;
                            : ("variable" != e &amp;&amp; (h = "error"), "interpolation");&#13;
                }),&#13;
                {&#13;
                    startState: function(e) {&#13;
                        return {&#13;
                            tokenize: null,&#13;
                            state: "top",&#13;
                            stateArg: null,&#13;
                            context: new s("top", e || 0, null)&#13;
                        };&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        if (!t.tokenize &amp;&amp; e.eatSpace()) return null;&#13;
                        var r = (t.tokenize || i)(e, t);&#13;
                        return (&#13;
                            r &amp;&amp; "object" == typeof r &amp;&amp; ((m = r[1]), (r = r[0])),&#13;
                            (h = r),&#13;
                            (t.state = M[t.state](m, e, t)),&#13;
                            h&#13;
                        );&#13;
                    },&#13;
                    indent: function(e, t) {&#13;
                        var r = e.context,&#13;
                            n = t &amp;&amp; t.charAt(0),&#13;
                            i = r.indent;&#13;
                        return (&#13;
                            "prop" != r.type || ("}" != n &amp;&amp; ")" != n) || (r = r.prev),&#13;
                            !r.prev ||&#13;
                                (("}" != n ||&#13;
                                    ("block" != r.type &amp;&amp;&#13;
                                        "top" != r.type &amp;&amp;&#13;
                                        "interpolation" != r.type &amp;&amp;&#13;
                                        "restricted_atBlock" != r.type)) &amp;&amp;&#13;
                                    (")" != n ||&#13;
                                        ("parens" != r.type &amp;&amp; "atBlock_parens" != r.type)) &amp;&amp;&#13;
                                    ("{" != n || ("at" != r.type &amp;&amp; "atBlock" != r.type))) ||&#13;
                                ((i = r.indent - p), (r = r.prev)),&#13;
                            i&#13;
                        );&#13;
                    },&#13;
                    electricChars: "}",&#13;
                    blockCommentStart: "/*",&#13;
                    blockCommentEnd: "*/",&#13;
                    fold: "brace"&#13;
                }&#13;
            );&#13;
        });&#13;
        var i = ["domain", "regexp", "url", "url-prefix"],&#13;
            o = t(i),&#13;
            a = [&#13;
                "all",&#13;
                "aural",&#13;
                "braille",&#13;
                "handheld",&#13;
                "print",&#13;
                "projection",&#13;
                "screen",&#13;
                "tty",&#13;
                "tv",&#13;
                "embossed"&#13;
            ],&#13;
            s = t(a),&#13;
            l = [&#13;
                "width",&#13;
                "min-width",&#13;
                "max-width",&#13;
                "height",&#13;
                "min-height",&#13;
                "max-height",&#13;
                "device-width",&#13;
                "min-device-width",&#13;
                "max-device-width",&#13;
                "device-height",&#13;
                "min-device-height",&#13;
                "max-device-height",&#13;
                "aspect-ratio",&#13;
                "min-aspect-ratio",&#13;
                "max-aspect-ratio",&#13;
                "device-aspect-ratio",&#13;
                "min-device-aspect-ratio",&#13;
                "max-device-aspect-ratio",&#13;
                "color",&#13;
                "min-color",&#13;
                "max-color",&#13;
                "color-index",&#13;
                "min-color-index",&#13;
                "max-color-index",&#13;
                "monochrome",&#13;
                "min-monochrome",&#13;
                "max-monochrome",&#13;
                "resolution",&#13;
                "min-resolution",&#13;
                "max-resolution",&#13;
                "scan",&#13;
                "grid"&#13;
            ],&#13;
            c = t(l),&#13;
            u = [&#13;
                "align-content",&#13;
                "align-items",&#13;
                "align-self",&#13;
                "alignment-adjust",&#13;
                "alignment-baseline",&#13;
                "anchor-point",&#13;
                "animation",&#13;
                "animation-delay",&#13;
                "animation-direction",&#13;
                "animation-duration",&#13;
                "animation-fill-mode",&#13;
                "animation-iteration-count",&#13;
                "animation-name",&#13;
                "animation-play-state",&#13;
                "animation-timing-function",&#13;
                "appearance",&#13;
                "azimuth",&#13;
                "backface-visibility",&#13;
                "background",&#13;
                "background-attachment",&#13;
                "background-clip",&#13;
                "background-color",&#13;
                "background-image",&#13;
                "background-origin",&#13;
                "background-position",&#13;
                "background-repeat",&#13;
                "background-size",&#13;
                "baseline-shift",&#13;
                "binding",&#13;
                "bleed",&#13;
                "bookmark-label",&#13;
                "bookmark-level",&#13;
                "bookmark-state",&#13;
                "bookmark-target",&#13;
                "border",&#13;
                "border-bottom",&#13;
                "border-bottom-color",&#13;
                "border-bottom-left-radius",&#13;
                "border-bottom-right-radius",&#13;
                "border-bottom-style",&#13;
                "border-bottom-width",&#13;
                "border-collapse",&#13;
                "border-color",&#13;
                "border-image",&#13;
                "border-image-outset",&#13;
                "border-image-repeat",&#13;
                "border-image-slice",&#13;
                "border-image-source",&#13;
                "border-image-width",&#13;
                "border-left",&#13;
                "border-left-color",&#13;
                "border-left-style",&#13;
                "border-left-width",&#13;
                "border-radius",&#13;
                "border-right",&#13;
                "border-right-color",&#13;
                "border-right-style",&#13;
                "border-right-width",&#13;
                "border-spacing",&#13;
                "border-style",&#13;
                "border-top",&#13;
                "border-top-color",&#13;
                "border-top-left-radius",&#13;
                "border-top-right-radius",&#13;
                "border-top-style",&#13;
                "border-top-width",&#13;
                "border-width",&#13;
                "bottom",&#13;
                "box-decoration-break",&#13;
                "box-shadow",&#13;
                "box-sizing",&#13;
                "break-after",&#13;
                "break-before",&#13;
                "break-inside",&#13;
                "caption-side",&#13;
                "clear",&#13;
                "clip",&#13;
                "color",&#13;
                "color-profile",&#13;
                "column-count",&#13;
                "column-fill",&#13;
                "column-gap",&#13;
                "column-rule",&#13;
                "column-rule-color",&#13;
                "column-rule-style",&#13;
                "column-rule-width",&#13;
                "column-span",&#13;
                "column-width",&#13;
                "columns",&#13;
                "content",&#13;
                "counter-increment",&#13;
                "counter-reset",&#13;
                "crop",&#13;
                "cue",&#13;
                "cue-after",&#13;
                "cue-before",&#13;
                "cursor",&#13;
                "direction",&#13;
                "display",&#13;
                "dominant-baseline",&#13;
                "drop-initial-after-adjust",&#13;
                "drop-initial-after-align",&#13;
                "drop-initial-before-adjust",&#13;
                "drop-initial-before-align",&#13;
                "drop-initial-size",&#13;
                "drop-initial-value",&#13;
                "elevation",&#13;
                "empty-cells",&#13;
                "fit",&#13;
                "fit-position",&#13;
                "flex",&#13;
                "flex-basis",&#13;
                "flex-direction",&#13;
                "flex-flow",&#13;
                "flex-grow",&#13;
                "flex-shrink",&#13;
                "flex-wrap",&#13;
                "float",&#13;
                "float-offset",&#13;
                "flow-from",&#13;
                "flow-into",&#13;
                "font",&#13;
                "font-feature-settings",&#13;
                "font-family",&#13;
                "font-kerning",&#13;
                "font-language-override",&#13;
                "font-size",&#13;
                "font-size-adjust",&#13;
                "font-stretch",&#13;
                "font-style",&#13;
                "font-synthesis",&#13;
                "font-variant",&#13;
                "font-variant-alternates",&#13;
                "font-variant-caps",&#13;
                "font-variant-east-asian",&#13;
                "font-variant-ligatures",&#13;
                "font-variant-numeric",&#13;
                "font-variant-position",&#13;
                "font-weight",&#13;
                "grid",&#13;
                "grid-area",&#13;
                "grid-auto-columns",&#13;
                "grid-auto-flow",&#13;
                "grid-auto-position",&#13;
                "grid-auto-rows",&#13;
                "grid-column",&#13;
                "grid-column-end",&#13;
                "grid-column-start",&#13;
                "grid-row",&#13;
                "grid-row-end",&#13;
                "grid-row-start",&#13;
                "grid-template",&#13;
                "grid-template-areas",&#13;
                "grid-template-columns",&#13;
                "grid-template-rows",&#13;
                "hanging-punctuation",&#13;
                "height",&#13;
                "hyphens",&#13;
                "icon",&#13;
                "image-orientation",&#13;
                "image-rendering",&#13;
                "image-resolution",&#13;
                "inline-box-align",&#13;
                "justify-content",&#13;
                "left",&#13;
                "letter-spacing",&#13;
                "line-break",&#13;
                "line-height",&#13;
                "line-stacking",&#13;
                "line-stacking-ruby",&#13;
                "line-stacking-shift",&#13;
                "line-stacking-strategy",&#13;
                "list-style",&#13;
                "list-style-image",&#13;
                "list-style-position",&#13;
                "list-style-type",&#13;
                "margin",&#13;
                "margin-bottom",&#13;
                "margin-left",&#13;
                "margin-right",&#13;
                "margin-top",&#13;
                "marker-offset",&#13;
                "marks",&#13;
                "marquee-direction",&#13;
                "marquee-loop",&#13;
                "marquee-play-count",&#13;
                "marquee-speed",&#13;
                "marquee-style",&#13;
                "max-height",&#13;
                "max-width",&#13;
                "min-height",&#13;
                "min-width",&#13;
                "move-to",&#13;
                "nav-down",&#13;
                "nav-index",&#13;
                "nav-left",&#13;
                "nav-right",&#13;
                "nav-up",&#13;
                "object-fit",&#13;
                "object-position",&#13;
                "opacity",&#13;
                "order",&#13;
                "orphans",&#13;
                "outline",&#13;
                "outline-color",&#13;
                "outline-offset",&#13;
                "outline-style",&#13;
                "outline-width",&#13;
                "overflow",&#13;
                "overflow-style",&#13;
                "overflow-wrap",&#13;
                "overflow-x",&#13;
                "overflow-y",&#13;
                "padding",&#13;
                "padding-bottom",&#13;
                "padding-left",&#13;
                "padding-right",&#13;
                "padding-top",&#13;
                "page",&#13;
                "page-break-after",&#13;
                "page-break-before",&#13;
                "page-break-inside",&#13;
                "page-policy",&#13;
                "pause",&#13;
                "pause-after",&#13;
                "pause-before",&#13;
                "perspective",&#13;
                "perspective-origin",&#13;
                "pitch",&#13;
                "pitch-range",&#13;
                "play-during",&#13;
                "position",&#13;
                "presentation-level",&#13;
                "punctuation-trim",&#13;
                "quotes",&#13;
                "region-break-after",&#13;
                "region-break-before",&#13;
                "region-break-inside",&#13;
                "region-fragment",&#13;
                "rendering-intent",&#13;
                "resize",&#13;
                "rest",&#13;
                "rest-after",&#13;
                "rest-before",&#13;
                "richness",&#13;
                "right",&#13;
                "rotation",&#13;
                "rotation-point",&#13;
                "ruby-align",&#13;
                "ruby-overhang",&#13;
                "ruby-position",&#13;
                "ruby-span",&#13;
                "shape-image-threshold",&#13;
                "shape-inside",&#13;
                "shape-margin",&#13;
                "shape-outside",&#13;
                "size",&#13;
                "speak",&#13;
                "speak-as",&#13;
                "speak-header",&#13;
                "speak-numeral",&#13;
                "speak-punctuation",&#13;
                "speech-rate",&#13;
                "stress",&#13;
                "string-set",&#13;
                "tab-size",&#13;
                "table-layout",&#13;
                "target",&#13;
                "target-name",&#13;
                "target-new",&#13;
                "target-position",&#13;
                "text-align",&#13;
                "text-align-last",&#13;
                "text-decoration",&#13;
                "text-decoration-color",&#13;
                "text-decoration-line",&#13;
                "text-decoration-skip",&#13;
                "text-decoration-style",&#13;
                "text-emphasis",&#13;
                "text-emphasis-color",&#13;
                "text-emphasis-position",&#13;
                "text-emphasis-style",&#13;
                "text-height",&#13;
                "text-indent",&#13;
                "text-justify",&#13;
                "text-outline",&#13;
                "text-overflow",&#13;
                "text-shadow",&#13;
                "text-size-adjust",&#13;
                "text-space-collapse",&#13;
                "text-transform",&#13;
                "text-underline-position",&#13;
                "text-wrap",&#13;
                "top",&#13;
                "transform",&#13;
                "transform-origin",&#13;
                "transform-style",&#13;
                "transition",&#13;
                "transition-delay",&#13;
                "transition-duration",&#13;
                "transition-property",&#13;
                "transition-timing-function",&#13;
                "unicode-bidi",&#13;
                "vertical-align",&#13;
                "visibility",&#13;
                "voice-balance",&#13;
                "voice-duration",&#13;
                "voice-family",&#13;
                "voice-pitch",&#13;
                "voice-range",&#13;
                "voice-rate",&#13;
                "voice-stress",&#13;
                "voice-volume",&#13;
                "volume",&#13;
                "white-space",&#13;
                "widows",&#13;
                "width",&#13;
                "word-break",&#13;
                "word-spacing",&#13;
                "word-wrap",&#13;
                "z-index",&#13;
                "clip-path",&#13;
                "clip-rule",&#13;
                "mask",&#13;
                "enable-background",&#13;
                "filter",&#13;
                "flood-color",&#13;
                "flood-opacity",&#13;
                "lighting-color",&#13;
                "stop-color",&#13;
                "stop-opacity",&#13;
                "pointer-events",&#13;
                "color-interpolation",&#13;
                "color-interpolation-filters",&#13;
                "color-rendering",&#13;
                "fill",&#13;
                "fill-opacity",&#13;
                "fill-rule",&#13;
                "image-rendering",&#13;
                "marker",&#13;
                "marker-end",&#13;
                "marker-mid",&#13;
                "marker-start",&#13;
                "shape-rendering",&#13;
                "stroke",&#13;
                "stroke-dasharray",&#13;
                "stroke-dashoffset",&#13;
                "stroke-linecap",&#13;
                "stroke-linejoin",&#13;
                "stroke-miterlimit",&#13;
                "stroke-opacity",&#13;
                "stroke-width",&#13;
                "text-rendering",&#13;
                "baseline-shift",&#13;
                "dominant-baseline",&#13;
                "glyph-orientation-horizontal",&#13;
                "glyph-orientation-vertical",&#13;
                "text-anchor",&#13;
                "writing-mode"&#13;
            ],&#13;
            d = t(u),&#13;
            f = [&#13;
                "scrollbar-arrow-color",&#13;
                "scrollbar-base-color",&#13;
                "scrollbar-dark-shadow-color",&#13;
                "scrollbar-face-color",&#13;
                "scrollbar-highlight-color",&#13;
                "scrollbar-shadow-color",&#13;
                "scrollbar-3d-light-color",&#13;
                "scrollbar-track-color",&#13;
                "shape-inside",&#13;
                "searchfield-cancel-button",&#13;
                "searchfield-decoration",&#13;
                "searchfield-results-button",&#13;
                "searchfield-results-decoration",&#13;
                "zoom"&#13;
            ],&#13;
            m = t(f),&#13;
            h = [&#13;
                "font-family",&#13;
                "src",&#13;
                "unicode-range",&#13;
                "font-variant",&#13;
                "font-feature-settings",&#13;
                "font-stretch",&#13;
                "font-weight",&#13;
                "font-style"&#13;
            ],&#13;
            p = t(h),&#13;
            g = [&#13;
                "additive-symbols",&#13;
                "fallback",&#13;
                "negative",&#13;
                "pad",&#13;
                "prefix",&#13;
                "range",&#13;
                "speak-as",&#13;
                "suffix",&#13;
                "symbols",&#13;
                "system"&#13;
            ],&#13;
            v = t(g),&#13;
            b = [&#13;
                "aliceblue",&#13;
                "antiquewhite",&#13;
                "aqua",&#13;
                "aquamarine",&#13;
                "azure",&#13;
                "beige",&#13;
                "bisque",&#13;
                "black",&#13;
                "blanchedalmond",&#13;
                "blue",&#13;
                "blueviolet",&#13;
                "brown",&#13;
                "burlywood",&#13;
                "cadetblue",&#13;
                "chartreuse",&#13;
                "chocolate",&#13;
                "coral",&#13;
                "cornflowerblue",&#13;
                "cornsilk",&#13;
                "crimson",&#13;
                "cyan",&#13;
                "darkblue",&#13;
                "darkcyan",&#13;
                "darkgoldenrod",&#13;
                "darkgray",&#13;
                "darkgreen",&#13;
                "darkkhaki",&#13;
                "darkmagenta",&#13;
                "darkolivegreen",&#13;
                "darkorange",&#13;
                "darkorchid",&#13;
                "darkred",&#13;
                "darksalmon",&#13;
                "darkseagreen",&#13;
                "darkslateblue",&#13;
                "darkslategray",&#13;
                "darkturquoise",&#13;
                "darkviolet",&#13;
                "deeppink",&#13;
                "deepskyblue",&#13;
                "dimgray",&#13;
                "dodgerblue",&#13;
                "firebrick",&#13;
                "floralwhite",&#13;
                "forestgreen",&#13;
                "fuchsia",&#13;
                "gainsboro",&#13;
                "ghostwhite",&#13;
                "gold",&#13;
                "goldenrod",&#13;
                "gray",&#13;
                "grey",&#13;
                "green",&#13;
                "greenyellow",&#13;
                "honeydew",&#13;
                "hotpink",&#13;
                "indianred",&#13;
                "indigo",&#13;
                "ivory",&#13;
                "khaki",&#13;
                "lavender",&#13;
                "lavenderblush",&#13;
                "lawngreen",&#13;
                "lemonchiffon",&#13;
                "lightblue",&#13;
                "lightcoral",&#13;
                "lightcyan",&#13;
                "lightgoldenrodyellow",&#13;
                "lightgray",&#13;
                "lightgreen",&#13;
                "lightpink",&#13;
                "lightsalmon",&#13;
                "lightseagreen",&#13;
                "lightskyblue",&#13;
                "lightslategray",&#13;
                "lightsteelblue",&#13;
                "lightyellow",&#13;
                "lime",&#13;
                "limegreen",&#13;
                "linen",&#13;
                "magenta",&#13;
                "maroon",&#13;
                "mediumaquamarine",&#13;
                "mediumblue",&#13;
                "mediumorchid",&#13;
                "mediumpurple",&#13;
                "mediumseagreen",&#13;
                "mediumslateblue",&#13;
                "mediumspringgreen",&#13;
                "mediumturquoise",&#13;
                "mediumvioletred",&#13;
                "midnightblue",&#13;
                "mintcream",&#13;
                "mistyrose",&#13;
                "moccasin",&#13;
                "navajowhite",&#13;
                "navy",&#13;
                "oldlace",&#13;
                "olive",&#13;
                "olivedrab",&#13;
                "orange",&#13;
                "orangered",&#13;
                "orchid",&#13;
                "palegoldenrod",&#13;
                "palegreen",&#13;
                "paleturquoise",&#13;
                "palevioletred",&#13;
                "papayawhip",&#13;
                "peachpuff",&#13;
                "peru",&#13;
                "pink",&#13;
                "plum",&#13;
                "powderblue",&#13;
                "purple",&#13;
                "rebeccapurple",&#13;
                "red",&#13;
                "rosybrown",&#13;
                "royalblue",&#13;
                "saddlebrown",&#13;
                "salmon",&#13;
                "sandybrown",&#13;
                "seagreen",&#13;
                "seashell",&#13;
                "sienna",&#13;
                "silver",&#13;
                "skyblue",&#13;
                "slateblue",&#13;
                "slategray",&#13;
                "snow",&#13;
                "springgreen",&#13;
                "steelblue",&#13;
                "tan",&#13;
                "teal",&#13;
                "thistle",&#13;
                "tomato",&#13;
                "turquoise",&#13;
                "violet",&#13;
                "wheat",&#13;
                "white",&#13;
                "whitesmoke",&#13;
                "yellow",&#13;
                "yellowgreen"&#13;
            ],&#13;
            y = t(b),&#13;
            x = [&#13;
                "above",&#13;
                "absolute",&#13;
                "activeborder",&#13;
                "additive",&#13;
                "activecaption",&#13;
                "afar",&#13;
                "after-white-space",&#13;
                "ahead",&#13;
                "alias",&#13;
                "all",&#13;
                "all-scroll",&#13;
                "alphabetic",&#13;
                "alternate",&#13;
                "always",&#13;
                "amharic",&#13;
                "amharic-abegede",&#13;
                "antialiased",&#13;
                "appworkspace",&#13;
                "arabic-indic",&#13;
                "armenian",&#13;
                "asterisks",&#13;
                "attr",&#13;
                "auto",&#13;
                "avoid",&#13;
                "avoid-column",&#13;
                "avoid-page",&#13;
                "avoid-region",&#13;
                "background",&#13;
                "backwards",&#13;
                "baseline",&#13;
                "below",&#13;
                "bidi-override",&#13;
                "binary",&#13;
                "bengali",&#13;
                "blink",&#13;
                "block",&#13;
                "block-axis",&#13;
                "bold",&#13;
                "bolder",&#13;
                "border",&#13;
                "border-box",&#13;
                "both",&#13;
                "bottom",&#13;
                "break",&#13;
                "break-all",&#13;
                "break-word",&#13;
                "bullets",&#13;
                "button",&#13;
                "button-bevel",&#13;
                "buttonface",&#13;
                "buttonhighlight",&#13;
                "buttonshadow",&#13;
                "buttontext",&#13;
                "calc",&#13;
                "cambodian",&#13;
                "capitalize",&#13;
                "caps-lock-indicator",&#13;
                "caption",&#13;
                "captiontext",&#13;
                "caret",&#13;
                "cell",&#13;
                "center",&#13;
                "checkbox",&#13;
                "circle",&#13;
                "cjk-decimal",&#13;
                "cjk-earthly-branch",&#13;
                "cjk-heavenly-stem",&#13;
                "cjk-ideographic",&#13;
                "clear",&#13;
                "clip",&#13;
                "close-quote",&#13;
                "col-resize",&#13;
                "collapse",&#13;
                "column",&#13;
                "compact",&#13;
                "condensed",&#13;
                "contain",&#13;
                "content",&#13;
                "content-box",&#13;
                "context-menu",&#13;
                "continuous",&#13;
                "copy",&#13;
                "counter",&#13;
                "counters",&#13;
                "cover",&#13;
                "crop",&#13;
                "cross",&#13;
                "crosshair",&#13;
                "currentcolor",&#13;
                "cursive",&#13;
                "cyclic",&#13;
                "dashed",&#13;
                "decimal",&#13;
                "decimal-leading-zero",&#13;
                "default",&#13;
                "default-button",&#13;
                "destination-atop",&#13;
                "destination-in",&#13;
                "destination-out",&#13;
                "destination-over",&#13;
                "devanagari",&#13;
                "disc",&#13;
                "discard",&#13;
                "disclosure-closed",&#13;
                "disclosure-open",&#13;
                "document",&#13;
                "dot-dash",&#13;
                "dot-dot-dash",&#13;
                "dotted",&#13;
                "double",&#13;
                "down",&#13;
                "e-resize",&#13;
                "ease",&#13;
                "ease-in",&#13;
                "ease-in-out",&#13;
                "ease-out",&#13;
                "element",&#13;
                "ellipse",&#13;
                "ellipsis",&#13;
                "embed",&#13;
                "end",&#13;
                "ethiopic",&#13;
                "ethiopic-abegede",&#13;
                "ethiopic-abegede-am-et",&#13;
                "ethiopic-abegede-gez",&#13;
                "ethiopic-abegede-ti-er",&#13;
                "ethiopic-abegede-ti-et",&#13;
                "ethiopic-halehame-aa-er",&#13;
                "ethiopic-halehame-aa-et",&#13;
                "ethiopic-halehame-am-et",&#13;
                "ethiopic-halehame-gez",&#13;
                "ethiopic-halehame-om-et",&#13;
                "ethiopic-halehame-sid-et",&#13;
                "ethiopic-halehame-so-et",&#13;
                "ethiopic-halehame-ti-er",&#13;
                "ethiopic-halehame-ti-et",&#13;
                "ethiopic-halehame-tig",&#13;
                "ethiopic-numeric",&#13;
                "ew-resize",&#13;
                "expanded",&#13;
                "extends",&#13;
                "extra-condensed",&#13;
                "extra-expanded",&#13;
                "fantasy",&#13;
                "fast",&#13;
                "fill",&#13;
                "fixed",&#13;
                "flat",&#13;
                "flex",&#13;
                "footnotes",&#13;
                "forwards",&#13;
                "from",&#13;
                "geometricPrecision",&#13;
                "georgian",&#13;
                "graytext",&#13;
                "groove",&#13;
                "gujarati",&#13;
                "gurmukhi",&#13;
                "hand",&#13;
                "hangul",&#13;
                "hangul-consonant",&#13;
                "hebrew",&#13;
                "help",&#13;
                "hidden",&#13;
                "hide",&#13;
                "higher",&#13;
                "highlight",&#13;
                "highlighttext",&#13;
                "hiragana",&#13;
                "hiragana-iroha",&#13;
                "horizontal",&#13;
                "hsl",&#13;
                "hsla",&#13;
                "icon",&#13;
                "ignore",&#13;
                "inactiveborder",&#13;
                "inactivecaption",&#13;
                "inactivecaptiontext",&#13;
                "infinite",&#13;
                "infobackground",&#13;
                "infotext",&#13;
                "inherit",&#13;
                "initial",&#13;
                "inline",&#13;
                "inline-axis",&#13;
                "inline-block",&#13;
                "inline-flex",&#13;
                "inline-table",&#13;
                "inset",&#13;
                "inside",&#13;
                "intrinsic",&#13;
                "invert",&#13;
                "italic",&#13;
                "japanese-formal",&#13;
                "japanese-informal",&#13;
                "justify",&#13;
                "kannada",&#13;
                "katakana",&#13;
                "katakana-iroha",&#13;
                "keep-all",&#13;
                "khmer",&#13;
                "korean-hangul-formal",&#13;
                "korean-hanja-formal",&#13;
                "korean-hanja-informal",&#13;
                "landscape",&#13;
                "lao",&#13;
                "large",&#13;
                "larger",&#13;
                "left",&#13;
                "level",&#13;
                "lighter",&#13;
                "line-through",&#13;
                "linear",&#13;
                "linear-gradient",&#13;
                "lines",&#13;
                "list-item",&#13;
                "listbox",&#13;
                "listitem",&#13;
                "local",&#13;
                "logical",&#13;
                "loud",&#13;
                "lower",&#13;
                "lower-alpha",&#13;
                "lower-armenian",&#13;
                "lower-greek",&#13;
                "lower-hexadecimal",&#13;
                "lower-latin",&#13;
                "lower-norwegian",&#13;
                "lower-roman",&#13;
                "lowercase",&#13;
                "ltr",&#13;
                "malayalam",&#13;
                "match",&#13;
                "matrix",&#13;
                "matrix3d",&#13;
                "media-controls-background",&#13;
                "media-current-time-display",&#13;
                "media-fullscreen-button",&#13;
                "media-mute-button",&#13;
                "media-play-button",&#13;
                "media-return-to-realtime-button",&#13;
                "media-rewind-button",&#13;
                "media-seek-back-button",&#13;
                "media-seek-forward-button",&#13;
                "media-slider",&#13;
                "media-sliderthumb",&#13;
                "media-time-remaining-display",&#13;
                "media-volume-slider",&#13;
                "media-volume-slider-container",&#13;
                "media-volume-sliderthumb",&#13;
                "medium",&#13;
                "menu",&#13;
                "menulist",&#13;
                "menulist-button",&#13;
                "menulist-text",&#13;
                "menulist-textfield",&#13;
                "menutext",&#13;
                "message-box",&#13;
                "middle",&#13;
                "min-intrinsic",&#13;
                "mix",&#13;
                "mongolian",&#13;
                "monospace",&#13;
                "move",&#13;
                "multiple",&#13;
                "myanmar",&#13;
                "n-resize",&#13;
                "narrower",&#13;
                "ne-resize",&#13;
                "nesw-resize",&#13;
                "no-close-quote",&#13;
                "no-drop",&#13;
                "no-open-quote",&#13;
                "no-repeat",&#13;
                "none",&#13;
                "normal",&#13;
                "not-allowed",&#13;
                "nowrap",&#13;
                "ns-resize",&#13;
                "numbers",&#13;
                "numeric",&#13;
                "nw-resize",&#13;
                "nwse-resize",&#13;
                "oblique",&#13;
                "octal",&#13;
                "open-quote",&#13;
                "optimizeLegibility",&#13;
                "optimizeSpeed",&#13;
                "oriya",&#13;
                "oromo",&#13;
                "outset",&#13;
                "outside",&#13;
                "outside-shape",&#13;
                "overlay",&#13;
                "overline",&#13;
                "padding",&#13;
                "padding-box",&#13;
                "painted",&#13;
                "page",&#13;
                "paused",&#13;
                "persian",&#13;
                "perspective",&#13;
                "plus-darker",&#13;
                "plus-lighter",&#13;
                "pointer",&#13;
                "polygon",&#13;
                "portrait",&#13;
                "pre",&#13;
                "pre-line",&#13;
                "pre-wrap",&#13;
                "preserve-3d",&#13;
                "progress",&#13;
                "push-button",&#13;
                "radial-gradient",&#13;
                "radio",&#13;
                "read-only",&#13;
                "read-write",&#13;
                "read-write-plaintext-only",&#13;
                "rectangle",&#13;
                "region",&#13;
                "relative",&#13;
                "repeat",&#13;
                "repeating-linear-gradient",&#13;
                "repeating-radial-gradient",&#13;
                "repeat-x",&#13;
                "repeat-y",&#13;
                "reset",&#13;
                "reverse",&#13;
                "rgb",&#13;
                "rgba",&#13;
                "ridge",&#13;
                "right",&#13;
                "rotate",&#13;
                "rotate3d",&#13;
                "rotateX",&#13;
                "rotateY",&#13;
                "rotateZ",&#13;
                "round",&#13;
                "row-resize",&#13;
                "rtl",&#13;
                "run-in",&#13;
                "running",&#13;
                "s-resize",&#13;
                "sans-serif",&#13;
                "scale",&#13;
                "scale3d",&#13;
                "scaleX",&#13;
                "scaleY",&#13;
                "scaleZ",&#13;
                "scroll",&#13;
                "scrollbar",&#13;
                "se-resize",&#13;
                "searchfield",&#13;
                "searchfield-cancel-button",&#13;
                "searchfield-decoration",&#13;
                "searchfield-results-button",&#13;
                "searchfield-results-decoration",&#13;
                "semi-condensed",&#13;
                "semi-expanded",&#13;
                "separate",&#13;
                "serif",&#13;
                "show",&#13;
                "sidama",&#13;
                "simp-chinese-formal",&#13;
                "simp-chinese-informal",&#13;
                "single",&#13;
                "skew",&#13;
                "skewX",&#13;
                "skewY",&#13;
                "skip-white-space",&#13;
                "slide",&#13;
                "slider-horizontal",&#13;
                "slider-vertical",&#13;
                "sliderthumb-horizontal",&#13;
                "sliderthumb-vertical",&#13;
                "slow",&#13;
                "small",&#13;
                "small-caps",&#13;
                "small-caption",&#13;
                "smaller",&#13;
                "solid",&#13;
                "somali",&#13;
                "source-atop",&#13;
                "source-in",&#13;
                "source-out",&#13;
                "source-over",&#13;
                "space",&#13;
                "spell-out",&#13;
                "square",&#13;
                "square-button",&#13;
                "start",&#13;
                "static",&#13;
                "status-bar",&#13;
                "stretch",&#13;
                "stroke",&#13;
                "sub",&#13;
                "subpixel-antialiased",&#13;
                "super",&#13;
                "sw-resize",&#13;
                "symbolic",&#13;
                "symbols",&#13;
                "table",&#13;
                "table-caption",&#13;
                "table-cell",&#13;
                "table-column",&#13;
                "table-column-group",&#13;
                "table-footer-group",&#13;
                "table-header-group",&#13;
                "table-row",&#13;
                "table-row-group",&#13;
                "tamil",&#13;
                "telugu",&#13;
                "text",&#13;
                "text-bottom",&#13;
                "text-top",&#13;
                "textarea",&#13;
                "textfield",&#13;
                "thai",&#13;
                "thick",&#13;
                "thin",&#13;
                "threeddarkshadow",&#13;
                "threedface",&#13;
                "threedhighlight",&#13;
                "threedlightshadow",&#13;
                "threedshadow",&#13;
                "tibetan",&#13;
                "tigre",&#13;
                "tigrinya-er",&#13;
                "tigrinya-er-abegede",&#13;
                "tigrinya-et",&#13;
                "tigrinya-et-abegede",&#13;
                "to",&#13;
                "top",&#13;
                "trad-chinese-formal",&#13;
                "trad-chinese-informal",&#13;
                "translate",&#13;
                "translate3d",&#13;
                "translateX",&#13;
                "translateY",&#13;
                "translateZ",&#13;
                "transparent",&#13;
                "ultra-condensed",&#13;
                "ultra-expanded",&#13;
                "underline",&#13;
                "up",&#13;
                "upper-alpha",&#13;
                "upper-armenian",&#13;
                "upper-greek",&#13;
                "upper-hexadecimal",&#13;
                "upper-latin",&#13;
                "upper-norwegian",&#13;
                "upper-roman",&#13;
                "uppercase",&#13;
                "urdu",&#13;
                "url",&#13;
                "var",&#13;
                "vertical",&#13;
                "vertical-text",&#13;
                "visible",&#13;
                "visibleFill",&#13;
                "visiblePainted",&#13;
                "visibleStroke",&#13;
                "visual",&#13;
                "w-resize",&#13;
                "wait",&#13;
                "wave",&#13;
                "wider",&#13;
                "window",&#13;
                "windowframe",&#13;
                "windowtext",&#13;
                "words",&#13;
                "x-large",&#13;
                "x-small",&#13;
                "xor",&#13;
                "xx-large",&#13;
                "xx-small"&#13;
            ],&#13;
            k = t(x),&#13;
            w = i&#13;
                .concat(a)&#13;
                .concat(l)&#13;
                .concat(u)&#13;
                .concat(f)&#13;
                .concat(b)&#13;
                .concat(x);&#13;
        e.registerHelper("hintWords", "css", w),&#13;
            e.defineMIME("text/css", {&#13;
                documentTypes: o,&#13;
                mediaTypes: s,&#13;
                mediaFeatures: c,&#13;
                propertyKeywords: d,&#13;
                nonStandardPropertyKeywords: m,&#13;
                fontProperties: p,&#13;
                counterDescriptors: v,&#13;
                colorKeywords: y,&#13;
                valueKeywords: k,&#13;
                tokenHooks: {&#13;
                    "&lt;": function(e, t) {&#13;
                        return e.match("!--") ? ((t.tokenize = n), n(e, t)) : !1;&#13;
                    },&#13;
                    "/": function(e, t) {&#13;
                        return e.eat("*") ? ((t.tokenize = r), r(e, t)) : !1;&#13;
                    }&#13;
                },&#13;
                name: "css"&#13;
            }),&#13;
            e.defineMIME("text/x-scss", {&#13;
                mediaTypes: s,&#13;
                mediaFeatures: c,&#13;
                propertyKeywords: d,&#13;
                nonStandardPropertyKeywords: m,&#13;
                colorKeywords: y,&#13;
                valueKeywords: k,&#13;
                fontProperties: p,&#13;
                allowNested: !0,&#13;
                tokenHooks: {&#13;
                    "/": function(e, t) {&#13;
                        return e.eat("/")&#13;
                            ? (e.skipToEnd(), ["comment", "comment"])&#13;
                            : e.eat("*")&#13;
                                ? ((t.tokenize = r), r(e, t))&#13;
                                : ["operator", "operator"];&#13;
                    },&#13;
                    ":": function(e) {&#13;
                        return e.match(/\s*\{/) ? [null, "{"] : !1;&#13;
                    },&#13;
                    $: function(e) {&#13;
                        return (&#13;
                            e.match(/^[\w-]+/),&#13;
                            e.match(/^\s*:/, !1)&#13;
                                ? ["variable-2", "variable-definition"]&#13;
                                : ["variable-2", "variable"]&#13;
                        );&#13;
                    },&#13;
                    "#": function(e) {&#13;
                        return e.eat("{") ? [null, "interpolation"] : !1;&#13;
                    }&#13;
                },&#13;
                name: "css",&#13;
                helperType: "scss"&#13;
            }),&#13;
            e.defineMIME("text/x-less", {&#13;
                mediaTypes: s,&#13;
                mediaFeatures: c,&#13;
                propertyKeywords: d,&#13;
                nonStandardPropertyKeywords: m,&#13;
                colorKeywords: y,&#13;
                valueKeywords: k,&#13;
                fontProperties: p,&#13;
                allowNested: !0,&#13;
                tokenHooks: {&#13;
                    "/": function(e, t) {&#13;
                        return e.eat("/")&#13;
                            ? (e.skipToEnd(), ["comment", "comment"])&#13;
                            : e.eat("*")&#13;
                                ? ((t.tokenize = r), r(e, t))&#13;
                                : ["operator", "operator"];&#13;
                    },&#13;
                    "@": function(e) {&#13;
                        return e.match(&#13;
                            /^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/,&#13;
                            !1&#13;
                        )&#13;
                            ? !1&#13;
                            : (e.eatWhile(/[\w\\\-]/),&#13;
                              e.match(/^\s*:/, !1)&#13;
                                  ? ["variable-2", "variable-definition"]&#13;
                                  : ["variable-2", "variable"]);&#13;
                    },&#13;
                    "&amp;": function() {&#13;
                        return ["atom", "atom"];&#13;
                    }&#13;
                },&#13;
                name: "css",&#13;
                helperType: "less"&#13;
            });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("sass", function(e) {&#13;
            function t(e) {&#13;
                return new RegExp("^" + e.join("|"));&#13;
            }&#13;
            function r(e, t) {&#13;
                var r = e.peek();&#13;
                return ")" === r&#13;
                    ? (e.next(), (t.tokenizer = l), "operator")&#13;
                    : "(" === r&#13;
                        ? (e.next(), e.eatSpace(), "operator")&#13;
                        : "'" === r || '"' === r&#13;
                            ? ((t.tokenizer = i(e.next())), "string")&#13;
                            : ((t.tokenizer = i(")", !1)), "string");&#13;
            }&#13;
            function n(e, t) {&#13;
                return function(r, n) {&#13;
                    return r.sol() &amp;&amp; r.indentation() &lt;= e&#13;
                        ? ((n.tokenizer = l), l(r, n))&#13;
                        : (t &amp;&amp; r.skipTo("*/")&#13;
                              ? (r.next(), r.next(), (n.tokenizer = l))&#13;
                              : r.skipToEnd(),&#13;
                          "comment");&#13;
                };&#13;
            }&#13;
            function i(e, t) {&#13;
                function r(n, i) {&#13;
                    var a = n.next(),&#13;
                        s = n.peek(),&#13;
                        c = n.string.charAt(n.pos - 2),&#13;
                        u = ("\\" !== a &amp;&amp; s === e) || (a === e &amp;&amp; "\\" !== c);&#13;
                    return u&#13;
                        ? (a !== e &amp;&amp; t &amp;&amp; n.next(), (i.tokenizer = l), "string")&#13;
                        : "#" === a &amp;&amp; "{" === s&#13;
                            ? ((i.tokenizer = o(r)), n.next(), "operator")&#13;
                            : "string";&#13;
                }&#13;
                return null == t &amp;&amp; (t = !0), r;&#13;
            }&#13;
            function o(e) {&#13;
                return function(t, r) {&#13;
                    return "}" === t.peek() ? (t.next(), (r.tokenizer = e), "operator") : l(t, r);&#13;
                };&#13;
            }&#13;
            function a(t) {&#13;
                if (0 == t.indentCount) {&#13;
                    t.indentCount++;&#13;
                    var r = t.scopes[0].offset,&#13;
                        n = r + e.indentUnit;&#13;
                    t.scopes.unshift({ offset: n });&#13;
                }&#13;
            }&#13;
            function s(e) {&#13;
                1 != e.scopes.length &amp;&amp; e.scopes.shift();&#13;
            }&#13;
            function l(e, t) {&#13;
                var c = e.peek();&#13;
                if (e.match("/*")) return (t.tokenizer = n(e.indentation(), !0)), t.tokenizer(e, t);&#13;
                if (e.match("//")) return (t.tokenizer = n(e.indentation(), !1)), t.tokenizer(e, t);&#13;
                if (e.match("#{")) return (t.tokenizer = o(l)), "operator";&#13;
                if ('"' === c || "'" === c) return e.next(), (t.tokenizer = i(c)), "string";&#13;
                if (t.cursorHalf) {&#13;
                    if ("#" === c &amp;&amp; (e.next(), e.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)))&#13;
                        return e.peek() || (t.cursorHalf = 0), "number";&#13;
                    if (e.match(/^-?[0-9\.]+/)) return e.peek() || (t.cursorHalf = 0), "number";&#13;
                    if (e.match(/^(px|em|in)\b/)) return e.peek() || (t.cursorHalf = 0), "unit";&#13;
                    if (e.match(d)) return e.peek() || (t.cursorHalf = 0), "keyword";&#13;
                    if (e.match(/^url/) &amp;&amp; "(" === e.peek())&#13;
                        return (t.tokenizer = r), e.peek() || (t.cursorHalf = 0), "atom";&#13;
                    if ("$" === c)&#13;
                        return (&#13;
                            e.next(),&#13;
                            e.eatWhile(/[\w-]/),&#13;
                            e.peek() || (t.cursorHalf = 0),&#13;
                            "variable-3"&#13;
                        );&#13;
                    if ("!" === c)&#13;
                        return (&#13;
                            e.next(),&#13;
                            e.peek() || (t.cursorHalf = 0),&#13;
                            e.match(/^[\w]+/) ? "keyword" : "operator"&#13;
                        );&#13;
                    if (e.match(m)) return e.peek() || (t.cursorHalf = 0), "operator";&#13;
                    if (e.eatWhile(/[\w-]/)) return e.peek() || (t.cursorHalf = 0), "attribute";&#13;
                    if (!e.peek()) return (t.cursorHalf = 0), null;&#13;
                } else {&#13;
                    if ("." === c) {&#13;
                        if ((e.next(), e.match(/^[\w-]+/))) return a(t), "atom";&#13;
                        if ("#" === e.peek()) return a(t), "atom";&#13;
                    }&#13;
                    if ("#" === c) {&#13;
                        if ((e.next(), e.match(/^[\w-]+/))) return a(t), "atom";&#13;
                        if ("#" === e.peek()) return a(t), "atom";&#13;
                    }&#13;
                    if ("$" === c) return e.next(), e.eatWhile(/[\w-]/), "variable-2";&#13;
                    if (e.match(/^-?[0-9\.]+/)) return "number";&#13;
                    if (e.match(/^(px|em|in)\b/)) return "unit";&#13;
                    if (e.match(d)) return "keyword";&#13;
                    if (e.match(/^url/) &amp;&amp; "(" === e.peek()) return (t.tokenizer = r), "atom";&#13;
                    if ("=" === c &amp;&amp; e.match(/^=[\w-]+/)) return a(t), "meta";&#13;
                    if ("+" === c &amp;&amp; e.match(/^\+[\w-]+/)) return "variable-3";&#13;
                    if (&#13;
                        ("@" === c &amp;&amp; e.match(/@extend/) &amp;&amp; (e.match(/\s*[\w]/) || s(t)),&#13;
                        e.match(/^@(else if|if|media|else|for|each|while|mixin|function)/))&#13;
                    )&#13;
                        return a(t), "meta";&#13;
                    if ("@" === c) return e.next(), e.eatWhile(/[\w-]/), "meta";&#13;
                    if (e.eatWhile(/[\w-]/))&#13;
                        return e.match(/ *: *[\w-\+\$#!\("']/, !1)&#13;
                            ? "propery"&#13;
                            : e.match(/ *:/, !1)&#13;
                                ? (a(t), (t.cursorHalf = 1), "atom")&#13;
                                : e.match(/ *,/, !1)&#13;
                                    ? "atom"&#13;
                                    : (a(t), "atom");&#13;
                    if (":" === c)&#13;
                        return e.match(h) ? "keyword" : (e.next(), (t.cursorHalf = 1), "operator");&#13;
                }&#13;
                return e.match(m) ? "operator" : (e.next(), null);&#13;
            }&#13;
            function c(t, r) {&#13;
                t.sol() &amp;&amp; (r.indentCount = 0);&#13;
                var n = r.tokenizer(t, r),&#13;
                    i = t.current();&#13;
                if ((("@return" === i || "}" === i) &amp;&amp; s(r), null !== n)) {&#13;
                    for (&#13;
                        var o = t.pos - i.length,&#13;
                            a = o + e.indentUnit * r.indentCount,&#13;
                            l = [],&#13;
                            c = 0;&#13;
                        c &lt; r.scopes.length;&#13;
                        c++&#13;
                    ) {&#13;
                        var u = r.scopes[c];&#13;
                        u.offset &lt;= a &amp;&amp; l.push(u);&#13;
                    }&#13;
                    r.scopes = l;&#13;
                }&#13;
                return n;&#13;
            }&#13;
            var u = ["true", "false", "null", "auto"],&#13;
                d = new RegExp("^" + u.join("|")),&#13;
                f = [&#13;
                    "\\(",&#13;
                    "\\)",&#13;
                    "=",&#13;
                    "&gt;",&#13;
                    "&lt;",&#13;
                    "==",&#13;
                    "&gt;=",&#13;
                    "&lt;=",&#13;
                    "\\+",&#13;
                    "-",&#13;
                    "\\!=",&#13;
                    "/",&#13;
                    "\\*",&#13;
                    "%",&#13;
                    "and",&#13;
                    "or",&#13;
                    "not",&#13;
                    ";",&#13;
                    "\\{",&#13;
                    "\\}",&#13;
                    ":"&#13;
                ],&#13;
                m = t(f),&#13;
                h = /^::?[a-zA-Z_][\w\-]*/;&#13;
            return {&#13;
                startState: function() {&#13;
                    return {&#13;
                        tokenizer: l,&#13;
                        scopes: [{ offset: 0, type: "sass" }],&#13;
                        indentCount: 0,&#13;
                        cursorHalf: 0,&#13;
                        definedVars: [],&#13;
                        definedMixins: []&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    var r = c(e, t);&#13;
                    return (t.lastToken = { style: r, content: e.current() }), r;&#13;
                },&#13;
                indent: function(e) {&#13;
                    return e.scopes[0].offset;&#13;
                }&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-sass", "sass");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("shell", function() {&#13;
            function e(e, t) {&#13;
                for (var r = t.split(" "), n = 0; n &lt; r.length; n++) i[r[n]] = e;&#13;
            }&#13;
            function t(e, t) {&#13;
                if (e.eatSpace()) return null;&#13;
                var a = e.sol(),&#13;
                    s = e.next();&#13;
                if ("\\" === s) return e.next(), null;&#13;
                if ("'" === s || '"' === s || "`" === s) return t.tokens.unshift(r(s)), n(e, t);&#13;
                if ("#" === s)&#13;
                    return a &amp;&amp; e.eat("!") ? (e.skipToEnd(), "meta") : (e.skipToEnd(), "comment");&#13;
                if ("$" === s) return t.tokens.unshift(o), n(e, t);&#13;
                if ("+" === s || "=" === s) return "operator";&#13;
                if ("-" === s) return e.eat("-"), e.eatWhile(/\w/), "attribute";&#13;
                if (/\d/.test(s) &amp;&amp; (e.eatWhile(/\d/), e.eol() || !/\w/.test(e.peek())))&#13;
                    return "number";&#13;
                e.eatWhile(/[\w-]/);&#13;
                var l = e.current();&#13;
                return "=" === e.peek() &amp;&amp; /\w+/.test(l)&#13;
                    ? "def"&#13;
                    : i.hasOwnProperty(l)&#13;
                        ? i[l]&#13;
                        : null;&#13;
            }&#13;
            function r(e) {&#13;
                return function(t, r) {&#13;
                    for (var n, i = !1, a = !1; null != (n = t.next()); ) {&#13;
                        if (n === e &amp;&amp; !a) {&#13;
                            i = !0;&#13;
                            break;&#13;
                        }&#13;
                        if ("$" === n &amp;&amp; !a &amp;&amp; "'" !== e) {&#13;
                            (a = !0), t.backUp(1), r.tokens.unshift(o);&#13;
                            break;&#13;
                        }&#13;
                        a = !a &amp;&amp; "\\" === n;&#13;
                    }&#13;
                    return (&#13;
                        (i || !a) &amp;&amp; r.tokens.shift(), "`" === e || ")" === e ? "quote" : "string"&#13;
                    );&#13;
                };&#13;
            }&#13;
            function n(e, r) {&#13;
                return (r.tokens[0] || t)(e, r);&#13;
            }&#13;
            var i = {};&#13;
            e("atom", "true false"),&#13;
                e(&#13;
                    "keyword",&#13;
                    "if then do else elif while until for in esac fi fin fil done exit set unset export function"&#13;
                ),&#13;
                e(&#13;
                    "builtin",&#13;
                    "ab awk bash beep cat cc cd chown chmod chroot clear cp curl cut diff echo find gawk gcc get git grep kill killall ln ls make mkdir openssl mv nc node npm ping ps restart rm rmdir sed service sh shopt shred source sort sleep ssh start stop su sudo tee telnet top touch vi vim wall wc wget who write yes zsh"&#13;
                );&#13;
            var o = function(e, t) {&#13;
                t.tokens.length &gt; 1 &amp;&amp; e.eat("$");&#13;
                var i = e.next(),&#13;
                    o = /\w/;&#13;
                return (&#13;
                    "{" === i &amp;&amp; (o = /[^}]/),&#13;
                    "(" === i&#13;
                        ? ((t.tokens[0] = r(")")), n(e, t))&#13;
                        : (/\d/.test(i) || (e.eatWhile(o), e.eat("}")), t.tokens.shift(), "def")&#13;
                );&#13;
            };&#13;
            return {&#13;
                startState: function() {&#13;
                    return { tokens: [] };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    return n(e, t);&#13;
                },&#13;
                lineComment: "#",&#13;
                fold: "brace"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-sh", "shell");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("sql", function(t, r) {&#13;
            function n(e, t) {&#13;
                var r = e.next();&#13;
                if (h[r]) {&#13;
                    var n = h[r](e, t);&#13;
                    if (n !== !1) return n;&#13;
                }&#13;
                if (&#13;
                    1 == m.hexNumber &amp;&amp;&#13;
                    (("0" == r &amp;&amp; e.match(/^[xX][0-9a-fA-F]+/)) ||&#13;
                        (("x" == r || "X" == r) &amp;&amp; e.match(/^'[0-9a-fA-F]+'/)))&#13;
                )&#13;
                    return "number";&#13;
                if (&#13;
                    1 == m.binaryNumber &amp;&amp;&#13;
                    ((("b" == r || "B" == r) &amp;&amp; e.match(/^'[01]+'/)) ||&#13;
                        ("0" == r &amp;&amp; e.match(/^b[01]+/)))&#13;
                )&#13;
                    return "number";&#13;
                if (r.charCodeAt(0) &gt; 47 &amp;&amp; r.charCodeAt(0) &lt; 58)&#13;
                    return (&#13;
                        e.match(/^[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/),&#13;
                        1 == m.decimallessFloat &amp;&amp; e.eat("."),&#13;
                        "number"&#13;
                    );&#13;
                if ("?" == r &amp;&amp; (e.eatSpace() || e.eol() || e.eat(";"))) return "variable-3";&#13;
                if ("'" == r || ('"' == r &amp;&amp; m.doubleQuote))&#13;
                    return (t.tokenize = i(r)), t.tokenize(e, t);&#13;
                if (&#13;
                    ((1 == m.nCharCast &amp;&amp; ("n" == r || "N" == r)) ||&#13;
                        (1 == m.charsetCast &amp;&amp; "_" == r &amp;&amp; e.match(/[a-z][a-z0-9]*/i))) &amp;&amp;&#13;
                    ("'" == e.peek() || '"' == e.peek())&#13;
                )&#13;
                    return "keyword";&#13;
                if (/^[\(\),\;\[\]]/.test(r)) return null;&#13;
                if (m.commentSlashSlash &amp;&amp; "/" == r &amp;&amp; e.eat("/")) return e.skipToEnd(), "comment";&#13;
                if (&#13;
                    (m.commentHash &amp;&amp; "#" == r) ||&#13;
                    ("-" == r &amp;&amp; e.eat("-") &amp;&amp; (!m.commentSpaceRequired || e.eat(" ")))&#13;
                )&#13;
                    return e.skipToEnd(), "comment";&#13;
                if ("/" == r &amp;&amp; e.eat("*")) return (t.tokenize = o), t.tokenize(e, t);&#13;
                if ("." != r) {&#13;
                    if (f.test(r)) return e.eatWhile(f), null;&#13;
                    if (&#13;
                        "{" == r &amp;&amp;&#13;
                        (e.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) ||&#13;
                            e.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))&#13;
                    )&#13;
                        return "number";&#13;
                    e.eatWhile(/^[_\w\d]/);&#13;
                    var a = e.current().toLowerCase();&#13;
                    return p.hasOwnProperty(a) &amp;&amp;&#13;
                        (e.match(/^( )+'[^']*'/) || e.match(/^( )+"[^"]*"/))&#13;
                        ? "number"&#13;
                        : c.hasOwnProperty(a)&#13;
                            ? "atom"&#13;
                            : u.hasOwnProperty(a)&#13;
                                ? "builtin"&#13;
                                : d.hasOwnProperty(a)&#13;
                                    ? "keyword"&#13;
                                    : l.hasOwnProperty(a)&#13;
                                        ? "string-2"&#13;
                                        : null;&#13;
                }&#13;
                return 1 == m.zerolessFloat &amp;&amp; e.match(/^(?:\d+(?:e[+-]?\d+)?)/i)&#13;
                    ? "number"&#13;
                    : 1 == m.ODBCdotTable &amp;&amp; e.match(/^[a-zA-Z_]+/)&#13;
                        ? "variable-2"&#13;
                        : void 0;&#13;
            }&#13;
            function i(e) {&#13;
                return function(t, r) {&#13;
                    for (var i, o = !1; null != (i = t.next()); ) {&#13;
                        if (i == e &amp;&amp; !o) {&#13;
                            r.tokenize = n;&#13;
                            break;&#13;
                        }&#13;
                        o = !o &amp;&amp; "\\" == i;&#13;
                    }&#13;
                    return "string";&#13;
                };&#13;
            }&#13;
            function o(e, t) {&#13;
                for (;;) {&#13;
                    if (!e.skipTo("*")) {&#13;
                        e.skipToEnd();&#13;
                        break;&#13;
                    }&#13;
                    if ((e.next(), e.eat("/"))) {&#13;
                        t.tokenize = n;&#13;
                        break;&#13;
                    }&#13;
                }&#13;
                return "comment";&#13;
            }&#13;
            function a(e, t, r) {&#13;
                t.context = { prev: t.context, indent: e.indentation(), col: e.column(), type: r };&#13;
            }&#13;
            function s(e) {&#13;
                (e.indent = e.context.indent), (e.context = e.context.prev);&#13;
            }&#13;
            var l = r.client || {},&#13;
                c = r.atoms || { false: !0, true: !0, null: !0 },&#13;
                u = r.builtin || {},&#13;
                d = r.keywords || {},&#13;
                f = r.operatorChars || /^[*+\-%&lt;&gt;!=&amp;|~^]/,&#13;
                m = r.support || {},&#13;
                h = r.hooks || {},&#13;
                p = r.dateSQL || { date: !0, time: !0, timestamp: !0 };&#13;
            return {&#13;
                startState: function() {&#13;
                    return { tokenize: n, context: null };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if (&#13;
                        (e.sol() &amp;&amp; t.context &amp;&amp; null == t.context.align &amp;&amp; (t.context.align = !1),&#13;
                        e.eatSpace())&#13;
                    )&#13;
                        return null;&#13;
                    var r = t.tokenize(e, t);&#13;
                    if ("comment" == r) return r;&#13;
                    t.context &amp;&amp; null == t.context.align &amp;&amp; (t.context.align = !0);&#13;
                    var n = e.current();&#13;
                    return (&#13;
                        "(" == n&#13;
                            ? a(e, t, ")")&#13;
                            : "[" == n&#13;
                                ? a(e, t, "]")&#13;
                                : t.context &amp;&amp; t.context.type == n &amp;&amp; s(t),&#13;
                        r&#13;
                    );&#13;
                },&#13;
                indent: function(r, n) {&#13;
                    var i = r.context;&#13;
                    if (!i) return e.Pass;&#13;
                    var o = n.charAt(0) == i.type;&#13;
                    return i.align ? i.col + (o ? 0 : 1) : i.indent + (o ? 0 : t.indentUnit);&#13;
                },&#13;
                blockCommentStart: "/*",&#13;
                blockCommentEnd: "*/",&#13;
                lineComment: m.commentSlashSlash ? "//" : m.commentHash ? "#" : null&#13;
            };&#13;
        }),&#13;
            (function() {&#13;
                function t(e) {&#13;
                    for (var t; null != (t = e.next()); )&#13;
                        if ("`" == t &amp;&amp; !e.eat("`")) return "variable-2";&#13;
                    return e.backUp(e.current().length - 1), e.eatWhile(/\w/) ? "variable-2" : null;&#13;
                }&#13;
                function r(e) {&#13;
                    return (&#13;
                        e.eat("@") &amp;&amp;&#13;
                            (e.match(/^session\./), e.match(/^local\./), e.match(/^global\./)),&#13;
                        e.eat("'")&#13;
                            ? (e.match(/^.*'/), "variable-2")&#13;
                            : e.eat('"')&#13;
                                ? (e.match(/^.*"/), "variable-2")&#13;
                                : e.eat("`")&#13;
                                    ? (e.match(/^.*`/), "variable-2")&#13;
                                    : e.match(/^[0-9a-zA-Z$\.\_]+/)&#13;
                                        ? "variable-2"&#13;
                                        : null&#13;
                    );&#13;
                }&#13;
                function n(e) {&#13;
                    return e.eat("N") ? "atom" : e.match(/^[a-zA-Z.#!?]/) ? "variable-2" : null;&#13;
                }&#13;
                function i(e) {&#13;
                    for (var t = {}, r = e.split(" "), n = 0; n &lt; r.length; ++n) t[r[n]] = !0;&#13;
                    return t;&#13;
                }&#13;
                var o =&#13;
                    "alter and as asc between by count create delete desc distinct drop from having in insert into is join like not on or order select set table union update values where ";&#13;
                e.defineMIME("text/x-sql", {&#13;
                    name: "sql",&#13;
                    keywords: i(o + "begin"),&#13;
                    builtin: i(&#13;
                        "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric"&#13;
                    ),&#13;
                    atoms: i("false true null unknown"),&#13;
                    operatorChars: /^[*+\-%&lt;&gt;!=]/,&#13;
                    dateSQL: i("date time timestamp"),&#13;
                    support: i("ODBCdotTable doubleQuote binaryNumber hexNumber")&#13;
                }),&#13;
                    e.defineMIME("text/x-mssql", {&#13;
                        name: "sql",&#13;
                        client: i(&#13;
                            "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"&#13;
                        ),&#13;
                        keywords: i(&#13;
                            o +&#13;
                                "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "&#13;
                        ),&#13;
                        atoms: i("false true null unknown"),&#13;
                        operatorChars: /^[*+\-%&lt;&gt;!=]/,&#13;
                        dateSQL: i("date datetimeoffset datetime2 smalldatetime datetime time"),&#13;
                        hooks: { "@": r }&#13;
                    }),&#13;
                    e.defineMIME("text/x-mysql", {&#13;
                        name: "sql",&#13;
                        client: i(&#13;
                            "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"&#13;
                        ),&#13;
                        keywords: i(&#13;
                            o +&#13;
                                "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group groupby_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"&#13;
                        ),&#13;
                        atoms: i("false true null unknown"),&#13;
                        operatorChars: /^[*+\-%&lt;&gt;!=&amp;|^]/,&#13;
                        dateSQL: i("date time timestamp"),&#13;
                        support: i(&#13;
                            "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"&#13;
                        ),&#13;
                        hooks: { "@": r, "`": t, "\\": n }&#13;
                    }),&#13;
                    e.defineMIME("text/x-mariadb", {&#13;
                        name: "sql",&#13;
                        client: i(&#13;
                            "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"&#13;
                        ),&#13;
                        keywords: i(&#13;
                            o +&#13;
                                "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group groupby_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"&#13;
                        ),&#13;
                        atoms: i("false true null unknown"),&#13;
                        operatorChars: /^[*+\-%&lt;&gt;!=&amp;|^]/,&#13;
                        dateSQL: i("date time timestamp"),&#13;
                        support: i(&#13;
                            "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"&#13;
                        ),&#13;
                        hooks: { "@": r, "`": t, "\\": n }&#13;
                    }),&#13;
                    e.defineMIME("text/x-cassandra", {&#13;
                        name: "sql",&#13;
                        client: {},&#13;
                        keywords: i(&#13;
                            "use select from using consistency where limit first reversed first and in insert into values using consistency ttl update set delete truncate begin batch apply create keyspace with columnfamily primary key index on drop alter type add any one quorum all local_quorum each_quorum"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "ascii bigint blob boolean counter decimal double float int text timestamp uuid varchar varint"&#13;
                        ),&#13;
                        atoms: i("false true"),&#13;
                        operatorChars: /^[&lt;&gt;=]/,&#13;
                        dateSQL: {},&#13;
                        support: i("commentSlashSlash decimallessFloat"),&#13;
                        hooks: {}&#13;
                    }),&#13;
                    e.defineMIME("text/x-plsql", {&#13;
                        name: "sql",&#13;
                        client: i(&#13;
                            "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"&#13;
                        ),&#13;
                        keywords: i(&#13;
                            "abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least lenght lenghtb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"&#13;
                        ),&#13;
                        operatorChars: /^[*+\-%&lt;&gt;!=~]/,&#13;
                        dateSQL: i("date time timestamp"),&#13;
                        support: i("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")&#13;
                    }),&#13;
                    e.defineMIME("text/x-hive", {&#13;
                        name: "sql",&#13;
                        keywords: i(&#13;
                            "select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external false fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger true unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with"&#13;
                        ),&#13;
                        builtin: i(&#13;
                            "bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype"&#13;
                        ),&#13;
                        atoms: i("false true null unknown"),&#13;
                        operatorChars: /^[*+\-%&lt;&gt;!=]/,&#13;
                        dateSQL: i("date timestamp"),&#13;
                        support: i("ODBCdotTable doubleQuote binaryNumber hexNumber")&#13;
                    });&#13;
            })();&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e) {&#13;
            for (var t = {}, r = e.split(" "), n = 0; n &lt; r.length; ++n) t[r[n]] = !0;&#13;
            return t;&#13;
        }&#13;
        function r(e, t) {&#13;
            if (!t.startOfLine) return !1;&#13;
            for (;;) {&#13;
                if (!e.skipTo("\\")) {&#13;
                    e.skipToEnd(), (t.tokenize = null);&#13;
                    break;&#13;
                }&#13;
                if ((e.next(), e.eol())) {&#13;
                    t.tokenize = r;&#13;
                    break;&#13;
                }&#13;
            }&#13;
            return "meta";&#13;
        }&#13;
        function n(e, t) {&#13;
            if ((e.backUp(1), e.match(/(R|u8R|uR|UR|LR)/))) {&#13;
                var r = e.match(/"([^\s\\()]{0,16})\(/);&#13;
                return r ? ((t.cpp11RawStringDelim = r[1]), (t.tokenize = o), o(e, t)) : !1;&#13;
            }&#13;
            return e.match(/(u8|u|U|L)/) ? (e.match(/["']/, !1) ? "string" : !1) : (e.next(), !1);&#13;
        }&#13;
        function i(e, t) {&#13;
            for (var r; null != (r = e.next()); )&#13;
                if ('"' == r &amp;&amp; !e.eat('"')) {&#13;
                    t.tokenize = null;&#13;
                    break;&#13;
                }&#13;
            return "string";&#13;
        }&#13;
        function o(e, t) {&#13;
            var r = t.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&amp;"),&#13;
                n = e.match(new RegExp(".*?\\)" + r + '"'));&#13;
            return n ? (t.tokenize = null) : e.skipToEnd(), "string";&#13;
        }&#13;
        function a(t, r) {&#13;
            function n(e) {&#13;
                if (e) for (var t in e) e.hasOwnProperty(t) &amp;&amp; i.push(t);&#13;
            }&#13;
            "string" == typeof t &amp;&amp; (t = [t]);&#13;
            var i = [];&#13;
            n(r.keywords),&#13;
                n(r.builtin),&#13;
                n(r.atoms),&#13;
                i.length &amp;&amp; ((r.helperType = t[0]), e.registerHelper("hintWords", t[0], i));&#13;
            for (var o = 0; o &lt; t.length; ++o) e.defineMIME(t[o], r);&#13;
        }&#13;
        function s(e, t) {&#13;
            for (var r = !1; !e.eol(); ) {&#13;
                if (!r &amp;&amp; e.match('"""')) {&#13;
                    t.tokenize = null;&#13;
                    break;&#13;
                }&#13;
                r = "\\" == e.next() &amp;&amp; !r;&#13;
            }&#13;
            return "string";&#13;
        }&#13;
        e.defineMode("clike", function(t, r) {&#13;
            function n(e, t) {&#13;
                var r = e.next();&#13;
                if (v[r]) {&#13;
                    var n = v[r](e, t);&#13;
                    if (n !== !1) return n;&#13;
                }&#13;
                if ('"' == r || "'" == r) return (t.tokenize = i(r)), t.tokenize(e, t);&#13;
                if (/[\[\]{}\(\),;\:\.]/.test(r)) return (c = r), null;&#13;
                if (/\d/.test(r)) return e.eatWhile(/[\w\.]/), "number";&#13;
                if ("/" == r) {&#13;
                    if (e.eat("*")) return (t.tokenize = o), o(e, t);&#13;
                    if (e.eat("/")) return e.skipToEnd(), "comment";&#13;
                }&#13;
                if (x.test(r)) return e.eatWhile(x), "operator";&#13;
                e.eatWhile(/[\w\$_\xa1-\uffff]/);&#13;
                var a = e.current();&#13;
                return m.propertyIsEnumerable(a)&#13;
                    ? (p.propertyIsEnumerable(a) &amp;&amp; (c = "newstatement"), "keyword")&#13;
                    : h.propertyIsEnumerable(a)&#13;
                        ? (p.propertyIsEnumerable(a) &amp;&amp; (c = "newstatement"), "builtin")&#13;
                        : g.propertyIsEnumerable(a)&#13;
                            ? "atom"&#13;
                            : "variable";&#13;
            }&#13;
            function i(e) {&#13;
                return function(t, r) {&#13;
                    for (var n, i = !1, o = !1; null != (n = t.next()); ) {&#13;
                        if (n == e &amp;&amp; !i) {&#13;
                            o = !0;&#13;
                            break;&#13;
                        }&#13;
                        i = !i &amp;&amp; "\\" == n;&#13;
                    }&#13;
                    return (o || (!i &amp;&amp; !b)) &amp;&amp; (r.tokenize = null), "string";&#13;
                };&#13;
            }&#13;
            function o(e, t) {&#13;
                for (var r, n = !1; (r = e.next()); ) {&#13;
                    if ("/" == r &amp;&amp; n) {&#13;
                        t.tokenize = null;&#13;
                        break;&#13;
                    }&#13;
                    n = "*" == r;&#13;
                }&#13;
                return "comment";&#13;
            }&#13;
            function a(e, t, r, n, i) {&#13;
                (this.indented = e),&#13;
                    (this.column = t),&#13;
                    (this.type = r),&#13;
                    (this.align = n),&#13;
                    (this.prev = i);&#13;
            }&#13;
            function s(e, t, r) {&#13;
                var n = e.indented;&#13;
                return (&#13;
                    e.context &amp;&amp; "statement" == e.context.type &amp;&amp; (n = e.context.indented),&#13;
                    (e.context = new a(n, t, r, null, e.context))&#13;
                );&#13;
            }&#13;
            function l(e) {&#13;
                var t = e.context.type;&#13;
                return (&#13;
                    (")" == t || "]" == t || "}" == t) &amp;&amp; (e.indented = e.context.indented),&#13;
                    (e.context = e.context.prev)&#13;
                );&#13;
            }&#13;
            var c,&#13;
                u = t.indentUnit,&#13;
                d = r.statementIndentUnit || u,&#13;
                f = r.dontAlignCalls,&#13;
                m = r.keywords || {},&#13;
                h = r.builtin || {},&#13;
                p = r.blockKeywords || {},&#13;
                g = r.atoms || {},&#13;
                v = r.hooks || {},&#13;
                b = r.multiLineStrings,&#13;
                y = r.indentStatements !== !1,&#13;
                x = /[+\-*&amp;%=&lt;&gt;!?|\/]/;&#13;
            return {&#13;
                startState: function(e) {&#13;
                    return {&#13;
                        tokenize: null,&#13;
                        context: new a((e || 0) - u, 0, "top", !1),&#13;
                        indented: 0,&#13;
                        startOfLine: !0&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    var r = t.context;&#13;
                    if (&#13;
                        (e.sol() &amp;&amp;&#13;
                            (null == r.align &amp;&amp; (r.align = !1),&#13;
                            (t.indented = e.indentation()),&#13;
                            (t.startOfLine = !0)),&#13;
                        e.eatSpace())&#13;
                    )&#13;
                        return null;&#13;
                    c = null;&#13;
                    var i = (t.tokenize || n)(e, t);&#13;
                    if ("comment" == i || "meta" == i) return i;&#13;
                    if (&#13;
                        (null == r.align &amp;&amp; (r.align = !0),&#13;
                        (";" != c &amp;&amp; ":" != c &amp;&amp; "," != c) || "statement" != r.type)&#13;
                    )&#13;
                        if ("{" == c) s(t, e.column(), "}");&#13;
                        else if ("[" == c) s(t, e.column(), "]");&#13;
                        else if ("(" == c) s(t, e.column(), ")");&#13;
                        else if ("}" == c) {&#13;
                            for (; "statement" == r.type; ) r = l(t);&#13;
                            for ("}" == r.type &amp;&amp; (r = l(t)); "statement" == r.type; ) r = l(t);&#13;
                        } else&#13;
                            c == r.type&#13;
                                ? l(t)&#13;
                                : y &amp;&amp;&#13;
                                  ((("}" == r.type || "top" == r.type) &amp;&amp; ";" != c) ||&#13;
                                      ("statement" == r.type &amp;&amp; "newstatement" == c)) &amp;&amp;&#13;
                                  s(t, e.column(), "statement");&#13;
                    else l(t);&#13;
                    return (t.startOfLine = !1), i;&#13;
                },&#13;
                indent: function(t, r) {&#13;
                    if (t.tokenize != n &amp;&amp; null != t.tokenize) return e.Pass;&#13;
                    var i = t.context,&#13;
                        o = r &amp;&amp; r.charAt(0);&#13;
                    "statement" == i.type &amp;&amp; "}" == o &amp;&amp; (i = i.prev);&#13;
                    var a = o == i.type;&#13;
                    return "statement" == i.type&#13;
                        ? i.indented + ("{" == o ? 0 : d)&#13;
                        : !i.align || (f &amp;&amp; ")" == i.type)&#13;
                            ? ")" != i.type || a&#13;
                                ? i.indented + (a ? 0 : u)&#13;
                                : i.indented + d&#13;
                            : i.column + (a ? 0 : 1);&#13;
                },&#13;
                electricChars: "{}",&#13;
                blockCommentStart: "/*",&#13;
                blockCommentEnd: "*/",&#13;
                lineComment: "//",&#13;
                fold: "brace"&#13;
            };&#13;
        });&#13;
        var l =&#13;
            "auto if break int case long char register continue return default short do sizeof double static else struct entry switch extern typedef float union for unsigned goto while enum void const signed volatile";&#13;
        a(["text/x-csrc", "text/x-c", "text/x-chdr"], {&#13;
            name: "clike",&#13;
            keywords: t(l),&#13;
            blockKeywords: t("case do else for if switch while struct"),&#13;
            atoms: t("null"),&#13;
            hooks: { "#": r },&#13;
            modeProps: { fold: ["brace", "include"] }&#13;
        }),&#13;
            a(["text/x-c++src", "text/x-c++hdr"], {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    l +&#13;
                        " asm dynamic_cast namespace reinterpret_cast try bool explicit new static_cast typeid catch operator template typename class friend private this using const_cast inline public throw virtual delete mutable protected wchar_t alignas alignof constexpr decltype nullptr noexcept thread_local final static_assert override"&#13;
                ),&#13;
                blockKeywords: t("catch class do else finally for if struct switch try while"),&#13;
                atoms: t("true false null"),&#13;
                hooks: { "#": r, u: n, U: n, L: n, R: n },&#13;
                modeProps: { fold: ["brace", "include"] }&#13;
            }),&#13;
            a("text/x-java", {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    "abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try void volatile while"&#13;
                ),&#13;
                blockKeywords: t("catch class do else finally for if switch try while"),&#13;
                atoms: t("true false null"),&#13;
                hooks: {&#13;
                    "@": function(e) {&#13;
                        return e.eatWhile(/[\w\$_]/), "meta";&#13;
                    }&#13;
                },&#13;
                modeProps: { fold: ["brace", "import"] }&#13;
            }),&#13;
            a("text/x-csharp", {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    "abstract as base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"&#13;
                ),&#13;
                blockKeywords: t(&#13;
                    "catch class do else finally for foreach if struct switch try while"&#13;
                ),&#13;
                builtin: t(&#13;
                    "Boolean Byte Char DateTime DateTimeOffset Decimal Double Guid Int16 Int32 Int64 Object SByte Single String TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"&#13;
                ),&#13;
                atoms: t("true false null"),&#13;
                hooks: {&#13;
                    "@": function(e, t) {&#13;
                        return e.eat('"')&#13;
                            ? ((t.tokenize = i), i(e, t))&#13;
                            : (e.eatWhile(/[\w\$_]/), "meta");&#13;
                    }&#13;
                }&#13;
            }),&#13;
            a("text/x-scala", {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    "abstract case catch class def do else extends false final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try trye type val var while with yield _ : = =&gt; &lt;- &lt;: &lt;% &gt;: # @ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector :: #:: Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"&#13;
                ),&#13;
                multiLineStrings: !0,&#13;
                blockKeywords: t(&#13;
                    "catch class do else finally for forSome if match switch try while"&#13;
                ),&#13;
                atoms: t("true false null"),&#13;
                indentStatements: !1,&#13;
                hooks: {&#13;
                    "@": function(e) {&#13;
                        return e.eatWhile(/[\w\$_]/), "meta";&#13;
                    },&#13;
                    '"': function(e, t) {&#13;
                        return e.match('""') ? ((t.tokenize = s), t.tokenize(e, t)) : !1;&#13;
                    },&#13;
                    "'": function(e) {&#13;
                        return e.eatWhile(/[\w\$_\xa1-\uffff]/), "atom";&#13;
                    }&#13;
                }&#13;
            }),&#13;
            a(["x-shader/x-vertex", "x-shader/x-fragment"], {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    "float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4 sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"&#13;
                ),&#13;
                blockKeywords: t("for while do if else struct"),&#13;
                builtin: t(&#13;
                    "radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"&#13;
                ),&#13;
                atoms: t(&#13;
                    "true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"&#13;
                ),&#13;
                hooks: { "#": r },&#13;
                modeProps: { fold: ["brace", "include"] }&#13;
            }),&#13;
            a("text/x-nesc", {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    l +&#13;
                        "as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"&#13;
                ),&#13;
                blockKeywords: t("case do else for if switch while struct"),&#13;
                atoms: t("null"),&#13;
                hooks: { "#": r },&#13;
                modeProps: { fold: ["brace", "include"] }&#13;
            }),&#13;
            a("text/x-objectivec", {&#13;
                name: "clike",&#13;
                keywords: t(&#13;
                    l +&#13;
                        "inline restrict _Bool _Complex _Imaginery BOOL Class bycopy byref id IMP in inout nil oneway out Protocol SEL self super atomic nonatomic retain copy readwrite readonly"&#13;
                ),&#13;
                atoms: t("YES NO NULL NILL ON OFF"),&#13;
                hooks: {&#13;
                    "@": function(e) {&#13;
                        return e.eatWhile(/[\w\$]/), "keyword";&#13;
                    },&#13;
                    "#": r&#13;
                },&#13;
                modeProps: { fold: "brace" }&#13;
            });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../htmlmixed/htmlmixed"),&#13;
                  require("../clike/clike")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror", "../htmlmixed/htmlmixed", "../clike/clike"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e) {&#13;
            for (var t = {}, r = e.split(" "), n = 0; n &lt; r.length; ++n) t[r[n]] = !0;&#13;
            return t;&#13;
        }&#13;
        function r(e, t) {&#13;
            return 0 == e.length&#13;
                ? n(t)&#13;
                : function(i, o) {&#13;
                      for (var a = e[0], s = 0; s &lt; a.length; s++)&#13;
                          if (i.match(a[s][0])) return (o.tokenize = r(e.slice(1), t)), a[s][1];&#13;
                      return (o.tokenize = n(t)), "string";&#13;
                  };&#13;
        }&#13;
        function n(e) {&#13;
            return function(t, r) {&#13;
                return i(t, r, e);&#13;
            };&#13;
        }&#13;
        function i(e, t, n) {&#13;
            if (e.match("${", !1) || e.match("{$", !1)) return (t.tokenize = null), "string";&#13;
            if (e.match(/^\$[a-zA-Z_][a-zA-Z0-9_]*/))&#13;
                return (&#13;
                    e.match("[", !1) &amp;&amp;&#13;
                        (t.tokenize = r(&#13;
                            [&#13;
                                [["[", null]],&#13;
                                [&#13;
                                    [/\d[\w\.]*/, "number"],&#13;
                                    [/\$[a-zA-Z_][a-zA-Z0-9_]*/, "variable-2"],&#13;
                                    [/[\w\$]+/, "variable"]&#13;
                                ],&#13;
                                [["]", null]]&#13;
                            ],&#13;
                            n&#13;
                        )),&#13;
                    e.match(/\-\&gt;\w/, !1) &amp;&amp;&#13;
                        (t.tokenize = r([[["-&gt;", null]], [[/[\w]+/, "variable"]]], n)),&#13;
                    "variable-2"&#13;
                );&#13;
            for (&#13;
                var i = !1;&#13;
                !e.eol() &amp;&amp;&#13;
                (i || (!e.match("{$", !1) &amp;&amp; !e.match(/^(\$[a-zA-Z_][a-zA-Z0-9_]*|\$\{)/, !1)));&#13;
&#13;
            ) {&#13;
                if (!i &amp;&amp; e.match(n)) {&#13;
                    (t.tokenize = null), t.tokStack.pop(), t.tokStack.pop();&#13;
                    break;&#13;
                }&#13;
                i = "\\" == e.next() &amp;&amp; !i;&#13;
            }&#13;
            return "string";&#13;
        }&#13;
        var o =&#13;
                "abstract and array as break case catch class clone const continue declare default do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach function global goto if implements interface instanceof namespace new or private protected public static switch throw trait try use var while xor die echo empty exit eval include include_once isset list require require_once return print unset __halt_compiler self static parent yield insteadof finally",&#13;
            a =&#13;
                "true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__",&#13;
            s =&#13;
                "func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count";&#13;
        e.registerHelper("hintWords", "php", [o, a, s].join(" ").split(" ")),&#13;
            e.registerHelper("wordChars", "php", /[\w$]/);&#13;
        var l = {&#13;
            name: "clike",&#13;
            helperType: "php",&#13;
            keywords: t(o),&#13;
            blockKeywords: t("catch do else elseif for foreach if switch try while finally"),&#13;
            atoms: t(a),&#13;
            builtin: t(s),&#13;
            multiLineStrings: !0,&#13;
            hooks: {&#13;
                $: function(e) {&#13;
                    return e.eatWhile(/[\w\$_]/), "variable-2";&#13;
                },&#13;
                "&lt;": function(e, t) {&#13;
                    if (e.match(/&lt;&lt;/)) {&#13;
                        e.eatWhile(/[\w\.]/);&#13;
                        var r = e.current().slice(3);&#13;
                        if (r)&#13;
                            return (&#13;
                                (t.tokStack || (t.tokStack = [])).push(r, 0),&#13;
                                (t.tokenize = n(r)),&#13;
                                "string"&#13;
                            );&#13;
                    }&#13;
                    return !1;&#13;
                },&#13;
                "#": function(e) {&#13;
                    for (; !e.eol() &amp;&amp; !e.match("?&gt;", !1); ) e.next();&#13;
                    return "comment";&#13;
                },&#13;
                "/": function(e) {&#13;
                    if (e.eat("/")) {&#13;
                        for (; !e.eol() &amp;&amp; !e.match("?&gt;", !1); ) e.next();&#13;
                        return "comment";&#13;
                    }&#13;
                    return !1;&#13;
                },&#13;
                '"': function(e, t) {&#13;
                    return (&#13;
                        (t.tokStack || (t.tokStack = [])).push('"', 0),&#13;
                        (t.tokenize = n('"')),&#13;
                        "string"&#13;
                    );&#13;
                },&#13;
                "{": function(e, t) {&#13;
                    return (&#13;
                        t.tokStack &amp;&amp; t.tokStack.length &amp;&amp; t.tokStack[t.tokStack.length - 1]++, !1&#13;
                    );&#13;
                },&#13;
                "}": function(e, t) {&#13;
                    return (&#13;
                        t.tokStack &amp;&amp;&#13;
                            t.tokStack.length &gt; 0 &amp;&amp;&#13;
                            !--t.tokStack[t.tokStack.length - 1] &amp;&amp;&#13;
                            (t.tokenize = n(t.tokStack[t.tokStack.length - 2])),&#13;
                        !1&#13;
                    );&#13;
                }&#13;
            }&#13;
        };&#13;
        e.defineMode(&#13;
            "php",&#13;
            function(t, r) {&#13;
                function n(e, t) {&#13;
                    var r = t.curMode == o;&#13;
                    if (&#13;
                        (e.sol() &amp;&amp;&#13;
                            t.pending &amp;&amp;&#13;
                            '"' != t.pending &amp;&amp;&#13;
                            "'" != t.pending &amp;&amp;&#13;
                            (t.pending = null),&#13;
                        r)&#13;
                    )&#13;
                        return r &amp;&amp; null == t.php.tokenize &amp;&amp; e.match("?&gt;")&#13;
                            ? ((t.curMode = i), (t.curState = t.html), "meta")&#13;
                            : o.token(e, t.curState);&#13;
                    if (e.match(/^&lt;\?\w*/)) return (t.curMode = o), (t.curState = t.php), "meta";&#13;
                    if ('"' == t.pending || "'" == t.pending) {&#13;
                        for (; !e.eol() &amp;&amp; e.next() != t.pending; );&#13;
                        var n = "string";&#13;
                    } else if (t.pending &amp;&amp; e.pos &lt; t.pending.end) {&#13;
                        e.pos = t.pending.end;&#13;
                        var n = t.pending.style;&#13;
                    } else var n = i.token(e, t.curState);&#13;
                    t.pending &amp;&amp; (t.pending = null);&#13;
                    var a,&#13;
                        s = e.current(),&#13;
                        l = s.search(/&lt;\?/);&#13;
                    return (&#13;
                        -1 != l &amp;&amp;&#13;
                            ("string" == n &amp;&amp; (a = s.match(/[\'\"]$/)) &amp;&amp; !/\?&gt;/.test(s)&#13;
                                ? (t.pending = a[0])&#13;
                                : (t.pending = { end: e.pos, style: n }),&#13;
                            e.backUp(s.length - l)),&#13;
                        n&#13;
                    );&#13;
                }&#13;
                var i = e.getMode(t, "text/html"),&#13;
                    o = e.getMode(t, l);&#13;
                return {&#13;
                    startState: function() {&#13;
                        var t = e.startState(i),&#13;
                            n = e.startState(o);&#13;
                        return {&#13;
                            html: t,&#13;
                            php: n,&#13;
                            curMode: r.startOpen ? o : i,&#13;
                            curState: r.startOpen ? n : t,&#13;
                            pending: null&#13;
                        };&#13;
                    },&#13;
                    copyState: function(t) {&#13;
                        var r,&#13;
                            n = t.html,&#13;
                            a = e.copyState(i, n),&#13;
                            s = t.php,&#13;
                            l = e.copyState(o, s);&#13;
                        return (&#13;
                            (r = t.curMode == i ? a : l),&#13;
                            { html: a, php: l, curMode: t.curMode, curState: r, pending: t.pending }&#13;
                        );&#13;
                    },&#13;
                    token: n,&#13;
                    indent: function(e, t) {&#13;
                        return (e.curMode != o &amp;&amp; /^\s*&lt;\//.test(t)) ||&#13;
                            (e.curMode == o &amp;&amp; /^\?&gt;/.test(t))&#13;
                            ? i.indent(e.html, t)&#13;
                            : e.curMode.indent(e.curState, t);&#13;
                    },&#13;
                    blockCommentStart: "/*",&#13;
                    blockCommentEnd: "*/",&#13;
                    lineComment: "//",&#13;
                    innerMode: function(e) {&#13;
                        return { state: e.curState, mode: e.curMode };&#13;
                    }&#13;
                };&#13;
            },&#13;
            "htmlmixed",&#13;
            "clike"&#13;
        ),&#13;
            e.defineMIME("application/x-httpd-php", "php"),&#13;
            e.defineMIME("application/x-httpd-php-open", { name: "php", startOpen: !0 }),&#13;
            e.defineMIME("text/x-php", l);&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("xml", function(t, r) {&#13;
            function n(e, t) {&#13;
                function r(r) {&#13;
                    return (t.tokenize = r), r(e, t);&#13;
                }&#13;
                var n = e.next();&#13;
                if ("&lt;" == n)&#13;
                    return e.eat("!")&#13;
                        ? e.eat("[")&#13;
                            ? e.match("CDATA[")&#13;
                                ? r(a("atom", "]]&gt;"))&#13;
                                : null&#13;
                            : e.match("--")&#13;
                                ? r(a("comment", "--&gt;"))&#13;
                                : e.match("DOCTYPE", !0, !0)&#13;
                                    ? (e.eatWhile(/[\w\._\-]/), r(s(1)))&#13;
                                    : null&#13;
                        : e.eat("?")&#13;
                            ? (e.eatWhile(/[\w\._\-]/), (t.tokenize = a("meta", "?&gt;")), "meta")&#13;
                            : ((_ = e.eat("/") ? "closeTag" : "openTag"),&#13;
                              (t.tokenize = i),&#13;
                              "tag bracket");&#13;
                if ("&amp;" == n) {&#13;
                    var o;&#13;
                    return (&#13;
                        (o = e.eat("#")&#13;
                            ? e.eat("x")&#13;
                                ? e.eatWhile(/[a-fA-F\d]/) &amp;&amp; e.eat(";")&#13;
                                : e.eatWhile(/[\d]/) &amp;&amp; e.eat(";")&#13;
                            : e.eatWhile(/[\w\.\-:]/) &amp;&amp; e.eat(";")),&#13;
                        o ? "atom" : "error"&#13;
                    );&#13;
                }&#13;
                return e.eatWhile(/[^&amp;&lt;]/), null;&#13;
            }&#13;
            function i(e, t) {&#13;
                var r = e.next();&#13;
                if ("&gt;" == r || ("/" == r &amp;&amp; e.eat("&gt;")))&#13;
                    return (&#13;
                        (t.tokenize = n), (_ = "&gt;" == r ? "endTag" : "selfcloseTag"), "tag bracket"&#13;
                    );&#13;
                if ("=" == r) return (_ = "equals"), null;&#13;
                if ("&lt;" == r) {&#13;
                    (t.tokenize = n), (t.state = d), (t.tagName = t.tagStart = null);&#13;
                    var i = t.tokenize(e, t);&#13;
                    return i ? i + " tag error" : "tag error";&#13;
                }&#13;
                return /[\'\"]/.test(r)&#13;
                    ? ((t.tokenize = o(r)), (t.stringStartCol = e.column()), t.tokenize(e, t))&#13;
                    : (e.match(/^[^\s\u00a0=&lt;&gt;\"\']*[^\s\u00a0=&lt;&gt;\"\'\/]/), "word");&#13;
            }&#13;
            function o(e) {&#13;
                var t = function(t, r) {&#13;
                    for (; !t.eol(); )&#13;
                        if (t.next() == e) {&#13;
                            r.tokenize = i;&#13;
                            break;&#13;
                        }&#13;
                    return "string";&#13;
                };&#13;
                return (t.isInAttribute = !0), t;&#13;
            }&#13;
            function a(e, t) {&#13;
                return function(r, i) {&#13;
                    for (; !r.eol(); ) {&#13;
                        if (r.match(t)) {&#13;
                            i.tokenize = n;&#13;
                            break;&#13;
                        }&#13;
                        r.next();&#13;
                    }&#13;
                    return e;&#13;
                };&#13;
            }&#13;
            function s(e) {&#13;
                return function(t, r) {&#13;
                    for (var i; null != (i = t.next()); ) {&#13;
                        if ("&lt;" == i) return (r.tokenize = s(e + 1)), r.tokenize(t, r);&#13;
                        if ("&gt;" == i) {&#13;
                            if (1 == e) {&#13;
                                r.tokenize = n;&#13;
                                break;&#13;
                            }&#13;
                            return (r.tokenize = s(e - 1)), r.tokenize(t, r);&#13;
                        }&#13;
                    }&#13;
                    return "meta";&#13;
                };&#13;
            }&#13;
            function l(e, t, r) {&#13;
                (this.prev = e.context),&#13;
                    (this.tagName = t),&#13;
                    (this.indent = e.indented),&#13;
                    (this.startOfLine = r),&#13;
                    (S.doNotIndent.hasOwnProperty(t) || (e.context &amp;&amp; e.context.noIndent)) &amp;&amp;&#13;
                        (this.noIndent = !0);&#13;
            }&#13;
            function c(e) {&#13;
                e.context &amp;&amp; (e.context = e.context.prev);&#13;
            }&#13;
            function u(e, t) {&#13;
                for (var r; ; ) {&#13;
                    if (!e.context) return;&#13;
                    if (&#13;
                        ((r = e.context.tagName),&#13;
                        !S.contextGrabbers.hasOwnProperty(r) ||&#13;
                            !S.contextGrabbers[r].hasOwnProperty(t))&#13;
                    )&#13;
                        return;&#13;
                    c(e);&#13;
                }&#13;
            }&#13;
            function d(e, t, r) {&#13;
                return "openTag" == e ? ((r.tagStart = t.column()), f) : "closeTag" == e ? m : d;&#13;
            }&#13;
            function f(e, t, r) {&#13;
                return "word" == e&#13;
                    ? ((r.tagName = t.current()), (C = "tag"), g)&#13;
                    : ((C = "error"), f);&#13;
            }&#13;
            function m(e, t, r) {&#13;
                if ("word" == e) {&#13;
                    var n = t.current();&#13;
                    return (&#13;
                        r.context &amp;&amp;&#13;
                            r.context.tagName != n &amp;&amp;&#13;
                            S.implicitlyClosed.hasOwnProperty(r.context.tagName) &amp;&amp;&#13;
                            c(r),&#13;
                        r.context &amp;&amp; r.context.tagName == n&#13;
                            ? ((C = "tag"), h)&#13;
                            : ((C = "tag error"), p)&#13;
                    );&#13;
                }&#13;
                return (C = "error"), p;&#13;
            }&#13;
            function h(e, t, r) {&#13;
                return "endTag" != e ? ((C = "error"), h) : (c(r), d);&#13;
            }&#13;
            function p(e, t, r) {&#13;
                return (C = "error"), h(e, t, r);&#13;
            }&#13;
            function g(e, t, r) {&#13;
                if ("word" == e) return (C = "attribute"), v;&#13;
                if ("endTag" == e || "selfcloseTag" == e) {&#13;
                    var n = r.tagName,&#13;
                        i = r.tagStart;&#13;
                    return (&#13;
                        (r.tagName = r.tagStart = null),&#13;
                        "selfcloseTag" == e || S.autoSelfClosers.hasOwnProperty(n)&#13;
                            ? u(r, n)&#13;
                            : (u(r, n), (r.context = new l(r, n, i == r.indented))),&#13;
                        d&#13;
                    );&#13;
                }&#13;
                return (C = "error"), g;&#13;
            }&#13;
            function v(e, t, r) {&#13;
                return "equals" == e ? b : (S.allowMissing || (C = "error"), g(e, t, r));&#13;
            }&#13;
            function b(e, t, r) {&#13;
                return "string" == e&#13;
                    ? y&#13;
                    : "word" == e &amp;&amp; S.allowUnquoted&#13;
                        ? ((C = "string"), g)&#13;
                        : ((C = "error"), g(e, t, r));&#13;
            }&#13;
            function y(e, t, r) {&#13;
                return "string" == e ? y : g(e, t, r);&#13;
            }&#13;
            var x = t.indentUnit,&#13;
                k = r.multilineTagIndentFactor || 1,&#13;
                w = r.multilineTagIndentPastTag;&#13;
            null == w &amp;&amp; (w = !0);&#13;
            var _,&#13;
                C,&#13;
                S = r.htmlMode&#13;
                    ? {&#13;
                          autoSelfClosers: {&#13;
                              area: !0,&#13;
                              base: !0,&#13;
                              br: !0,&#13;
                              col: !0,&#13;
                              command: !0,&#13;
                              embed: !0,&#13;
                              frame: !0,&#13;
                              hr: !0,&#13;
                              img: !0,&#13;
                              input: !0,&#13;
                              keygen: !0,&#13;
                              link: !0,&#13;
                              meta: !0,&#13;
                              param: !0,&#13;
                              source: !0,&#13;
                              track: !0,&#13;
                              wbr: !0,&#13;
                              menuitem: !0&#13;
                          },&#13;
                          implicitlyClosed: {&#13;
                              dd: !0,&#13;
                              li: !0,&#13;
                              optgroup: !0,&#13;
                              option: !0,&#13;
                              p: !0,&#13;
                              rp: !0,&#13;
                              rt: !0,&#13;
                              tbody: !0,&#13;
                              td: !0,&#13;
                              tfoot: !0,&#13;
                              th: !0,&#13;
                              tr: !0&#13;
                          },&#13;
                          contextGrabbers: {&#13;
                              dd: { dd: !0, dt: !0 },&#13;
                              dt: { dd: !0, dt: !0 },&#13;
                              li: { li: !0 },&#13;
                              option: { option: !0, optgroup: !0 },&#13;
                              optgroup: { optgroup: !0 },&#13;
                              p: {&#13;
                                  address: !0,&#13;
                                  article: !0,&#13;
                                  aside: !0,&#13;
                                  blockquote: !0,&#13;
                                  dir: !0,&#13;
                                  div: !0,&#13;
                                  dl: !0,&#13;
                                  fieldset: !0,&#13;
                                  footer: !0,&#13;
                                  form: !0,&#13;
                                  h1: !0,&#13;
                                  h2: !0,&#13;
                                  h3: !0,&#13;
                                  h4: !0,&#13;
                                  h5: !0,&#13;
                                  h6: !0,&#13;
                                  header: !0,&#13;
                                  hgroup: !0,&#13;
                                  hr: !0,&#13;
                                  menu: !0,&#13;
                                  nav: !0,&#13;
                                  ol: !0,&#13;
                                  p: !0,&#13;
                                  pre: !0,&#13;
                                  section: !0,&#13;
                                  table: !0,&#13;
                                  ul: !0&#13;
                              },&#13;
                              rp: { rp: !0, rt: !0 },&#13;
                              rt: { rp: !0, rt: !0 },&#13;
                              tbody: { tbody: !0, tfoot: !0 },&#13;
                              td: { td: !0, th: !0 },&#13;
                              tfoot: { tbody: !0 },&#13;
                              th: { td: !0, th: !0 },&#13;
                              thead: { tbody: !0, tfoot: !0 },&#13;
                              tr: { tr: !0 }&#13;
                          },&#13;
                          doNotIndent: { pre: !0 },&#13;
                          allowUnquoted: !0,&#13;
                          allowMissing: !0,&#13;
                          caseFold: !0&#13;
                      }&#13;
                    : {&#13;
                          autoSelfClosers: {},&#13;
                          implicitlyClosed: {},&#13;
                          contextGrabbers: {},&#13;
                          doNotIndent: {},&#13;
                          allowUnquoted: !1,&#13;
                          allowMissing: !1,&#13;
                          caseFold: !1&#13;
                      },&#13;
                T = r.alignCDATA;&#13;
            return {&#13;
                startState: function() {&#13;
                    return {&#13;
                        tokenize: n,&#13;
                        state: d,&#13;
                        indented: 0,&#13;
                        tagName: null,&#13;
                        tagStart: null,&#13;
                        context: null&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if ((!t.tagName &amp;&amp; e.sol() &amp;&amp; (t.indented = e.indentation()), e.eatSpace()))&#13;
                        return null;&#13;
                    _ = null;&#13;
                    var r = t.tokenize(e, t);&#13;
                    return (&#13;
                        (r || _) &amp;&amp;&#13;
                            "comment" != r &amp;&amp;&#13;
                            ((C = null),&#13;
                            (t.state = t.state(_ || r, e, t)),&#13;
                            C &amp;&amp; (r = "error" == C ? r + " error" : C)),&#13;
                        r&#13;
                    );&#13;
                },&#13;
                indent: function(t, r, o) {&#13;
                    var a = t.context;&#13;
                    if (t.tokenize.isInAttribute)&#13;
                        return t.tagStart == t.indented ? t.stringStartCol + 1 : t.indented + x;&#13;
                    if (a &amp;&amp; a.noIndent) return e.Pass;&#13;
                    if (t.tokenize != i &amp;&amp; t.tokenize != n)&#13;
                        return o ? o.match(/^(\s*)/)[0].length : 0;&#13;
                    if (t.tagName)&#13;
                        return w ? t.tagStart + t.tagName.length + 2 : t.tagStart + x * k;&#13;
                    if (T &amp;&amp; /&lt;!\[CDATA\[/.test(r)) return 0;&#13;
                    var s = r &amp;&amp; /^&lt;(\/)?([\w_:\.-]*)/.exec(r);&#13;
                    if (s &amp;&amp; s[1])&#13;
                        for (; a; ) {&#13;
                            if (a.tagName == s[2]) {&#13;
                                a = a.prev;&#13;
                                break;&#13;
                            }&#13;
                            if (!S.implicitlyClosed.hasOwnProperty(a.tagName)) break;&#13;
                            a = a.prev;&#13;
                        }&#13;
                    else if (s)&#13;
                        for (; a; ) {&#13;
                            var l = S.contextGrabbers[a.tagName];&#13;
                            if (!l || !l.hasOwnProperty(s[2])) break;&#13;
                            a = a.prev;&#13;
                        }&#13;
                    for (; a &amp;&amp; !a.startOfLine; ) a = a.prev;&#13;
                    return a ? a.indent + x : 0;&#13;
                },&#13;
                electricInput: /&lt;\/[\s\w:]+&gt;$/,&#13;
                blockCommentStart: "&lt;!--",&#13;
                blockCommentEnd: "--&gt;",&#13;
                configuration: r.htmlMode ? "html" : "xml",&#13;
                helperType: r.htmlMode ? "html" : "xml"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/xml", "xml"),&#13;
            e.defineMIME("application/xml", "xml"),&#13;
            e.mimeModes.hasOwnProperty("text/html") ||&#13;
                e.defineMIME("text/html", { name: "xml", htmlMode: !0 });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"), require("../xml/xml"), require("../meta"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror", "../xml/xml", "../meta"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode(&#13;
            "markdown",&#13;
            function(t, r) {&#13;
                function n(r) {&#13;
                    if (e.findModeByName) {&#13;
                        var n = e.findModeByName(r);&#13;
                        n &amp;&amp; (r = n.mime || n.mimes[0]);&#13;
                    }&#13;
                    var i = e.getMode(t, r);&#13;
                    return "null" == i.name ? null : i;&#13;
                }&#13;
                function i(e, t, r) {&#13;
                    return (t.f = t.inline = r), r(e, t);&#13;
                }&#13;
                function o(e, t, r) {&#13;
                    return (t.f = t.block = r), r(e, t);&#13;
                }&#13;
                function a(e) {&#13;
                    return (&#13;
                        (e.linkTitle = !1),&#13;
                        (e.em = !1),&#13;
                        (e.strong = !1),&#13;
                        (e.strikethrough = !1),&#13;
                        (e.quote = 0),&#13;
                        k || e.f != l || ((e.f = m), (e.block = s)),&#13;
                        (e.trailingSpace = 0),&#13;
                        (e.trailingSpaceNewLine = !1),&#13;
                        (e.thisLineHasContent = !1),&#13;
                        null&#13;
                    );&#13;
                }&#13;
                function s(e, t) {&#13;
                    var o = e.sol(),&#13;
                        a = t.list !== !1;&#13;
                    t.list !== !1 &amp;&amp; t.indentationDiff &gt;= 0&#13;
                        ? (t.indentationDiff &lt; 4 &amp;&amp; (t.indentation -= t.indentationDiff),&#13;
                          (t.list = null))&#13;
                        : t.list !== !1 &amp;&amp; t.indentation &gt; 0&#13;
                            ? ((t.list = null), (t.listDepth = Math.floor(t.indentation / 4)))&#13;
                            : t.list !== !1 &amp;&amp; ((t.list = !1), (t.listDepth = 0));&#13;
                    var s = null;&#13;
                    if (t.indentationDiff &gt;= 4) return (t.indentation -= 4), e.skipToEnd(), S;&#13;
                    if (e.eatSpace()) return null;&#13;
                    if ((s = e.match(U)))&#13;
                        return (&#13;
                            (t.header = s[0].length &lt;= 6 ? s[0].length : 6),&#13;
                            r.highlightFormatting &amp;&amp; (t.formatting = "header"),&#13;
                            (t.f = t.inline),&#13;
                            d(t)&#13;
                        );&#13;
                    if (t.prevLineHasContent &amp;&amp; (s = e.match(W)))&#13;
                        return (&#13;
                            (t.header = "=" == s[0].charAt(0) ? 1 : 2),&#13;
                            r.highlightFormatting &amp;&amp; (t.formatting = "header"),&#13;
                            (t.f = t.inline),&#13;
                            d(t)&#13;
                        );&#13;
                    if (e.eat("&gt;"))&#13;
                        return (&#13;
                            t.indentation++,&#13;
                            (t.quote = o ? 1 : t.quote + 1),&#13;
                            r.highlightFormatting &amp;&amp; (t.formatting = "quote"),&#13;
                            e.eatSpace(),&#13;
                            d(t)&#13;
                        );&#13;
                    if ("[" === e.peek()) return i(e, t, v);&#13;
                    if (e.match(F, !0)) return q;&#13;
                    if ((!t.prevLineHasContent || a) &amp;&amp; (e.match(H, !1) || e.match(N, !1))) {&#13;
                        var l = null;&#13;
                        return (&#13;
                            e.match(H, !0) ? (l = "ul") : (e.match(N, !0), (l = "ol")),&#13;
                            (t.indentation += 4),&#13;
                            (t.list = !0),&#13;
                            t.listDepth++,&#13;
                            r.taskLists &amp;&amp; e.match(B, !1) &amp;&amp; (t.taskList = !0),&#13;
                            (t.f = t.inline),&#13;
                            r.highlightFormatting &amp;&amp; (t.formatting = ["list", "list-" + l]),&#13;
                            d(t)&#13;
                        );&#13;
                    }&#13;
                    return r.fencedCodeBlocks &amp;&amp; e.match(/^```[ \t]*([\w+#]*)/, !0)&#13;
                        ? ((t.localMode = n(RegExp.$1)),&#13;
                          t.localMode &amp;&amp; (t.localState = t.localMode.startState()),&#13;
                          (t.f = t.block = c),&#13;
                          r.highlightFormatting &amp;&amp; (t.formatting = "code-block"),&#13;
                          (t.code = !0),&#13;
                          d(t))&#13;
                        : i(e, t, t.inline);&#13;
                }&#13;
                function l(e, t) {&#13;
                    var r = w.token(e, t.htmlState);&#13;
                    return (&#13;
                        ((k &amp;&amp; null === t.htmlState.tagStart &amp;&amp; !t.htmlState.context) ||&#13;
                            (t.md_inside &amp;&amp; e.current().indexOf("&gt;") &gt; -1)) &amp;&amp;&#13;
                            ((t.f = m), (t.block = s), (t.htmlState = null)),&#13;
                        r&#13;
                    );&#13;
                }&#13;
                function c(e, t) {&#13;
                    return e.sol() &amp;&amp; e.match("```", !1)&#13;
                        ? ((t.localMode = t.localState = null), (t.f = t.block = u), null)&#13;
                        : t.localMode&#13;
                            ? t.localMode.token(e, t.localState)&#13;
                            : (e.skipToEnd(), S);&#13;
                }&#13;
                function u(e, t) {&#13;
                    e.match("```"),&#13;
                        (t.block = s),&#13;
                        (t.f = m),&#13;
                        r.highlightFormatting &amp;&amp; (t.formatting = "code-block"),&#13;
                        (t.code = !0);&#13;
                    var n = d(t);&#13;
                    return (t.code = !1), n;&#13;
                }&#13;
                function d(e) {&#13;
                    var t = [];&#13;
                    if (e.formatting) {&#13;
                        t.push(z),&#13;
                            "string" == typeof e.formatting &amp;&amp; (e.formatting = [e.formatting]);&#13;
                        for (var n = 0; n &lt; e.formatting.length; n++)&#13;
                            t.push(z + "-" + e.formatting[n]),&#13;
                                "header" === e.formatting[n] &amp;&amp;&#13;
                                    t.push(z + "-" + e.formatting[n] + "-" + e.header),&#13;
                                "quote" === e.formatting[n] &amp;&amp;&#13;
                                    t.push(&#13;
                                        !r.maxBlockquoteDepth || r.maxBlockquoteDepth &gt;= e.quote&#13;
                                            ? z + "-" + e.formatting[n] + "-" + e.quote&#13;
                                            : "error"&#13;
                                    );&#13;
                    }&#13;
                    if (e.taskOpen) return t.push("meta"), t.length ? t.join(" ") : null;&#13;
                    if (e.taskClosed) return t.push("property"), t.length ? t.join(" ") : null;&#13;
                    if (e.linkHref) return t.push(A), t.length ? t.join(" ") : null;&#13;
                    if (&#13;
                        (e.strong &amp;&amp; t.push(O),&#13;
                        e.em &amp;&amp; t.push($),&#13;
                        e.strikethrough &amp;&amp; t.push(R),&#13;
                        e.linkText &amp;&amp; t.push(D),&#13;
                        e.code &amp;&amp; t.push(S),&#13;
                        e.header &amp;&amp; (t.push(C), t.push(C + "-" + e.header)),&#13;
                        e.quote &amp;&amp;&#13;
                            (t.push(T),&#13;
                            t.push(&#13;
                                !r.maxBlockquoteDepth || r.maxBlockquoteDepth &gt;= e.quote&#13;
                                    ? T + "-" + e.quote&#13;
                                    : T + "-" + r.maxBlockquoteDepth&#13;
                            )),&#13;
                        e.list !== !1)&#13;
                    ) {&#13;
                        var i = (e.listDepth - 1) % 3;&#13;
                        t.push(i ? (1 === i ? L : E) : M);&#13;
                    }&#13;
                    return (&#13;
                        e.trailingSpaceNewLine&#13;
                            ? t.push("trailing-space-new-line")&#13;
                            : e.trailingSpace &amp;&amp;&#13;
                              t.push("trailing-space-" + (e.trailingSpace % 2 ? "a" : "b")),&#13;
                        t.length ? t.join(" ") : null&#13;
                    );&#13;
                }&#13;
                function f(e, t) {&#13;
                    return e.match(V, !0) ? d(t) : void 0;&#13;
                }&#13;
                function m(t, n) {&#13;
                    var i = n.text(t, n);&#13;
                    if ("undefined" != typeof i) return i;&#13;
                    if (n.list) return (n.list = null), d(n);&#13;
                    if (n.taskList) {&#13;
                        var a = "x" !== t.match(B, !0)[1];&#13;
                        return (&#13;
                            a ? (n.taskOpen = !0) : (n.taskClosed = !0),&#13;
                            r.highlightFormatting &amp;&amp; (n.formatting = "task"),&#13;
                            (n.taskList = !1),&#13;
                            d(n)&#13;
                        );&#13;
                    }&#13;
                    if (((n.taskOpen = !1), (n.taskClosed = !1), n.header &amp;&amp; t.match(/^#+$/, !0)))&#13;
                        return r.highlightFormatting &amp;&amp; (n.formatting = "header"), d(n);&#13;
                    var s = t.sol(),&#13;
                        c = t.next();&#13;
                    if ("\\" === c &amp;&amp; (t.next(), r.highlightFormatting)) {&#13;
                        var u = d(n);&#13;
                        return u ? u + " formatting-escape" : "formatting-escape";&#13;
                    }&#13;
                    if (n.linkTitle) {&#13;
                        n.linkTitle = !1;&#13;
                        var f = c;&#13;
                        "(" === c &amp;&amp; (f = ")"),&#13;
                            (f = (f + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"));&#13;
                        var m = "^\\s*(?:[^" + f + "\\\\]+|\\\\\\\\|\\\\.)" + f;&#13;
                        if (t.match(new RegExp(m), !0)) return A;&#13;
                    }&#13;
                    if ("`" === c) {&#13;
                        var g = n.formatting;&#13;
                        r.highlightFormatting &amp;&amp; (n.formatting = "code");&#13;
                        var v = d(n),&#13;
                            b = t.pos;&#13;
                        t.eatWhile("`");&#13;
                        var y = 1 + t.pos - b;&#13;
                        return n.code&#13;
                            ? y === _&#13;
                                ? ((n.code = !1), v)&#13;
                                : ((n.formatting = g), d(n))&#13;
                            : ((_ = y), (n.code = !0), d(n));&#13;
                    }&#13;
                    if (n.code) return d(n);&#13;
                    if ("!" === c &amp;&amp; t.match(/\[[^\]]*\] ?(?:\(|\[)/, !1))&#13;
                        return t.match(/\[[^\]]*\]/), (n.inline = n.f = p), j;&#13;
                    if ("[" === c &amp;&amp; t.match(/.*\](\(.*\)| ?\[.*\])/, !1))&#13;
                        return (&#13;
                            (n.linkText = !0),&#13;
                            r.highlightFormatting &amp;&amp; (n.formatting = "link"),&#13;
                            d(n)&#13;
                        );&#13;
                    if ("]" === c &amp;&amp; n.linkText &amp;&amp; t.match(/\(.*\)| ?\[.*\]/, !1)) {&#13;
                        r.highlightFormatting &amp;&amp; (n.formatting = "link");&#13;
                        var u = d(n);&#13;
                        return (n.linkText = !1), (n.inline = n.f = p), u;&#13;
                    }&#13;
                    if ("&lt;" === c &amp;&amp; t.match(/^(https?|ftps?):\/\/(?:[^\\&gt;]|\\.)+&gt;/, !1)) {&#13;
                        (n.f = n.inline = h), r.highlightFormatting &amp;&amp; (n.formatting = "link");&#13;
                        var u = d(n);&#13;
                        return u ? (u += " ") : (u = ""), u + I;&#13;
                    }&#13;
                    if ("&lt;" === c &amp;&amp; t.match(/^[^&gt; \\]+@(?:[^\\&gt;]|\\.)+&gt;/, !1)) {&#13;
                        (n.f = n.inline = h), r.highlightFormatting &amp;&amp; (n.formatting = "link");&#13;
                        var u = d(n);&#13;
                        return u ? (u += " ") : (u = ""), u + P;&#13;
                    }&#13;
                    if ("&lt;" === c &amp;&amp; t.match(/^\w/, !1)) {&#13;
                        if (-1 != t.string.indexOf("&gt;")) {&#13;
                            var x = t.string.substring(1, t.string.indexOf("&gt;"));&#13;
                            /markdown\s*=\s*('|"){0,1}1('|"){0,1}/.test(x) &amp;&amp; (n.md_inside = !0);&#13;
                        }&#13;
                        return t.backUp(1), (n.htmlState = e.startState(w)), o(t, n, l);&#13;
                    }&#13;
                    if ("&lt;" === c &amp;&amp; t.match(/^\/\w*?&gt;/)) return (n.md_inside = !1), "tag";&#13;
                    var k = !1;&#13;
                    if (&#13;
                        !r.underscoresBreakWords &amp;&amp;&#13;
                        "_" === c &amp;&amp;&#13;
                        "_" !== t.peek() &amp;&amp;&#13;
                        t.match(/(\w)/, !1)&#13;
                    ) {&#13;
                        var C = t.pos - 2;&#13;
                        if (C &gt;= 0) {&#13;
                            var S = t.string.charAt(C);&#13;
                            "_" !== S &amp;&amp; S.match(/(\w)/, !1) &amp;&amp; (k = !0);&#13;
                        }&#13;
                    }&#13;
                    if ("*" === c || ("_" === c &amp;&amp; !k))&#13;
                        if (s &amp;&amp; " " === t.peek());&#13;
                        else {&#13;
                            if (n.strong === c &amp;&amp; t.eat(c)) {&#13;
                                r.highlightFormatting &amp;&amp; (n.formatting = "strong");&#13;
                                var v = d(n);&#13;
                                return (n.strong = !1), v;&#13;
                            }&#13;
                            if (!n.strong &amp;&amp; t.eat(c))&#13;
                                return (&#13;
                                    (n.strong = c),&#13;
                                    r.highlightFormatting &amp;&amp; (n.formatting = "strong"),&#13;
                                    d(n)&#13;
                                );&#13;
                            if (n.em === c) {&#13;
                                r.highlightFormatting &amp;&amp; (n.formatting = "em");&#13;
                                var v = d(n);&#13;
                                return (n.em = !1), v;&#13;
                            }&#13;
                            if (!n.em)&#13;
                                return (&#13;
                                    (n.em = c), r.highlightFormatting &amp;&amp; (n.formatting = "em"), d(n)&#13;
                                );&#13;
                        }&#13;
                    else if (" " === c &amp;&amp; (t.eat("*") || t.eat("_"))) {&#13;
                        if (" " === t.peek()) return d(n);&#13;
                        t.backUp(1);&#13;
                    }&#13;
                    if (r.strikethrough)&#13;
                        if ("~" === c &amp;&amp; t.eatWhile(c)) {&#13;
                            if (n.strikethrough) {&#13;
                                r.highlightFormatting &amp;&amp; (n.formatting = "strikethrough");&#13;
                                var v = d(n);&#13;
                                return (n.strikethrough = !1), v;&#13;
                            }&#13;
                            if (t.match(/^[^\s]/, !1))&#13;
                                return (&#13;
                                    (n.strikethrough = !0),&#13;
                                    r.highlightFormatting &amp;&amp; (n.formatting = "strikethrough"),&#13;
                                    d(n)&#13;
                                );&#13;
                        } else if (" " === c &amp;&amp; t.match(/^~~/, !0)) {&#13;
                            if (" " === t.peek()) return d(n);&#13;
                            t.backUp(2);&#13;
                        }&#13;
                    return (&#13;
                        " " === c &amp;&amp;&#13;
                            (t.match(/ +$/, !1)&#13;
                                ? n.trailingSpace++&#13;
                                : n.trailingSpace &amp;&amp; (n.trailingSpaceNewLine = !0)),&#13;
                        d(n)&#13;
                    );&#13;
                }&#13;
                function h(e, t) {&#13;
                    var n = e.next();&#13;
                    if ("&gt;" === n) {&#13;
                        (t.f = t.inline = m), r.highlightFormatting &amp;&amp; (t.formatting = "link");&#13;
                        var i = d(t);&#13;
                        return i ? (i += " ") : (i = ""), i + I;&#13;
                    }&#13;
                    return e.match(/^[^&gt;]+/, !0), I;&#13;
                }&#13;
                function p(e, t) {&#13;
                    if (e.eatSpace()) return null;&#13;
                    var n = e.next();&#13;
                    return "(" === n || "[" === n&#13;
                        ? ((t.f = t.inline = g("(" === n ? ")" : "]")),&#13;
                          r.highlightFormatting &amp;&amp; (t.formatting = "link-string"),&#13;
                          (t.linkHref = !0),&#13;
                          d(t))&#13;
                        : "error";&#13;
                }&#13;
                function g(e) {&#13;
                    return function(t, n) {&#13;
                        var i = t.next();&#13;
                        if (i === e) {&#13;
                            (n.f = n.inline = m),&#13;
                                r.highlightFormatting &amp;&amp; (n.formatting = "link-string");&#13;
                            var o = d(n);&#13;
                            return (n.linkHref = !1), o;&#13;
                        }&#13;
                        return t.match(x(e), !0) &amp;&amp; t.backUp(1), (n.linkHref = !0), d(n);&#13;
                    };&#13;
                }&#13;
                function v(e, t) {&#13;
                    return e.match(/^[^\]]*\]:/, !1)&#13;
                        ? ((t.f = b),&#13;
                          e.next(),&#13;
                          r.highlightFormatting &amp;&amp; (t.formatting = "link"),&#13;
                          (t.linkText = !0),&#13;
                          d(t))&#13;
                        : i(e, t, m);&#13;
                }&#13;
                function b(e, t) {&#13;
                    if (e.match(/^\]:/, !0)) {&#13;
                        (t.f = t.inline = y), r.highlightFormatting &amp;&amp; (t.formatting = "link");&#13;
                        var n = d(t);&#13;
                        return (t.linkText = !1), n;&#13;
                    }&#13;
                    return e.match(/^[^\]]+/, !0), D;&#13;
                }&#13;
                function y(e, t) {&#13;
                    return e.eatSpace()&#13;
                        ? null&#13;
                        : (e.match(/^[^\s]+/, !0),&#13;
                          void 0 === e.peek()&#13;
                              ? (t.linkTitle = !0)&#13;
                              : e.match(&#13;
                                    /^(?:\s+(?:"(?:[^"\\]|\\\\|\\.)+"|'(?:[^'\\]|\\\\|\\.)+'|\((?:[^)\\]|\\\\|\\.)+\)))?/,&#13;
                                    !0&#13;
                                ),&#13;
                          (t.f = t.inline = m),&#13;
                          A);&#13;
                }&#13;
                function x(e) {&#13;
                    return (&#13;
                        K[e] ||&#13;
                            ((e = (e + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")),&#13;
                            (K[e] = new RegExp("^(?:[^\\\\]|\\\\.)*?(" + e + ")"))),&#13;
                        K[e]&#13;
                    );&#13;
                }&#13;
                var k = e.modes.hasOwnProperty("xml"),&#13;
                    w = e.getMode(t, k ? { name: "xml", htmlMode: !0 } : "text/plain");&#13;
                void 0 === r.highlightFormatting &amp;&amp; (r.highlightFormatting = !1),&#13;
                    void 0 === r.maxBlockquoteDepth &amp;&amp; (r.maxBlockquoteDepth = 0),&#13;
                    void 0 === r.underscoresBreakWords &amp;&amp; (r.underscoresBreakWords = !0),&#13;
                    void 0 === r.fencedCodeBlocks &amp;&amp; (r.fencedCodeBlocks = !1),&#13;
                    void 0 === r.taskLists &amp;&amp; (r.taskLists = !1),&#13;
                    void 0 === r.strikethrough &amp;&amp; (r.strikethrough = !1);&#13;
                var _ = 0,&#13;
                    C = "header",&#13;
                    S = "comment",&#13;
                    T = "quote",&#13;
                    M = "variable-2",&#13;
                    L = "variable-3",&#13;
                    E = "keyword",&#13;
                    q = "hr",&#13;
                    j = "tag",&#13;
                    z = "formatting",&#13;
                    I = "link",&#13;
                    P = "link",&#13;
                    D = "link",&#13;
                    A = "string",&#13;
                    $ = "em",&#13;
                    O = "strong",&#13;
                    R = "strikethrough",&#13;
                    F = /^([*\-=_])(?:\s*\1){2,}\s*$/,&#13;
                    H = /^[*\-+]\s+/,&#13;
                    N = /^[0-9]+\.\s+/,&#13;
                    B = /^\[(x| )\](?=\s)/,&#13;
                    U = /^#+/,&#13;
                    W = /^(?:\={1,}|-{1,})$/,&#13;
                    V = /^[^#!\[\]*_\\&lt;&gt;` "'(~]+/,&#13;
                    K = [],&#13;
                    Z = {&#13;
                        startState: function() {&#13;
                            return {&#13;
                                f: s,&#13;
                                prevLineHasContent: !1,&#13;
                                thisLineHasContent: !1,&#13;
                                block: s,&#13;
                                htmlState: null,&#13;
                                indentation: 0,&#13;
                                inline: m,&#13;
                                text: f,&#13;
                                formatting: !1,&#13;
                                linkText: !1,&#13;
                                linkHref: !1,&#13;
                                linkTitle: !1,&#13;
                                em: !1,&#13;
                                strong: !1,&#13;
                                header: 0,&#13;
                                taskList: !1,&#13;
                                list: !1,&#13;
                                listDepth: 0,&#13;
                                quote: 0,&#13;
                                trailingSpace: 0,&#13;
                                trailingSpaceNewLine: !1,&#13;
                                strikethrough: !1&#13;
                            };&#13;
                        },&#13;
                        copyState: function(t) {&#13;
                            return {&#13;
                                f: t.f,&#13;
                                prevLineHasContent: t.prevLineHasContent,&#13;
                                thisLineHasContent: t.thisLineHasContent,&#13;
                                block: t.block,&#13;
                                htmlState: t.htmlState &amp;&amp; e.copyState(w, t.htmlState),&#13;
                                indentation: t.indentation,&#13;
                                localMode: t.localMode,&#13;
                                localState: t.localMode&#13;
                                    ? e.copyState(t.localMode, t.localState)&#13;
                                    : null,&#13;
                                inline: t.inline,&#13;
                                text: t.text,&#13;
                                formatting: !1,&#13;
                                linkTitle: t.linkTitle,&#13;
                                em: t.em,&#13;
                                strong: t.strong,&#13;
                                strikethrough: t.strikethrough,&#13;
                                header: t.header,&#13;
                                taskList: t.taskList,&#13;
                                list: t.list,&#13;
                                listDepth: t.listDepth,&#13;
                                quote: t.quote,&#13;
                                trailingSpace: t.trailingSpace,&#13;
                                trailingSpaceNewLine: t.trailingSpaceNewLine,&#13;
                                md_inside: t.md_inside&#13;
                            };&#13;
                        },&#13;
                        token: function(e, t) {&#13;
                            if (((t.formatting = !1), e.sol())) {&#13;
                                var r = !!t.header;&#13;
                                if (((t.header = 0), e.match(/^\s*$/, !0) || r))&#13;
                                    return (&#13;
                                        (t.prevLineHasContent = !1),&#13;
                                        a(t),&#13;
                                        r ? this.token(e, t) : null&#13;
                                    );&#13;
                                (t.prevLineHasContent = t.thisLineHasContent),&#13;
                                    (t.thisLineHasContent = !0),&#13;
                                    (t.taskList = !1),&#13;
                                    (t.code = !1),&#13;
                                    (t.trailingSpace = 0),&#13;
                                    (t.trailingSpaceNewLine = !1),&#13;
                                    (t.f = t.block);&#13;
                                var n = e.match(/^\s*/, !0)[0].replace(/\t/g, "    ").length,&#13;
                                    i = 4 * Math.floor((n - t.indentation) / 4);&#13;
                                i &gt; 4 &amp;&amp; (i = 4);&#13;
                                var o = t.indentation + i;&#13;
                                if (&#13;
                                    ((t.indentationDiff = o - t.indentation),&#13;
                                    (t.indentation = o),&#13;
                                    n &gt; 0)&#13;
                                )&#13;
                                    return null;&#13;
                            }&#13;
                            return t.f(e, t);&#13;
                        },&#13;
                        innerMode: function(e) {&#13;
                            return e.block == l&#13;
                                ? { state: e.htmlState, mode: w }&#13;
                                : e.localState&#13;
                                    ? { state: e.localState, mode: e.localMode }&#13;
                                    : { state: e, mode: Z };&#13;
                        },&#13;
                        blankLine: a,&#13;
                        getType: d,&#13;
                        fold: "markdown"&#13;
                    };&#13;
                return Z;&#13;
            },&#13;
            "xml"&#13;
        ),&#13;
            e.defineMIME("text/x-markdown", "markdown");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("javascript", function(t, r) {&#13;
            function n(e) {&#13;
                for (var t, r = !1, n = !1; null != (t = e.next()); ) {&#13;
                    if (!r) {&#13;
                        if ("/" == t &amp;&amp; !n) return;&#13;
                        "[" == t ? (n = !0) : n &amp;&amp; "]" == t &amp;&amp; (n = !1);&#13;
                    }&#13;
                    r = !r &amp;&amp; "\\" == t;&#13;
                }&#13;
            }&#13;
            function i(e, t, r) {&#13;
                return (pe = e), (ge = r), t;&#13;
            }&#13;
            function o(e, t) {&#13;
                var r = e.next();&#13;
                if ('"' == r || "'" == r) return (t.tokenize = a(r)), t.tokenize(e, t);&#13;
                if ("." == r &amp;&amp; e.match(/^\d+(?:[eE][+\-]?\d+)?/)) return i("number", "number");&#13;
                if ("." == r &amp;&amp; e.match("..")) return i("spread", "meta");&#13;
                if (/[\[\]{}\(\),;\:\.]/.test(r)) return i(r);&#13;
                if ("=" == r &amp;&amp; e.eat("&gt;")) return i("=&gt;", "operator");&#13;
                if ("0" == r &amp;&amp; e.eat(/x/i)) return e.eatWhile(/[\da-f]/i), i("number", "number");&#13;
                if (/\d/.test(r))&#13;
                    return e.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/), i("number", "number");&#13;
                if ("/" == r)&#13;
                    return e.eat("*")&#13;
                        ? ((t.tokenize = s), s(e, t))&#13;
                        : e.eat("/")&#13;
                            ? (e.skipToEnd(), i("comment", "comment"))&#13;
                            : "operator" == t.lastType ||&#13;
                              "keyword c" == t.lastType ||&#13;
                              "sof" == t.lastType ||&#13;
                              /^[\[{}\(,;:]$/.test(t.lastType)&#13;
                                ? (n(e),&#13;
                                  e.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/),&#13;
                                  i("regexp", "string-2"))&#13;
                                : (e.eatWhile(Ce), i("operator", "operator", e.current()));&#13;
                if ("`" == r) return (t.tokenize = l), l(e, t);&#13;
                if ("#" == r) return e.skipToEnd(), i("error", "error");&#13;
                if (Ce.test(r)) return e.eatWhile(Ce), i("operator", "operator", e.current());&#13;
                if (we.test(r)) {&#13;
                    e.eatWhile(we);&#13;
                    var o = e.current(),&#13;
                        c = _e.propertyIsEnumerable(o) &amp;&amp; _e[o];&#13;
                    return c &amp;&amp; "." != t.lastType&#13;
                        ? i(c.type, c.style, o)&#13;
                        : i("variable", "variable", o);&#13;
                }&#13;
            }&#13;
            function a(e) {&#13;
                return function(t, r) {&#13;
                    var n,&#13;
                        a = !1;&#13;
                    if (ye &amp;&amp; "@" == t.peek() &amp;&amp; t.match(Se))&#13;
                        return (r.tokenize = o), i("jsonld-keyword", "meta");&#13;
                    for (; null != (n = t.next()) &amp;&amp; (n != e || a); ) a = !a &amp;&amp; "\\" == n;&#13;
                    return a || (r.tokenize = o), i("string", "string");&#13;
                };&#13;
            }&#13;
            function s(e, t) {&#13;
                for (var r, n = !1; (r = e.next()); ) {&#13;
                    if ("/" == r &amp;&amp; n) {&#13;
                        t.tokenize = o;&#13;
                        break;&#13;
                    }&#13;
                    n = "*" == r;&#13;
                }&#13;
                return i("comment", "comment");&#13;
            }&#13;
            function l(e, t) {&#13;
                for (var r, n = !1; null != (r = e.next()); ) {&#13;
                    if (!n &amp;&amp; ("`" == r || ("$" == r &amp;&amp; e.eat("{")))) {&#13;
                        t.tokenize = o;&#13;
                        break;&#13;
                    }&#13;
                    n = !n &amp;&amp; "\\" == r;&#13;
                }&#13;
                return i("quasi", "string-2", e.current());&#13;
            }&#13;
            function c(e, t) {&#13;
                t.fatArrowAt &amp;&amp; (t.fatArrowAt = null);&#13;
                var r = e.string.indexOf("=&gt;", e.start);&#13;
                if (!(0 &gt; r)) {&#13;
                    for (var n = 0, i = !1, o = r - 1; o &gt;= 0; --o) {&#13;
                        var a = e.string.charAt(o),&#13;
                            s = Te.indexOf(a);&#13;
                        if (s &gt;= 0 &amp;&amp; 3 &gt; s) {&#13;
                            if (!n) {&#13;
                                ++o;&#13;
                                break;&#13;
                            }&#13;
                            if (0 == --n) break;&#13;
                        } else if (s &gt;= 3 &amp;&amp; 6 &gt; s) ++n;&#13;
                        else if (we.test(a)) i = !0;&#13;
                        else {&#13;
                            if (/["'\/]/.test(a)) return;&#13;
                            if (i &amp;&amp; !n) {&#13;
                                ++o;&#13;
                                break;&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                    i &amp;&amp; !n &amp;&amp; (t.fatArrowAt = o);&#13;
                }&#13;
            }&#13;
            function u(e, t, r, n, i, o) {&#13;
                (this.indented = e),&#13;
                    (this.column = t),&#13;
                    (this.type = r),&#13;
                    (this.prev = i),&#13;
                    (this.info = o),&#13;
                    null != n &amp;&amp; (this.align = n);&#13;
            }&#13;
            function d(e, t) {&#13;
                for (var r = e.localVars; r; r = r.next) if (r.name == t) return !0;&#13;
                for (var n = e.context; n; n = n.prev)&#13;
                    for (var r = n.vars; r; r = r.next) if (r.name == t) return !0;&#13;
            }&#13;
            function f(e, t, r, n, i) {&#13;
                var o = e.cc;&#13;
                for (&#13;
                    Le.state = e,&#13;
                        Le.stream = i,&#13;
                        Le.marked = null,&#13;
                        Le.cc = o,&#13;
                        Le.style = t,&#13;
                        e.lexical.hasOwnProperty("align") || (e.lexical.align = !0);&#13;
                    ;&#13;
&#13;
                ) {&#13;
                    var a = o.length ? o.pop() : xe ? w : k;&#13;
                    if (a(r, n)) {&#13;
                        for (; o.length &amp;&amp; o[o.length - 1].lex; ) o.pop()();&#13;
                        return Le.marked&#13;
                            ? Le.marked&#13;
                            : "variable" == r &amp;&amp; d(e, n)&#13;
                                ? "variable-2"&#13;
                                : t;&#13;
                    }&#13;
                }&#13;
            }&#13;
            function m() {&#13;
                for (var e = arguments.length - 1; e &gt;= 0; e--) Le.cc.push(arguments[e]);&#13;
            }&#13;
            function h() {&#13;
                return m.apply(null, arguments), !0;&#13;
            }&#13;
            function p(e) {&#13;
                function t(t) {&#13;
                    for (var r = t; r; r = r.next) if (r.name == e) return !0;&#13;
                    return !1;&#13;
                }&#13;
                var n = Le.state;&#13;
                if (n.context) {&#13;
                    if (((Le.marked = "def"), t(n.localVars))) return;&#13;
                    n.localVars = { name: e, next: n.localVars };&#13;
                } else {&#13;
                    if (t(n.globalVars)) return;&#13;
                    r.globalVars &amp;&amp; (n.globalVars = { name: e, next: n.globalVars });&#13;
                }&#13;
            }&#13;
            function g() {&#13;
                (Le.state.context = { prev: Le.state.context, vars: Le.state.localVars }),&#13;
                    (Le.state.localVars = Ee);&#13;
            }&#13;
            function v() {&#13;
                (Le.state.localVars = Le.state.context.vars),&#13;
                    (Le.state.context = Le.state.context.prev);&#13;
            }&#13;
            function b(e, t) {&#13;
                var r = function() {&#13;
                    var r = Le.state,&#13;
                        n = r.indented;&#13;
                    if ("stat" == r.lexical.type) n = r.lexical.indented;&#13;
                    else&#13;
                        for (var i = r.lexical; i &amp;&amp; ")" == i.type &amp;&amp; i.align; i = i.prev)&#13;
                            n = i.indented;&#13;
                    r.lexical = new u(n, Le.stream.column(), e, null, r.lexical, t);&#13;
                };&#13;
                return (r.lex = !0), r;&#13;
            }&#13;
            function y() {&#13;
                var e = Le.state;&#13;
                e.lexical.prev &amp;&amp;&#13;
                    (")" == e.lexical.type &amp;&amp; (e.indented = e.lexical.indented),&#13;
                    (e.lexical = e.lexical.prev));&#13;
            }&#13;
            function x(e) {&#13;
                function t(r) {&#13;
                    return r == e ? h() : ";" == e ? m() : h(t);&#13;
                }&#13;
                return t;&#13;
            }&#13;
            function k(e, t) {&#13;
                return "var" == e&#13;
                    ? h(b("vardef", t.length), B, x(";"), y)&#13;
                    : "keyword a" == e&#13;
                        ? h(b("form"), w, k, y)&#13;
                        : "keyword b" == e&#13;
                            ? h(b("form"), k, y)&#13;
                            : "{" == e&#13;
                                ? h(b("}"), F, y)&#13;
                                : ";" == e&#13;
                                    ? h()&#13;
                                    : "if" == e&#13;
                                        ? ("else" == Le.state.lexical.info &amp;&amp;&#13;
                                              Le.state.cc[Le.state.cc.length - 1] == y &amp;&amp;&#13;
                                              Le.state.cc.pop()(),&#13;
                                          h(b("form"), w, k, y, Z))&#13;
                                        : "function" == e&#13;
                                            ? h(ee)&#13;
                                            : "for" == e&#13;
                                                ? h(b("form"), G, k, y)&#13;
                                                : "variable" == e&#13;
                                                    ? h(b("stat"), I)&#13;
                                                    : "switch" == e&#13;
                                                        ? h(&#13;
                                                              b("form"),&#13;
                                                              w,&#13;
                                                              b("}", "switch"),&#13;
                                                              x("{"),&#13;
                                                              F,&#13;
                                                              y,&#13;
                                                              y&#13;
                                                          )&#13;
                                                        : "case" == e&#13;
                                                            ? h(w, x(":"))&#13;
                                                            : "default" == e&#13;
                                                                ? h(x(":"))&#13;
                                                                : "catch" == e&#13;
                                                                    ? h(&#13;
                                                                          b("form"),&#13;
                                                                          g,&#13;
                                                                          x("("),&#13;
                                                                          te,&#13;
                                                                          x(")"),&#13;
                                                                          k,&#13;
                                                                          y,&#13;
                                                                          v&#13;
                                                                      )&#13;
                                                                    : "module" == e&#13;
                                                                        ? h(b("form"), g, ae, v, y)&#13;
                                                                        : "class" == e&#13;
                                                                            ? h(b("form"), re, y)&#13;
                                                                            : "export" == e&#13;
                                                                                ? h(&#13;
                                                                                      b("form"),&#13;
                                                                                      se,&#13;
                                                                                      y&#13;
                                                                                  )&#13;
                                                                                : "import" == e&#13;
                                                                                    ? h(&#13;
                                                                                          b("form"),&#13;
                                                                                          le,&#13;
                                                                                          y&#13;
                                                                                      )&#13;
                                                                                    : m(&#13;
                                                                                          b("stat"),&#13;
                                                                                          w,&#13;
                                                                                          x(";"),&#13;
                                                                                          y&#13;
                                                                                      );&#13;
            }&#13;
            function w(e) {&#13;
                return C(e, !1);&#13;
            }&#13;
            function _(e) {&#13;
                return C(e, !0);&#13;
            }&#13;
            function C(e, t) {&#13;
                if (Le.state.fatArrowAt == Le.stream.start) {&#13;
                    var r = t ? z : j;&#13;
                    if ("(" == e) return h(g, b(")"), O(U, ")"), y, x("=&gt;"), r, v);&#13;
                    if ("variable" == e) return m(g, U, x("=&gt;"), r, v);&#13;
                }&#13;
                var n = t ? L : M;&#13;
                return Me.hasOwnProperty(e)&#13;
                    ? h(n)&#13;
                    : "function" == e&#13;
                        ? h(ee, n)&#13;
                        : "keyword c" == e&#13;
                            ? h(t ? T : S)&#13;
                            : "(" == e&#13;
                                ? h(b(")"), S, me, x(")"), y, n)&#13;
                                : "operator" == e || "spread" == e&#13;
                                    ? h(t ? _ : w)&#13;
                                    : "[" == e&#13;
                                        ? h(b("]"), de, y, n)&#13;
                                        : "{" == e&#13;
                                            ? R(D, "}", null, n)&#13;
                                            : "quasi" == e&#13;
                                                ? m(E, n)&#13;
                                                : h();&#13;
            }&#13;
            function S(e) {&#13;
                return e.match(/[;\}\)\],]/) ? m() : m(w);&#13;
            }&#13;
            function T(e) {&#13;
                return e.match(/[;\}\)\],]/) ? m() : m(_);&#13;
            }&#13;
            function M(e, t) {&#13;
                return "," == e ? h(w) : L(e, t, !1);&#13;
            }&#13;
            function L(e, t, r) {&#13;
                var n = 0 == r ? M : L,&#13;
                    i = 0 == r ? w : _;&#13;
                return "=&gt;" == e&#13;
                    ? h(g, r ? z : j, v)&#13;
                    : "operator" == e&#13;
                        ? /\+\+|--/.test(t)&#13;
                            ? h(n)&#13;
                            : "?" == t&#13;
                                ? h(w, x(":"), i)&#13;
                                : h(i)&#13;
                        : "quasi" == e&#13;
                            ? m(E, n)&#13;
                            : ";" != e&#13;
                                ? "(" == e&#13;
                                    ? R(_, ")", "call", n)&#13;
                                    : "." == e&#13;
                                        ? h(P, n)&#13;
                                        : "[" == e&#13;
                                            ? h(b("]"), S, x("]"), y, n)&#13;
                                            : void 0&#13;
                                : void 0;&#13;
            }&#13;
            function E(e, t) {&#13;
                return "quasi" != e ? m() : "${" != t.slice(t.length - 2) ? h(E) : h(w, q);&#13;
            }&#13;
            function q(e) {&#13;
                return "}" == e&#13;
                    ? ((Le.marked = "string-2"), (Le.state.tokenize = l), h(E))&#13;
                    : void 0;&#13;
            }&#13;
            function j(e) {&#13;
                return c(Le.stream, Le.state), m("{" == e ? k : w);&#13;
            }&#13;
            function z(e) {&#13;
                return c(Le.stream, Le.state), m("{" == e ? k : _);&#13;
            }&#13;
            function I(e) {&#13;
                return ":" == e ? h(y, k) : m(M, x(";"), y);&#13;
            }&#13;
            function P(e) {&#13;
                return "variable" == e ? ((Le.marked = "property"), h()) : void 0;&#13;
            }&#13;
            function D(e, t) {&#13;
                return "variable" == e || "keyword" == Le.style&#13;
                    ? ((Le.marked = "property"), h("get" == t || "set" == t ? A : $))&#13;
                    : "number" == e || "string" == e&#13;
                        ? ((Le.marked = ye ? "property" : Le.style + " property"), h($))&#13;
                        : "jsonld-keyword" == e&#13;
                            ? h($)&#13;
                            : "[" == e&#13;
                                ? h(w, x("]"), $)&#13;
                                : void 0;&#13;
            }&#13;
            function A(e) {&#13;
                return "variable" != e ? m($) : ((Le.marked = "property"), h(ee));&#13;
            }&#13;
            function $(e) {&#13;
                return ":" == e ? h(_) : "(" == e ? m(ee) : void 0;&#13;
            }&#13;
            function O(e, t) {&#13;
                function r(n) {&#13;
                    if ("," == n) {&#13;
                        var i = Le.state.lexical;&#13;
                        return "call" == i.info &amp;&amp; (i.pos = (i.pos || 0) + 1), h(e, r);&#13;
                    }&#13;
                    return n == t ? h() : h(x(t));&#13;
                }&#13;
                return function(n) {&#13;
                    return n == t ? h() : m(e, r);&#13;
                };&#13;
            }&#13;
            function R(e, t, r) {&#13;
                for (var n = 3; n &lt; arguments.length; n++) Le.cc.push(arguments[n]);&#13;
                return h(b(t, r), O(e, t), y);&#13;
            }&#13;
            function F(e) {&#13;
                return "}" == e ? h() : m(k, F);&#13;
            }&#13;
            function H(e) {&#13;
                return ke &amp;&amp; ":" == e ? h(N) : void 0;&#13;
            }&#13;
            function N(e) {&#13;
                return "variable" == e ? ((Le.marked = "variable-3"), h()) : void 0;&#13;
            }&#13;
            function B() {&#13;
                return m(U, H, V, K);&#13;
            }&#13;
            function U(e, t) {&#13;
                return "variable" == e&#13;
                    ? (p(t), h())&#13;
                    : "[" == e&#13;
                        ? R(U, "]")&#13;
                        : "{" == e&#13;
                            ? R(W, "}")&#13;
                            : void 0;&#13;
            }&#13;
            function W(e, t) {&#13;
                return "variable" != e || Le.stream.match(/^\s*:/, !1)&#13;
                    ? ("variable" == e &amp;&amp; (Le.marked = "property"), h(x(":"), U, V))&#13;
                    : (p(t), h(V));&#13;
            }&#13;
            function V(e, t) {&#13;
                return "=" == t ? h(_) : void 0;&#13;
            }&#13;
            function K(e) {&#13;
                return "," == e ? h(B) : void 0;&#13;
            }&#13;
            function Z(e, t) {&#13;
                return "keyword b" == e &amp;&amp; "else" == t ? h(b("form", "else"), k, y) : void 0;&#13;
            }&#13;
            function G(e) {&#13;
                return "(" == e ? h(b(")"), X, x(")"), y) : void 0;&#13;
            }&#13;
            function X(e) {&#13;
                return "var" == e&#13;
                    ? h(B, x(";"), Y)&#13;
                    : ";" == e&#13;
                        ? h(Y)&#13;
                        : "variable" == e&#13;
                            ? h(Q)&#13;
                            : m(w, x(";"), Y);&#13;
            }&#13;
            function Q(e, t) {&#13;
                return "in" == t || "of" == t ? ((Le.marked = "keyword"), h(w)) : h(M, Y);&#13;
            }&#13;
            function Y(e, t) {&#13;
                return ";" == e&#13;
                    ? h(J)&#13;
                    : "in" == t || "of" == t&#13;
                        ? ((Le.marked = "keyword"), h(w))&#13;
                        : m(w, x(";"), J);&#13;
            }&#13;
            function J(e) {&#13;
                ")" != e &amp;&amp; h(w);&#13;
            }&#13;
            function ee(e, t) {&#13;
                return "*" == t&#13;
                    ? ((Le.marked = "keyword"), h(ee))&#13;
                    : "variable" == e&#13;
                        ? (p(t), h(ee))&#13;
                        : "(" == e&#13;
                            ? h(g, b(")"), O(te, ")"), y, k, v)&#13;
                            : void 0;&#13;
            }&#13;
            function te(e) {&#13;
                return "spread" == e ? h(te) : m(U, H);&#13;
            }&#13;
            function re(e, t) {&#13;
                return "variable" == e ? (p(t), h(ne)) : void 0;&#13;
            }&#13;
            function ne(e, t) {&#13;
                return "extends" == t ? h(w, ne) : "{" == e ? h(b("}"), ie, y) : void 0;&#13;
            }&#13;
            function ie(e, t) {&#13;
                return "variable" == e || "keyword" == Le.style&#13;
                    ? ((Le.marked = "property"),&#13;
                      "get" == t || "set" == t ? h(oe, ee, ie) : h(ee, ie))&#13;
                    : "*" == t&#13;
                        ? ((Le.marked = "keyword"), h(ie))&#13;
                        : ";" == e&#13;
                            ? h(ie)&#13;
                            : "}" == e&#13;
                                ? h()&#13;
                                : void 0;&#13;
            }&#13;
            function oe(e) {&#13;
                return "variable" != e ? m() : ((Le.marked = "property"), h());&#13;
            }&#13;
            function ae(e, t) {&#13;
                return "string" == e ? h(k) : "variable" == e ? (p(t), h(ue)) : void 0;&#13;
            }&#13;
            function se(e, t) {&#13;
                return "*" == t&#13;
                    ? ((Le.marked = "keyword"), h(ue, x(";")))&#13;
                    : "default" == t&#13;
                        ? ((Le.marked = "keyword"), h(w, x(";")))&#13;
                        : m(k);&#13;
            }&#13;
            function le(e) {&#13;
                return "string" == e ? h() : m(ce, ue);&#13;
            }&#13;
            function ce(e, t) {&#13;
                return "{" == e ? R(ce, "}") : ("variable" == e &amp;&amp; p(t), h());&#13;
            }&#13;
            function ue(e, t) {&#13;
                return "from" == t ? ((Le.marked = "keyword"), h(w)) : void 0;&#13;
            }&#13;
            function de(e) {&#13;
                return "]" == e ? h() : m(_, fe);&#13;
            }&#13;
            function fe(e) {&#13;
                return "for" == e ? m(me, x("]")) : "," == e ? h(O(T, "]")) : m(O(_, "]"));&#13;
            }&#13;
            function me(e) {&#13;
                return "for" == e ? h(G, me) : "if" == e ? h(w, me) : void 0;&#13;
            }&#13;
            function he(e, t) {&#13;
                return (&#13;
                    "operator" == e.lastType ||&#13;
                    "," == e.lastType ||&#13;
                    Ce.test(t.charAt(0)) ||&#13;
                    /[,.]/.test(t.charAt(0))&#13;
                );&#13;
            }&#13;
            var pe,&#13;
                ge,&#13;
                ve = t.indentUnit,&#13;
                be = r.statementIndent,&#13;
                ye = r.jsonld,&#13;
                xe = r.json || ye,&#13;
                ke = r.typescript,&#13;
                we = r.wordCharacters || /[\w$\xa1-\uffff]/,&#13;
                _e = (function() {&#13;
                    function e(e) {&#13;
                        return { type: e, style: "keyword" };&#13;
                    }&#13;
                    var t = e("keyword a"),&#13;
                        r = e("keyword b"),&#13;
                        n = e("keyword c"),&#13;
                        i = e("operator"),&#13;
                        o = { type: "atom", style: "atom" },&#13;
                        a = {&#13;
                            if: e("if"),&#13;
                            while: t,&#13;
                            with: t,&#13;
                            else: r,&#13;
                            do: r,&#13;
                            try: r,&#13;
                            finally: r,&#13;
                            return: n,&#13;
                            break: n,&#13;
                            continue: n,&#13;
                            new: n,&#13;
                            delete: n,&#13;
                            throw: n,&#13;
                            debugger: n,&#13;
                            var: e("var"),&#13;
                            const: e("var"),&#13;
                            let: e("var"),&#13;
                            function: e("function"),&#13;
                            catch: e("catch"),&#13;
                            for: e("for"),&#13;
                            switch: e("switch"),&#13;
                            case: e("case"),&#13;
                            default: e("default"),&#13;
                            in: i,&#13;
                            typeof: i,&#13;
                            instanceof: i,&#13;
                            true: o,&#13;
                            false: o,&#13;
                            null: o,&#13;
                            undefined: o,&#13;
                            NaN: o,&#13;
                            Infinity: o,&#13;
                            this: e("this"),&#13;
                            module: e("module"),&#13;
                            class: e("class"),&#13;
                            super: e("atom"),&#13;
                            yield: n,&#13;
                            export: e("export"),&#13;
                            import: e("import"),&#13;
                            extends: n&#13;
                        };&#13;
                    if (ke) {&#13;
                        var s = { type: "variable", style: "variable-3" },&#13;
                            l = {&#13;
                                interface: e("interface"),&#13;
                                extends: e("extends"),&#13;
                                constructor: e("constructor"),&#13;
                                public: e("public"),&#13;
                                private: e("private"),&#13;
                                protected: e("protected"),&#13;
                                static: e("static"),&#13;
                                string: s,&#13;
                                number: s,&#13;
                                bool: s,&#13;
                                any: s&#13;
                            };&#13;
                        for (var c in l) a[c] = l[c];&#13;
                    }&#13;
                    return a;&#13;
                })(),&#13;
                Ce = /[+\-*&amp;%=&lt;&gt;!?|~^]/,&#13;
                Se = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/,&#13;
                Te = "([{}])",&#13;
                Me = {&#13;
                    atom: !0,&#13;
                    number: !0,&#13;
                    variable: !0,&#13;
                    string: !0,&#13;
                    regexp: !0,&#13;
                    this: !0,&#13;
                    "jsonld-keyword": !0&#13;
                },&#13;
                Le = { state: null, column: null, marked: null, cc: null },&#13;
                Ee = { name: "this", next: { name: "arguments" } };&#13;
            return (&#13;
                (y.lex = !0),&#13;
                {&#13;
                    startState: function(e) {&#13;
                        var t = {&#13;
                            tokenize: o,&#13;
                            lastType: "sof",&#13;
                            cc: [],&#13;
                            lexical: new u((e || 0) - ve, 0, "block", !1),&#13;
                            localVars: r.localVars,&#13;
                            context: r.localVars &amp;&amp; { vars: r.localVars },&#13;
                            indented: 0&#13;
                        };&#13;
                        return (&#13;
                            r.globalVars &amp;&amp;&#13;
                                "object" == typeof r.globalVars &amp;&amp;&#13;
                                (t.globalVars = r.globalVars),&#13;
                            t&#13;
                        );&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        if (&#13;
                            (e.sol() &amp;&amp;&#13;
                                (t.lexical.hasOwnProperty("align") || (t.lexical.align = !1),&#13;
                                (t.indented = e.indentation()),&#13;
                                c(e, t)),&#13;
                            t.tokenize != s &amp;&amp; e.eatSpace())&#13;
                        )&#13;
                            return null;&#13;
                        var r = t.tokenize(e, t);&#13;
                        return "comment" == pe&#13;
                            ? r&#13;
                            : ((t.lastType =&#13;
                                  "operator" != pe || ("++" != ge &amp;&amp; "--" != ge) ? pe : "incdec"),&#13;
                              f(t, r, pe, ge, e));&#13;
                    },&#13;
                    indent: function(t, n) {&#13;
                        if (t.tokenize == s) return e.Pass;&#13;
                        if (t.tokenize != o) return 0;&#13;
                        var i = n &amp;&amp; n.charAt(0),&#13;
                            a = t.lexical;&#13;
                        if (!/^\s*else\b/.test(n))&#13;
                            for (var l = t.cc.length - 1; l &gt;= 0; --l) {&#13;
                                var c = t.cc[l];&#13;
                                if (c == y) a = a.prev;&#13;
                                else if (c != Z) break;&#13;
                            }&#13;
                        "stat" == a.type &amp;&amp; "}" == i &amp;&amp; (a = a.prev),&#13;
                            be &amp;&amp; ")" == a.type &amp;&amp; "stat" == a.prev.type &amp;&amp; (a = a.prev);&#13;
                        var u = a.type,&#13;
                            d = i == u;&#13;
                        return "vardef" == u&#13;
                            ? a.indented +&#13;
                                  ("operator" == t.lastType || "," == t.lastType ? a.info + 1 : 0)&#13;
                            : "form" == u &amp;&amp; "{" == i&#13;
                                ? a.indented&#13;
                                : "form" == u&#13;
                                    ? a.indented + ve&#13;
                                    : "stat" == u&#13;
                                        ? a.indented + (he(t, n) ? be || ve : 0)&#13;
                                        : "switch" != a.info || d || 0 == r.doubleIndentSwitch&#13;
                                            ? a.align&#13;
                                                ? a.column + (d ? 0 : 1)&#13;
                                                : a.indented + (d ? 0 : ve)&#13;
                                            : a.indented +&#13;
                                              (/^(?:case|default)\b/.test(n) ? ve : 2 * ve);&#13;
                    },&#13;
                    electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,&#13;
                    blockCommentStart: xe ? null : "/*",&#13;
                    blockCommentEnd: xe ? null : "*/",&#13;
                    lineComment: xe ? null : "//",&#13;
                    fold: "brace",&#13;
                    helperType: xe ? "json" : "javascript",&#13;
                    jsonldMode: ye,&#13;
                    jsonMode: xe&#13;
                }&#13;
            );&#13;
        }),&#13;
            e.registerHelper("wordChars", "javascript", /[\w$]/),&#13;
            e.defineMIME("text/javascript", "javascript"),&#13;
            e.defineMIME("text/ecmascript", "javascript"),&#13;
            e.defineMIME("application/javascript", "javascript"),&#13;
            e.defineMIME("application/x-javascript", "javascript"),&#13;
            e.defineMIME("application/ecmascript", "javascript"),&#13;
            e.defineMIME("application/json", { name: "javascript", json: !0 }),&#13;
            e.defineMIME("application/x-json", { name: "javascript", json: !0 }),&#13;
            e.defineMIME("application/ld+json", { name: "javascript", jsonld: !0 }),&#13;
            e.defineMIME("text/typescript", { name: "javascript", typescript: !0 }),&#13;
            e.defineMIME("application/typescript", { name: "javascript", typescript: !0 });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../xml/xml"),&#13;
                  require("../javascript/javascript"),&#13;
                  require("../css/css")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define([&#13;
                      "../../lib/codemirror",&#13;
                      "../xml/xml",&#13;
                      "../javascript/javascript",&#13;
                      "../css/css"&#13;
                  ], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode(&#13;
            "htmlmixed",&#13;
            function(t, r) {&#13;
                function n(e, t) {&#13;
                    var r = t.htmlState.tagName;&#13;
                    r &amp;&amp; (r = r.toLowerCase());&#13;
                    var n = s.token(e, t.htmlState);&#13;
                    if ("script" == r &amp;&amp; /\btag\b/.test(n) &amp;&amp; "&gt;" == e.current()) {&#13;
                        var i = e.string&#13;
                            .slice(Math.max(0, e.pos - 100), e.pos)&#13;
                            .match(/\btype\s*=\s*("[^"]+"|'[^']+'|\S+)[^&lt;]*$/i);&#13;
                        (i = i ? i[1] : ""),&#13;
                            i &amp;&amp; /[\"\']/.test(i.charAt(0)) &amp;&amp; (i = i.slice(1, i.length - 1));&#13;
                        for (var u = 0; u &lt; c.length; ++u) {&#13;
                            var d = c[u];&#13;
                            if ("string" == typeof d.matches ? i == d.matches : d.matches.test(i)) {&#13;
                                d.mode &amp;&amp;&#13;
                                    ((t.token = o),&#13;
                                    (t.localMode = d.mode),&#13;
                                    (t.localState =&#13;
                                        d.mode.startState &amp;&amp;&#13;
                                        d.mode.startState(s.indent(t.htmlState, ""))));&#13;
                                break;&#13;
                            }&#13;
                        }&#13;
                    } else&#13;
                        "style" == r &amp;&amp;&#13;
                            /\btag\b/.test(n) &amp;&amp;&#13;
                            "&gt;" == e.current() &amp;&amp;&#13;
                            ((t.token = a),&#13;
                            (t.localMode = l),&#13;
                            (t.localState = l.startState(s.indent(t.htmlState, ""))));&#13;
                    return n;&#13;
                }&#13;
                function i(e, t, r) {&#13;
                    var n,&#13;
                        i = e.current(),&#13;
                        o = i.search(t);&#13;
                    return (&#13;
                        o &gt; -1&#13;
                            ? e.backUp(i.length - o)&#13;
                            : (n = i.match(/&lt;\/?$/)) &amp;&amp;&#13;
                              (e.backUp(i.length), e.match(t, !1) || e.match(i)),&#13;
                        r&#13;
                    );&#13;
                }&#13;
                function o(e, t) {&#13;
                    return e.match(/^&lt;\/\s*script\s*&gt;/i, !1)&#13;
                        ? ((t.token = n), (t.localState = t.localMode = null), null)&#13;
                        : i(e, /&lt;\/\s*script\s*&gt;/, t.localMode.token(e, t.localState));&#13;
                }&#13;
                function a(e, t) {&#13;
                    return e.match(/^&lt;\/\s*style\s*&gt;/i, !1)&#13;
                        ? ((t.token = n), (t.localState = t.localMode = null), null)&#13;
                        : i(e, /&lt;\/\s*style\s*&gt;/, l.token(e, t.localState));&#13;
                }&#13;
                var s = e.getMode(t, {&#13;
                        name: "xml",&#13;
                        htmlMode: !0,&#13;
                        multilineTagIndentFactor: r.multilineTagIndentFactor,&#13;
                        multilineTagIndentPastTag: r.multilineTagIndentPastTag&#13;
                    }),&#13;
                    l = e.getMode(t, "css"),&#13;
                    c = [],&#13;
                    u = r &amp;&amp; r.scriptTypes;&#13;
                if (&#13;
                    (c.push({&#13;
                        matches: /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^$/i,&#13;
                        mode: e.getMode(t, "javascript")&#13;
                    }),&#13;
                    u)&#13;
                )&#13;
                    for (var d = 0; d &lt; u.length; ++d) {&#13;
                        var f = u[d];&#13;
                        c.push({ matches: f.matches, mode: f.mode &amp;&amp; e.getMode(t, f.mode) });&#13;
                    }&#13;
                return (&#13;
                    c.push({ matches: /./, mode: e.getMode(t, "text/plain") }),&#13;
                    {&#13;
                        startState: function() {&#13;
                            var e = s.startState();&#13;
                            return { token: n, localMode: null, localState: null, htmlState: e };&#13;
                        },&#13;
                        copyState: function(t) {&#13;
                            if (t.localState) var r = e.copyState(t.localMode, t.localState);&#13;
                            return {&#13;
                                token: t.token,&#13;
                                localMode: t.localMode,&#13;
                                localState: r,&#13;
                                htmlState: e.copyState(s, t.htmlState)&#13;
                            };&#13;
                        },&#13;
                        token: function(e, t) {&#13;
                            return t.token(e, t);&#13;
                        },&#13;
                        indent: function(t, r) {&#13;
                            return !t.localMode || /^\s*&lt;\//.test(r)&#13;
                                ? s.indent(t.htmlState, r)&#13;
                                : t.localMode.indent&#13;
                                    ? t.localMode.indent(t.localState, r)&#13;
                                    : e.Pass;&#13;
                        },&#13;
                        innerMode: function(e) {&#13;
                            return { state: e.localState || e.htmlState, mode: e.localMode || s };&#13;
                        }&#13;
                    }&#13;
                );&#13;
            },&#13;
            "xml",&#13;
            "javascript",&#13;
            "css"&#13;
        ),&#13;
            e.defineMIME("text/html", "htmlmixed");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../markdown/markdown"),&#13;
                  require("../../addon/mode/overlay")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define([&#13;
                      "../../lib/codemirror",&#13;
                      "../markdown/markdown",&#13;
                      "../../addon/mode/overlay"&#13;
                  ], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode(&#13;
            "gfm",&#13;
            function(t, r) {&#13;
                function n(e) {&#13;
                    return (e.code = !1), null;&#13;
                }&#13;
                var i = 0,&#13;
                    o = {&#13;
                        startState: function() {&#13;
                            return { code: !1, codeBlock: !1, ateSpace: !1 };&#13;
                        },&#13;
                        copyState: function(e) {&#13;
                            return { code: e.code, codeBlock: e.codeBlock, ateSpace: e.ateSpace };&#13;
                        },&#13;
                        token: function(e, t) {&#13;
                            if (((t.combineTokens = null), t.codeBlock))&#13;
                                return e.match(/^```/)&#13;
                                    ? ((t.codeBlock = !1), null)&#13;
                                    : (e.skipToEnd(), null);&#13;
                            if ((e.sol() &amp;&amp; (t.code = !1), e.sol() &amp;&amp; e.match(/^```/)))&#13;
                                return e.skipToEnd(), (t.codeBlock = !0), null;&#13;
                            if ("`" === e.peek()) {&#13;
                                e.next();&#13;
                                var r = e.pos;&#13;
                                e.eatWhile("`");&#13;
                                var n = 1 + e.pos - r;&#13;
                                return (&#13;
                                    t.code ? n === i &amp;&amp; (t.code = !1) : ((i = n), (t.code = !0)),&#13;
                                    null&#13;
                                );&#13;
                            }&#13;
                            if (t.code) return e.next(), null;&#13;
                            if (e.eatSpace()) return (t.ateSpace = !0), null;&#13;
                            if (e.sol() || t.ateSpace) {&#13;
                                if (&#13;
                                    ((t.ateSpace = !1),&#13;
                                    e.match(&#13;
                                        /^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+@)?(?:[a-f0-9]{7,40}\b)/&#13;
                                    ))&#13;
                                )&#13;
                                    return (t.combineTokens = !0), "link";&#13;
                                if (e.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+)?#[0-9]+\b/))&#13;
                                    return (t.combineTokens = !0), "link";&#13;
                            }&#13;
                            return e.match(&#13;
                                /^((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()&lt;&gt;]|\([^\s()&lt;&gt;]*\))+(?:\([^\s()&lt;&gt;]*\)|[^\s`*!()\[\]{};:'".,&lt;&gt;?«»""'']))/i&#13;
                            ) &amp;&amp; "](" != e.string.slice(e.start - 2, e.start)&#13;
                                ? ((t.combineTokens = !0), "link")&#13;
                                : (e.next(), null);&#13;
                        },&#13;
                        blankLine: n&#13;
                    },&#13;
                    a = {&#13;
                        underscoresBreakWords: !1,&#13;
                        taskLists: !0,&#13;
                        fencedCodeBlocks: !0,&#13;
                        strikethrough: !0&#13;
                    };&#13;
                for (var s in r) a[s] = r[s];&#13;
                return (&#13;
                    (a.name = "markdown"),&#13;
                    e.defineMIME("gfmBase", a),&#13;
                    e.overlayMode(e.getMode(t, "gfmBase"), o)&#13;
                );&#13;
            },&#13;
            "markdown"&#13;
        );&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("http", function() {&#13;
            function e(e, t) {&#13;
                return e.skipToEnd(), (t.cur = a), "error";&#13;
            }&#13;
            function t(t, n) {&#13;
                return t.match(/^HTTP\/\d\.\d/)&#13;
                    ? ((n.cur = r), "keyword")&#13;
                    : t.match(/^[A-Z]+/) &amp;&amp; /[ \t]/.test(t.peek())&#13;
                        ? ((n.cur = i), "keyword")&#13;
                        : e(t, n);&#13;
            }&#13;
            function r(t, r) {&#13;
                var i = t.match(/^\d+/);&#13;
                if (!i) return e(t, r);&#13;
                r.cur = n;&#13;
                var o = Number(i[0]);&#13;
                return o &gt;= 100 &amp;&amp; 200 &gt; o&#13;
                    ? "positive informational"&#13;
                    : o &gt;= 200 &amp;&amp; 300 &gt; o&#13;
                        ? "positive success"&#13;
                        : o &gt;= 300 &amp;&amp; 400 &gt; o&#13;
                            ? "positive redirect"&#13;
                            : o &gt;= 400 &amp;&amp; 500 &gt; o&#13;
                                ? "negative client-error"&#13;
                                : o &gt;= 500 &amp;&amp; 600 &gt; o&#13;
                                    ? "negative server-error"&#13;
                                    : "error";&#13;
            }&#13;
            function n(e, t) {&#13;
                return e.skipToEnd(), (t.cur = a), null;&#13;
            }&#13;
            function i(e, t) {&#13;
                return e.eatWhile(/\S/), (t.cur = o), "string-2";&#13;
            }&#13;
            function o(t, r) {&#13;
                return t.match(/^HTTP\/\d\.\d$/) ? ((r.cur = a), "keyword") : e(t, r);&#13;
            }&#13;
            function a(e) {&#13;
                return e.sol() &amp;&amp; !e.eat(/[ \t]/)&#13;
                    ? e.match(/^.*?:/)&#13;
                        ? "atom"&#13;
                        : (e.skipToEnd(), "error")&#13;
                    : (e.skipToEnd(), "string");&#13;
            }&#13;
            function s(e) {&#13;
                return e.skipToEnd(), null;&#13;
            }&#13;
            return {&#13;
                token: function(e, t) {&#13;
                    var r = t.cur;&#13;
                    return r != a &amp;&amp; r != s &amp;&amp; e.eatSpace() ? null : r(e, t);&#13;
                },&#13;
                blankLine: function(e) {&#13;
                    e.cur = s;&#13;
                },&#13;
                startState: function() {&#13;
                    return { cur: t };&#13;
                }&#13;
            };&#13;
        }),&#13;
            e.defineMIME("message/http", "http");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("go", function(e) {&#13;
            function t(e, t) {&#13;
                var i = e.next();&#13;
                if ('"' == i || "'" == i || "`" == i) return (t.tokenize = r(i)), t.tokenize(e, t);&#13;
                if (/[\d\.]/.test(i))&#13;
                    return (&#13;
                        "." == i&#13;
                            ? e.match(/^[0-9]+([eE][\-+]?[0-9]+)?/)&#13;
                            : "0" == i&#13;
                                ? e.match(/^[xX][0-9a-fA-F]+/) || e.match(/^0[0-7]+/)&#13;
                                : e.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/),&#13;
                        "number"&#13;
                    );&#13;
                if (/[\[\]{}\(\),;\:\.]/.test(i)) return (s = i), null;&#13;
                if ("/" == i) {&#13;
                    if (e.eat("*")) return (t.tokenize = n), n(e, t);&#13;
                    if (e.eat("/")) return e.skipToEnd(), "comment";&#13;
                }&#13;
                if (d.test(i)) return e.eatWhile(d), "operator";&#13;
                e.eatWhile(/[\w\$_\xa1-\uffff]/);&#13;
                var o = e.current();&#13;
                return c.propertyIsEnumerable(o)&#13;
                    ? (("case" == o || "default" == o) &amp;&amp; (s = "case"), "keyword")&#13;
                    : u.propertyIsEnumerable(o)&#13;
                        ? "atom"&#13;
                        : "variable";&#13;
            }&#13;
            function r(e) {&#13;
                return function(r, n) {&#13;
                    for (var i, o = !1, a = !1; null != (i = r.next()); ) {&#13;
                        if (i == e &amp;&amp; !o) {&#13;
                            a = !0;&#13;
                            break;&#13;
                        }&#13;
                        o = !o &amp;&amp; "\\" == i;&#13;
                    }&#13;
                    return (a || (!o &amp;&amp; "`" != e)) &amp;&amp; (n.tokenize = t), "string";&#13;
                };&#13;
            }&#13;
            function n(e, r) {&#13;
                for (var n, i = !1; (n = e.next()); ) {&#13;
                    if ("/" == n &amp;&amp; i) {&#13;
                        r.tokenize = t;&#13;
                        break;&#13;
                    }&#13;
                    i = "*" == n;&#13;
                }&#13;
                return "comment";&#13;
            }&#13;
            function i(e, t, r, n, i) {&#13;
                (this.indented = e),&#13;
                    (this.column = t),&#13;
                    (this.type = r),&#13;
                    (this.align = n),&#13;
                    (this.prev = i);&#13;
            }&#13;
            function o(e, t, r) {&#13;
                return (e.context = new i(e.indented, t, r, null, e.context));&#13;
            }&#13;
            function a(e) {&#13;
                if (e.context.prev) {&#13;
                    var t = e.context.type;&#13;
                    return (&#13;
                        (")" == t || "]" == t || "}" == t) &amp;&amp; (e.indented = e.context.indented),&#13;
                        (e.context = e.context.prev)&#13;
                    );&#13;
                }&#13;
            }&#13;
            var s,&#13;
                l = e.indentUnit,&#13;
                c = {&#13;
                    break: !0,&#13;
                    case: !0,&#13;
                    chan: !0,&#13;
                    const: !0,&#13;
                    continue: !0,&#13;
                    default: !0,&#13;
                    defer: !0,&#13;
                    else: !0,&#13;
                    fallthrough: !0,&#13;
                    for: !0,&#13;
                    func: !0,&#13;
                    go: !0,&#13;
                    goto: !0,&#13;
                    if: !0,&#13;
                    import: !0,&#13;
                    interface: !0,&#13;
                    map: !0,&#13;
                    package: !0,&#13;
                    range: !0,&#13;
                    return: !0,&#13;
                    select: !0,&#13;
                    struct: !0,&#13;
                    switch: !0,&#13;
                    type: !0,&#13;
                    var: !0,&#13;
                    bool: !0,&#13;
                    byte: !0,&#13;
                    complex64: !0,&#13;
                    complex128: !0,&#13;
                    float32: !0,&#13;
                    float64: !0,&#13;
                    int8: !0,&#13;
                    int16: !0,&#13;
                    int32: !0,&#13;
                    int64: !0,&#13;
                    string: !0,&#13;
                    uint8: !0,&#13;
                    uint16: !0,&#13;
                    uint32: !0,&#13;
                    uint64: !0,&#13;
                    int: !0,&#13;
                    uint: !0,&#13;
                    uintptr: !0&#13;
                },&#13;
                u = {&#13;
                    true: !0,&#13;
                    false: !0,&#13;
                    iota: !0,&#13;
                    nil: !0,&#13;
                    append: !0,&#13;
                    cap: !0,&#13;
                    close: !0,&#13;
                    complex: !0,&#13;
                    copy: !0,&#13;
                    imag: !0,&#13;
                    len: !0,&#13;
                    make: !0,&#13;
                    new: !0,&#13;
                    panic: !0,&#13;
                    print: !0,&#13;
                    println: !0,&#13;
                    real: !0,&#13;
                    recover: !0&#13;
                },&#13;
                d = /[+\-*&amp;^%:=&lt;&gt;!|\/]/;&#13;
            return {&#13;
                startState: function(e) {&#13;
                    return {&#13;
                        tokenize: null,&#13;
                        context: new i((e || 0) - l, 0, "top", !1),&#13;
                        indented: 0,&#13;
                        startOfLine: !0&#13;
                    };&#13;
                },&#13;
                token: function(e, r) {&#13;
                    var n = r.context;&#13;
                    if (&#13;
                        (e.sol() &amp;&amp;&#13;
                            (null == n.align &amp;&amp; (n.align = !1),&#13;
                            (r.indented = e.indentation()),&#13;
                            (r.startOfLine = !0),&#13;
                            "case" == n.type &amp;&amp; (n.type = "}")),&#13;
                        e.eatSpace())&#13;
                    )&#13;
                        return null;&#13;
                    s = null;&#13;
                    var i = (r.tokenize || t)(e, r);&#13;
                    return "comment" == i&#13;
                        ? i&#13;
                        : (null == n.align &amp;&amp; (n.align = !0),&#13;
                          "{" == s&#13;
                              ? o(r, e.column(), "}")&#13;
                              : "[" == s&#13;
                                  ? o(r, e.column(), "]")&#13;
                                  : "(" == s&#13;
                                      ? o(r, e.column(), ")")&#13;
                                      : "case" == s&#13;
                                          ? (n.type = "case")&#13;
                                          : "}" == s &amp;&amp; "}" == n.type&#13;
                                              ? (n = a(r))&#13;
                                              : s == n.type &amp;&amp; a(r),&#13;
                          (r.startOfLine = !1),&#13;
                          i);&#13;
                },&#13;
                indent: function(e, r) {&#13;
                    if (e.tokenize != t &amp;&amp; null != e.tokenize) return 0;&#13;
                    var n = e.context,&#13;
                        i = r &amp;&amp; r.charAt(0);&#13;
                    if ("case" == n.type &amp;&amp; /^(?:case|default)\b/.test(r))&#13;
                        return (e.context.type = "}"), n.indented;&#13;
                    var o = i == n.type;&#13;
                    return n.align ? n.column + (o ? 0 : 1) : n.indented + (o ? 0 : l);&#13;
                },&#13;
                electricChars: "{}):",&#13;
                fold: "brace",&#13;
                blockCommentStart: "/*",&#13;
                blockCommentEnd: "*/",&#13;
                lineComment: "//"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-go", "go");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"), require("../clike/clike"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror", "../clike/clike"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e) {&#13;
            for (var t = {}, r = 0; r &lt; e.length; ++r) t[e[r]] = !0;&#13;
            return t;&#13;
        }&#13;
        var r = "this super static final const abstract class extends external factory implements get native operator set typedef with enum throw rethrow assert break case continue default in return new deferred async await try catch finally do else for if switch while import library export part of show hide is".split(&#13;
                " "&#13;
            ),&#13;
            n = "try catch finally do else for if switch while".split(" "),&#13;
            i = "true false null".split(" "),&#13;
            o = "void bool num int double dynamic var String".split(" ");&#13;
        e.defineMIME("application/dart", {&#13;
            name: "clike",&#13;
            keywords: t(r),&#13;
            multiLineStrings: !0,&#13;
            blockKeywords: t(n),&#13;
            builtin: t(o),&#13;
            atoms: t(i),&#13;
            hooks: {&#13;
                "@": function(e) {&#13;
                    return e.eatWhile(/[\w\$_]/), "meta";&#13;
                }&#13;
            }&#13;
        }),&#13;
            e.registerHelper("hintWords", "application/dart", r.concat(i).concat(o)),&#13;
            e.defineMode(&#13;
                "dart",&#13;
                function(t) {&#13;
                    return e.getMode(t, "application/dart");&#13;
                },&#13;
                "clike"&#13;
            );&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("coffeescript", function(e, t) {&#13;
            function r(e) {&#13;
                return new RegExp("^((" + e.join(")|(") + "))\\b");&#13;
            }&#13;
            function n(e, t) {&#13;
                if (e.sol()) {&#13;
                    null === t.scope.align &amp;&amp; (t.scope.align = !1);&#13;
                    var r = t.scope.offset;&#13;
                    if (e.eatSpace()) {&#13;
                        var n = e.indentation();&#13;
                        return n &gt; r &amp;&amp; "coffee" == t.scope.type&#13;
                            ? "indent"&#13;
                            : r &gt; n&#13;
                                ? "dedent"&#13;
                                : null;&#13;
                    }&#13;
                    r &gt; 0 &amp;&amp; s(e, t);&#13;
                }&#13;
                if (e.eatSpace()) return null;&#13;
                var a = e.peek();&#13;
                if (e.match("####")) return e.skipToEnd(), "comment";&#13;
                if (e.match("###")) return (t.tokenize = o), t.tokenize(e, t);&#13;
                if ("#" === a) return e.skipToEnd(), "comment";&#13;
                if (e.match(/^-?[0-9\.]/, !1)) {&#13;
                    var l = !1;&#13;
                    if (&#13;
                        (e.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i) &amp;&amp; (l = !0),&#13;
                        e.match(/^-?\d+\.\d*/) &amp;&amp; (l = !0),&#13;
                        e.match(/^-?\.\d+/) &amp;&amp; (l = !0),&#13;
                        l)&#13;
                    )&#13;
                        return "." == e.peek() &amp;&amp; e.backUp(1), "number";&#13;
                    var p = !1;&#13;
                    if (&#13;
                        (e.match(/^-?0x[0-9a-f]+/i) &amp;&amp; (p = !0),&#13;
                        e.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/) &amp;&amp; (p = !0),&#13;
                        e.match(/^-?0(?![\dx])/i) &amp;&amp; (p = !0),&#13;
                        p)&#13;
                    )&#13;
                        return "number";&#13;
                }&#13;
                if (e.match(b))&#13;
                    return (t.tokenize = i(e.current(), !1, "string")), t.tokenize(e, t);&#13;
                if (e.match(y)) {&#13;
                    if ("/" != e.current() || e.match(/^.*\//, !1))&#13;
                        return (t.tokenize = i(e.current(), !0, "string-2")), t.tokenize(e, t);&#13;
                    e.backUp(1);&#13;
                }&#13;
                return e.match(u) || e.match(h)&#13;
                    ? "operator"&#13;
                    : e.match(d)&#13;
                        ? "punctuation"&#13;
                        : e.match(k)&#13;
                            ? "atom"&#13;
                            : e.match(v)&#13;
                                ? "keyword"&#13;
                                : e.match(f)&#13;
                                    ? "variable"&#13;
                                    : e.match(m)&#13;
                                        ? "property"&#13;
                                        : (e.next(), c);&#13;
            }&#13;
            function i(e, r, i) {&#13;
                return function(o, a) {&#13;
                    for (; !o.eol(); )&#13;
                        if ((o.eatWhile(/[^'"\/\\]/), o.eat("\\"))) {&#13;
                            if ((o.next(), r &amp;&amp; o.eol())) return i;&#13;
                        } else {&#13;
                            if (o.match(e)) return (a.tokenize = n), i;&#13;
                            o.eat(/['"\/]/);&#13;
                        }&#13;
                    return r &amp;&amp; (t.singleLineStringErrors ? (i = c) : (a.tokenize = n)), i;&#13;
                };&#13;
            }&#13;
            function o(e, t) {&#13;
                for (; !e.eol(); ) {&#13;
                    if ((e.eatWhile(/[^#]/), e.match("###"))) {&#13;
                        t.tokenize = n;&#13;
                        break;&#13;
                    }&#13;
                    e.eatWhile("#");&#13;
                }&#13;
                return "comment";&#13;
            }&#13;
            function a(t, r, n) {&#13;
                n = n || "coffee";&#13;
                for (var i = 0, o = !1, a = null, s = r.scope; s; s = s.prev)&#13;
                    if ("coffee" === s.type || "}" == s.type) {&#13;
                        i = s.offset + e.indentUnit;&#13;
                        break;&#13;
                    }&#13;
                "coffee" !== n&#13;
                    ? ((o = null), (a = t.column() + t.current().length))&#13;
                    : r.scope.align &amp;&amp; (r.scope.align = !1),&#13;
                    (r.scope = { offset: i, type: n, prev: r.scope, align: o, alignOffset: a });&#13;
            }&#13;
            function s(e, t) {&#13;
                if (t.scope.prev) {&#13;
                    if ("coffee" === t.scope.type) {&#13;
                        for (var r = e.indentation(), n = !1, i = t.scope; i; i = i.prev)&#13;
                            if (r === i.offset) {&#13;
                                n = !0;&#13;
                                break;&#13;
                            }&#13;
                        if (!n) return !0;&#13;
                        for (; t.scope.prev &amp;&amp; t.scope.offset !== r; ) t.scope = t.scope.prev;&#13;
                        return !1;&#13;
                    }&#13;
                    return (t.scope = t.scope.prev), !1;&#13;
                }&#13;
            }&#13;
            function l(e, t) {&#13;
                var r = t.tokenize(e, t),&#13;
                    n = e.current();&#13;
                if ("." === n)&#13;
                    return (&#13;
                        (r = t.tokenize(e, t)),&#13;
                        (n = e.current()),&#13;
                        /^\.[\w$]+$/.test(n) ? "variable" : c&#13;
                    );&#13;
                "return" === n &amp;&amp; (t.dedent = !0),&#13;
                    ((("-&gt;" !== n &amp;&amp; "=&gt;" !== n) || t.lambda || e.peek()) &amp;&amp; "indent" !== r) ||&#13;
                        a(e, t);&#13;
                var i = "[({".indexOf(n);&#13;
                if (&#13;
                    (-1 !== i &amp;&amp; a(e, t, "])}".slice(i, i + 1)),&#13;
                    p.exec(n) &amp;&amp; a(e, t),&#13;
                    "then" == n &amp;&amp; s(e, t),&#13;
                    "dedent" === r &amp;&amp; s(e, t))&#13;
                )&#13;
                    return c;&#13;
                if (((i = "])}".indexOf(n)), -1 !== i)) {&#13;
                    for (; "coffee" == t.scope.type &amp;&amp; t.scope.prev; ) t.scope = t.scope.prev;&#13;
                    t.scope.type == n &amp;&amp; (t.scope = t.scope.prev);&#13;
                }&#13;
                return (&#13;
                    t.dedent &amp;&amp;&#13;
                        e.eol() &amp;&amp;&#13;
                        ("coffee" == t.scope.type &amp;&amp; t.scope.prev &amp;&amp; (t.scope = t.scope.prev),&#13;
                        (t.dedent = !1)),&#13;
                    r&#13;
                );&#13;
            }&#13;
            var c = "error",&#13;
                u = /^(?:-&gt;|=&gt;|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|&lt;[&gt;&lt;]?=?|&gt;&gt;?=?|%=?|&amp;=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&amp;&amp;|\?)=)/,&#13;
                d = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/,&#13;
                f = /^[_A-Za-z$][_A-Za-z$0-9]*/,&#13;
                m = /^(@|this\.)[_A-Za-z$][_A-Za-z$0-9]*/,&#13;
                h = r(["and", "or", "not", "is", "isnt", "in", "instanceof", "typeof"]),&#13;
                p = [&#13;
                    "for",&#13;
                    "while",&#13;
                    "loop",&#13;
                    "if",&#13;
                    "unless",&#13;
                    "else",&#13;
                    "switch",&#13;
                    "try",&#13;
                    "catch",&#13;
                    "finally",&#13;
                    "class"&#13;
                ],&#13;
                g = [&#13;
                    "break",&#13;
                    "by",&#13;
                    "continue",&#13;
                    "debugger",&#13;
                    "delete",&#13;
                    "do",&#13;
                    "in",&#13;
                    "of",&#13;
                    "new",&#13;
                    "return",&#13;
                    "then",&#13;
                    "this",&#13;
                    "@",&#13;
                    "throw",&#13;
                    "when",&#13;
                    "until",&#13;
                    "extends"&#13;
                ],&#13;
                v = r(p.concat(g));&#13;
            p = r(p);&#13;
            var b = /^('{3}|\"{3}|['\"])/,&#13;
                y = /^(\/{3}|\/)/,&#13;
                x = [&#13;
                    "Infinity",&#13;
                    "NaN",&#13;
                    "undefined",&#13;
                    "null",&#13;
                    "true",&#13;
                    "false",&#13;
                    "on",&#13;
                    "off",&#13;
                    "yes",&#13;
                    "no"&#13;
                ],&#13;
                k = r(x),&#13;
                w = {&#13;
                    startState: function(e) {&#13;
                        return {&#13;
                            tokenize: n,&#13;
                            scope: { offset: e || 0, type: "coffee", prev: null, align: !1 },&#13;
                            lastToken: null,&#13;
                            lambda: !1,&#13;
                            dedent: 0&#13;
                        };&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        var r = null === t.scope.align &amp;&amp; t.scope;&#13;
                        r &amp;&amp; e.sol() &amp;&amp; (r.align = !1);&#13;
                        var n = l(e, t);&#13;
                        return (&#13;
                            r &amp;&amp; n &amp;&amp; "comment" != n &amp;&amp; (r.align = !0),&#13;
                            (t.lastToken = { style: n, content: e.current() }),&#13;
                            e.eol() &amp;&amp; e.lambda &amp;&amp; (t.lambda = !1),&#13;
                            n&#13;
                        );&#13;
                    },&#13;
                    indent: function(e, t) {&#13;
                        if (e.tokenize != n) return 0;&#13;
                        var r = e.scope,&#13;
                            i = t &amp;&amp; "])}".indexOf(t.charAt(0)) &gt; -1;&#13;
                        if (i) for (; "coffee" == r.type &amp;&amp; r.prev; ) r = r.prev;&#13;
                        var o = i &amp;&amp; r.type === t.charAt(0);&#13;
                        return r.align ? r.alignOffset - (o ? 1 : 0) : (o ? r.prev : r).offset;&#13;
                    },&#13;
                    lineComment: "#",&#13;
                    fold: "indent"&#13;
                };&#13;
            return w;&#13;
        }),&#13;
            e.defineMIME("text/x-coffeescript", "coffeescript");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("nginx", function(e) {&#13;
            function t(e) {&#13;
                for (var t = {}, r = e.split(" "), n = 0; n &lt; r.length; ++n) t[r[n]] = !0;&#13;
                return t;&#13;
            }&#13;
            function r(e, t) {&#13;
                return (s = t), e;&#13;
            }&#13;
            function n(e, t) {&#13;
                e.eatWhile(/[\w\$_]/);&#13;
                var n = e.current();&#13;
                if (l.propertyIsEnumerable(n)) return "keyword";&#13;
                if (c.propertyIsEnumerable(n)) return "variable-2";&#13;
                if (u.propertyIsEnumerable(n)) return "string-2";&#13;
                var s = e.next();&#13;
                return "@" == s&#13;
                    ? (e.eatWhile(/[\w\\\-]/), r("meta", e.current()))&#13;
                    : "/" == s &amp;&amp; e.eat("*")&#13;
                        ? ((t.tokenize = i), i(e, t))&#13;
                        : "&lt;" == s &amp;&amp; e.eat("!")&#13;
                            ? ((t.tokenize = o), o(e, t))&#13;
                            : "=" != s&#13;
                                ? ("~" != s &amp;&amp; "|" != s) || !e.eat("=")&#13;
                                    ? '"' == s || "'" == s&#13;
                                        ? ((t.tokenize = a(s)), t.tokenize(e, t))&#13;
                                        : "#" == s&#13;
                                            ? (e.skipToEnd(), r("comment", "comment"))&#13;
                                            : "!" == s&#13;
                                                ? (e.match(/^\s*\w*/), r("keyword", "important"))&#13;
                                                : /\d/.test(s)&#13;
                                                    ? (e.eatWhile(/[\w.%]/), r("number", "unit"))&#13;
                                                    : /[,.+&gt;*\/]/.test(s)&#13;
                                                        ? r(null, "select-op")&#13;
                                                        : /[;{}:\[\]]/.test(s)&#13;
                                                            ? r(null, s)&#13;
                                                            : (e.eatWhile(/[\w\\\-]/),&#13;
                                                              r("variable", "variable"))&#13;
                                    : r(null, "compare")&#13;
                                : void r(null, "compare");&#13;
            }&#13;
            function i(e, t) {&#13;
                for (var i, o = !1; null != (i = e.next()); ) {&#13;
                    if (o &amp;&amp; "/" == i) {&#13;
                        t.tokenize = n;&#13;
                        break;&#13;
                    }&#13;
                    o = "*" == i;&#13;
                }&#13;
                return r("comment", "comment");&#13;
            }&#13;
            function o(e, t) {&#13;
                for (var i, o = 0; null != (i = e.next()); ) {&#13;
                    if (o &gt;= 2 &amp;&amp; "&gt;" == i) {&#13;
                        t.tokenize = n;&#13;
                        break;&#13;
                    }&#13;
                    o = "-" == i ? o + 1 : 0;&#13;
                }&#13;
                return r("comment", "comment");&#13;
            }&#13;
            function a(e) {&#13;
                return function(t, i) {&#13;
                    for (var o, a = !1; null != (o = t.next()) &amp;&amp; (o != e || a); )&#13;
                        a = !a &amp;&amp; "\\" == o;&#13;
                    return a || (i.tokenize = n), r("string", "string");&#13;
                };&#13;
            }&#13;
            var s,&#13;
                l = t(&#13;
                    "break return rewrite set accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"&#13;
                ),&#13;
                c = t(&#13;
                    "http mail events server types location upstream charset_map limit_except if geo map"&#13;
                ),&#13;
                u = t(&#13;
                    "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"&#13;
                ),&#13;
                d = e.indentUnit;&#13;
&#13;
            return {&#13;
                startState: function(e) {&#13;
                    return { tokenize: n, baseIndent: e || 0, stack: [] };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if (e.eatSpace()) return null;&#13;
                    s = null;&#13;
                    var r = t.tokenize(e, t),&#13;
                        n = t.stack[t.stack.length - 1];&#13;
                    return (&#13;
                        "hash" == s &amp;&amp; "rule" == n&#13;
                            ? (r = "atom")&#13;
                            : "variable" == r &amp;&amp;&#13;
                              ("rule" == n ? (r = "number") : (n &amp;&amp; "@media{" != n) || (r = "tag")),&#13;
                        "rule" == n &amp;&amp; /^[\{\};]$/.test(s) &amp;&amp; t.stack.pop(),&#13;
                        "{" == s&#13;
                            ? "@media" == n&#13;
                                ? (t.stack[t.stack.length - 1] = "@media{")&#13;
                                : t.stack.push("{")&#13;
                            : "}" == s&#13;
                                ? t.stack.pop()&#13;
                                : "@media" == s&#13;
                                    ? t.stack.push("@media")&#13;
                                    : "{" == n &amp;&amp; "comment" != s &amp;&amp; t.stack.push("rule"),&#13;
                        r&#13;
                    );&#13;
                },&#13;
                indent: function(e, t) {&#13;
                    var r = e.stack.length;&#13;
                    return (&#13;
                        /^\}/.test(t) &amp;&amp; (r -= "rule" == e.stack[e.stack.length - 1] ? 2 : 1),&#13;
                        e.baseIndent + r * d&#13;
                    );&#13;
                },&#13;
                electricChars: "}"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/nginx", "text/x-nginx-conf");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e) {&#13;
            return new RegExp("^((" + e.join(")|(") + "))\\b");&#13;
        }&#13;
        function r(e) {&#13;
            return e.scopes[e.scopes.length - 1];&#13;
        }&#13;
        var n = t(["and", "or", "not", "is"]),&#13;
            i = [&#13;
                "as",&#13;
                "assert",&#13;
                "break",&#13;
                "class",&#13;
                "continue",&#13;
                "def",&#13;
                "del",&#13;
                "elif",&#13;
                "else",&#13;
                "except",&#13;
                "finally",&#13;
                "for",&#13;
                "from",&#13;
                "global",&#13;
                "if",&#13;
                "import",&#13;
                "lambda",&#13;
                "pass",&#13;
                "raise",&#13;
                "return",&#13;
                "try",&#13;
                "while",&#13;
                "with",&#13;
                "yield",&#13;
                "in"&#13;
            ],&#13;
            o = [&#13;
                "abs",&#13;
                "all",&#13;
                "any",&#13;
                "bin",&#13;
                "bool",&#13;
                "bytearray",&#13;
                "callable",&#13;
                "chr",&#13;
                "classmethod",&#13;
                "compile",&#13;
                "complex",&#13;
                "delattr",&#13;
                "dict",&#13;
                "dir",&#13;
                "divmod",&#13;
                "enumerate",&#13;
                "eval",&#13;
                "filter",&#13;
                "float",&#13;
                "format",&#13;
                "frozenset",&#13;
                "getattr",&#13;
                "globals",&#13;
                "hasattr",&#13;
                "hash",&#13;
                "help",&#13;
                "hex",&#13;
                "id",&#13;
                "input",&#13;
                "int",&#13;
                "isinstance",&#13;
                "issubclass",&#13;
                "iter",&#13;
                "len",&#13;
                "list",&#13;
                "locals",&#13;
                "map",&#13;
                "max",&#13;
                "memoryview",&#13;
                "min",&#13;
                "next",&#13;
                "object",&#13;
                "oct",&#13;
                "open",&#13;
                "ord",&#13;
                "pow",&#13;
                "property",&#13;
                "range",&#13;
                "repr",&#13;
                "reversed",&#13;
                "round",&#13;
                "set",&#13;
                "setattr",&#13;
                "slice",&#13;
                "sorted",&#13;
                "staticmethod",&#13;
                "str",&#13;
                "sum",&#13;
                "super",&#13;
                "tuple",&#13;
                "type",&#13;
                "vars",&#13;
                "zip",&#13;
                "__import__",&#13;
                "NotImplemented",&#13;
                "Ellipsis",&#13;
                "__debug__"&#13;
            ],&#13;
            a = {&#13;
                builtins: [&#13;
                    "apply",&#13;
                    "basestring",&#13;
                    "buffer",&#13;
                    "cmp",&#13;
                    "coerce",&#13;
                    "execfile",&#13;
                    "file",&#13;
                    "intern",&#13;
                    "long",&#13;
                    "raw_input",&#13;
                    "reduce",&#13;
                    "reload",&#13;
                    "unichr",&#13;
                    "unicode",&#13;
                    "xrange",&#13;
                    "False",&#13;
                    "True",&#13;
                    "None"&#13;
                ],&#13;
                keywords: ["exec", "print"]&#13;
            },&#13;
            s = {&#13;
                builtins: ["ascii", "bytes", "exec", "print"],&#13;
                keywords: ["nonlocal", "False", "True", "None"]&#13;
            };&#13;
        e.registerHelper("hintWords", "python", i.concat(o)),&#13;
            e.defineMode("python", function(l, c) {&#13;
                function u(e, t) {&#13;
                    if (e.sol() &amp;&amp; "py" == r(t).type) {&#13;
                        var n = r(t).offset;&#13;
                        if (e.eatSpace()) {&#13;
                            var i = e.indentation();&#13;
                            return (&#13;
                                i &gt; n ? m(e, t, "py") : n &gt; i &amp;&amp; h(e, t) &amp;&amp; (t.errorToken = !0),&#13;
                                null&#13;
                            );&#13;
                        }&#13;
                        var o = d(e, t);&#13;
                        return n &gt; 0 &amp;&amp; h(e, t) &amp;&amp; (o += " " + g), o;&#13;
                    }&#13;
                    return d(e, t);&#13;
                }&#13;
                function d(e, t) {&#13;
                    if (e.eatSpace()) return null;&#13;
                    var r = e.peek();&#13;
                    if ("#" == r) return e.skipToEnd(), "comment";&#13;
                    if (e.match(/^[0-9\.]/, !1)) {&#13;
                        var i = !1;&#13;
                        if (&#13;
                            (e.match(/^\d*\.\d+(e[\+\-]?\d+)?/i) &amp;&amp; (i = !0),&#13;
                            e.match(/^\d+\.\d*/) &amp;&amp; (i = !0),&#13;
                            e.match(/^\.\d+/) &amp;&amp; (i = !0),&#13;
                            i)&#13;
                        )&#13;
                            return e.eat(/J/i), "number";&#13;
                        var o = !1;&#13;
                        if (&#13;
                            (e.match(/^0x[0-9a-f]+/i) &amp;&amp; (o = !0),&#13;
                            e.match(/^0b[01]+/i) &amp;&amp; (o = !0),&#13;
                            e.match(/^0o[0-7]+/i) &amp;&amp; (o = !0),&#13;
                            e.match(/^[1-9]\d*(e[\+\-]?\d+)?/) &amp;&amp; (e.eat(/J/i), (o = !0)),&#13;
                            e.match(/^0(?![\dx])/i) &amp;&amp; (o = !0),&#13;
                            o)&#13;
                        )&#13;
                            return e.eat(/L/i), "number";&#13;
                    }&#13;
                    return e.match(T)&#13;
                        ? ((t.tokenize = f(e.current())), t.tokenize(e, t))&#13;
                        : e.match(x) || e.match(y)&#13;
                            ? null&#13;
                            : e.match(b) || e.match(k) || e.match(n)&#13;
                                ? "operator"&#13;
                                : e.match(v)&#13;
                                    ? null&#13;
                                    : e.match(M)&#13;
                                        ? "keyword"&#13;
                                        : e.match(L)&#13;
                                            ? "builtin"&#13;
                                            : e.match(/^(self|cls)\b/)&#13;
                                                ? "variable-2"&#13;
                                                : e.match(w)&#13;
                                                    ? "def" == t.lastToken || "class" == t.lastToken&#13;
                                                        ? "def"&#13;
                                                        : "variable"&#13;
                                                    : (e.next(), g);&#13;
                }&#13;
                function f(e) {&#13;
                    function t(t, i) {&#13;
                        for (; !t.eol(); )&#13;
                            if ((t.eatWhile(/[^'"\\]/), t.eat("\\"))) {&#13;
                                if ((t.next(), r &amp;&amp; t.eol())) return n;&#13;
                            } else {&#13;
                                if (t.match(e)) return (i.tokenize = u), n;&#13;
                                t.eat(/['"]/);&#13;
                            }&#13;
                        if (r) {&#13;
                            if (c.singleLineStringErrors) return g;&#13;
                            i.tokenize = u;&#13;
                        }&#13;
                        return n;&#13;
                    }&#13;
                    for (; "rub".indexOf(e.charAt(0).toLowerCase()) &gt;= 0; ) e = e.substr(1);&#13;
                    var r = 1 == e.length,&#13;
                        n = "string";&#13;
                    return (t.isString = !0), t;&#13;
                }&#13;
                function m(e, t, n) {&#13;
                    var i = 0,&#13;
                        o = null;&#13;
                    if ("py" == n) for (; "py" != r(t).type; ) t.scopes.pop();&#13;
                    (i = r(t).offset + ("py" == n ? l.indentUnit : _)),&#13;
                        "py" == n || e.match(/^(\s|#.*)*$/, !1) || (o = e.column() + 1),&#13;
                        t.scopes.push({ offset: i, type: n, align: o });&#13;
                }&#13;
                function h(e, t) {&#13;
                    for (var n = e.indentation(); r(t).offset &gt; n; ) {&#13;
                        if ("py" != r(t).type) return !0;&#13;
                        t.scopes.pop();&#13;
                    }&#13;
                    return r(t).offset != n;&#13;
                }&#13;
                function p(e, t) {&#13;
                    var n = t.tokenize(e, t),&#13;
                        i = e.current();&#13;
                    if ("." == i)&#13;
                        return (&#13;
                            (n = e.match(w, !1) ? null : g),&#13;
                            null == n &amp;&amp; "meta" == t.lastStyle &amp;&amp; (n = "meta"),&#13;
                            n&#13;
                        );&#13;
                    if ("@" == i)&#13;
                        return c.version &amp;&amp; 3 == parseInt(c.version, 10)&#13;
                            ? e.match(w, !1)&#13;
                                ? "meta"&#13;
                                : "operator"&#13;
                            : e.match(w, !1)&#13;
                                ? "meta"&#13;
                                : g;&#13;
                    ("variable" != n &amp;&amp; "builtin" != n) || "meta" != t.lastStyle || (n = "meta"),&#13;
                        ("pass" == i || "return" == i) &amp;&amp; (t.dedent += 1),&#13;
                        "lambda" == i &amp;&amp; (t.lambda = !0),&#13;
                        ":" != i || t.lambda || "py" != r(t).type || m(e, t, "py");&#13;
                    var o = 1 == i.length ? "[({".indexOf(i) : -1;&#13;
                    if (&#13;
                        (-1 != o &amp;&amp; m(e, t, "])}".slice(o, o + 1)), (o = "])}".indexOf(i)), -1 != o)&#13;
                    ) {&#13;
                        if (r(t).type != i) return g;&#13;
                        t.scopes.pop();&#13;
                    }&#13;
                    return (&#13;
                        t.dedent &gt; 0 &amp;&amp;&#13;
                            e.eol() &amp;&amp;&#13;
                            "py" == r(t).type &amp;&amp;&#13;
                            (t.scopes.length &gt; 1 &amp;&amp; t.scopes.pop(), (t.dedent -= 1)),&#13;
                        n&#13;
                    );&#13;
                }&#13;
                var g = "error",&#13;
                    v = c.singleDelimiters || new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]"),&#13;
                    b =&#13;
                        c.doubleOperators ||&#13;
                        new RegExp("^((==)|(!=)|(&lt;=)|(&gt;=)|(&lt;&gt;)|(&lt;&lt;)|(&gt;&gt;)|(//)|(\\*\\*))"),&#13;
                    y =&#13;
                        c.doubleDelimiters ||&#13;
                        new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&amp;=)|(\\|=)|(\\^=))"),&#13;
                    x = c.tripleDelimiters || new RegExp("^((//=)|(&gt;&gt;=)|(&lt;&lt;=)|(\\*\\*=))");&#13;
                if (c.version &amp;&amp; 3 == parseInt(c.version, 10))&#13;
                    var k = c.singleOperators || new RegExp("^[\\+\\-\\*/%&amp;|\\^~&lt;&gt;!@]"),&#13;
                        w = c.identifiers || new RegExp("^[_A-Za-z¡-][_A-Za-z0-9¡-]*");&#13;
                else&#13;
                    var k = c.singleOperators || new RegExp("^[\\+\\-\\*/%&amp;|\\^~&lt;&gt;!]"),&#13;
                        w = c.identifiers || new RegExp("^[_A-Za-z][_A-Za-z0-9]*");&#13;
                var _ = c.hangingIndent || l.indentUnit,&#13;
                    C = i,&#13;
                    S = o;&#13;
                if (&#13;
                    (void 0 != c.extra_keywords &amp;&amp; (C = C.concat(c.extra_keywords)),&#13;
                    void 0 != c.extra_builtins &amp;&amp; (S = S.concat(c.extra_builtins)),&#13;
                    c.version &amp;&amp; 3 == parseInt(c.version, 10))&#13;
                ) {&#13;
                    (C = C.concat(s.keywords)), (S = S.concat(s.builtins));&#13;
                    var T = new RegExp("^(([rb]|(br))?('{3}|\"{3}|['\"]))", "i");&#13;
                } else {&#13;
                    (C = C.concat(a.keywords)), (S = S.concat(a.builtins));&#13;
                    var T = new RegExp("^(([rub]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");&#13;
                }&#13;
                var M = t(C),&#13;
                    L = t(S),&#13;
                    E = {&#13;
                        startState: function(e) {&#13;
                            return {&#13;
                                tokenize: u,&#13;
                                scopes: [{ offset: e || 0, type: "py", align: null }],&#13;
                                lastStyle: null,&#13;
                                lastToken: null,&#13;
                                lambda: !1,&#13;
                                dedent: 0&#13;
                            };&#13;
                        },&#13;
                        token: function(e, t) {&#13;
                            var r = t.errorToken;&#13;
                            r &amp;&amp; (t.errorToken = !1);&#13;
                            var n = p(e, t);&#13;
                            t.lastStyle = n;&#13;
                            var i = e.current();&#13;
                            return (&#13;
                                i &amp;&amp; n &amp;&amp; (t.lastToken = i),&#13;
                                e.eol() &amp;&amp; t.lambda &amp;&amp; (t.lambda = !1),&#13;
                                r ? n + " " + g : n&#13;
                            );&#13;
                        },&#13;
                        indent: function(t, n) {&#13;
                            if (t.tokenize != u) return t.tokenize.isString ? e.Pass : 0;&#13;
                            var i = r(t),&#13;
                                o = n &amp;&amp; n.charAt(0) == i.type;&#13;
                            return null != i.align&#13;
                                ? i.align - (o ? 1 : 0)&#13;
                                : o &amp;&amp; t.scopes.length &gt; 1&#13;
                                    ? t.scopes[t.scopes.length - 2].offset&#13;
                                    : i.offset;&#13;
                        },&#13;
                        lineComment: "#",&#13;
                        fold: "indent"&#13;
                    };&#13;
                return E;&#13;
            }),&#13;
            e.defineMIME("text/x-python", "python");&#13;
        var l = function(e) {&#13;
            return e.split(" ");&#13;
        };&#13;
        e.defineMIME("text/x-cython", {&#13;
            name: "python",&#13;
            extra_keywords: l(&#13;
                "by cdef cimport cpdef ctypedef enum exceptextern gil include nogil property publicreadonly struct union DEF IF ELIF ELSE"&#13;
            )&#13;
        });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        function t(e, t) {&#13;
            return e.string.charAt(e.pos + (t || 0));&#13;
        }&#13;
        function r(e, t) {&#13;
            if (t) {&#13;
                var r = e.pos - t;&#13;
                return e.string.substr(r &gt;= 0 ? r : 0, t);&#13;
            }&#13;
            return e.string.substr(0, e.pos - 1);&#13;
        }&#13;
        function n(e, t) {&#13;
            var r = e.string.length,&#13;
                n = r - e.pos + 1;&#13;
            return e.string.substr(e.pos, t &amp;&amp; r &gt; t ? t : n);&#13;
        }&#13;
        function i(e, t) {&#13;
            var r,&#13;
                n = e.pos + t;&#13;
            0 &gt;= n ? (e.pos = 0) : n &gt;= (r = e.string.length - 1) ? (e.pos = r) : (e.pos = n);&#13;
        }&#13;
        e.defineMode("perl", function() {&#13;
            function e(e, t, r, n, i) {&#13;
                return (&#13;
                    (t.chain = null),&#13;
                    (t.style = null),&#13;
                    (t.tail = null),&#13;
                    (t.tokenize = function(e, t) {&#13;
                        for (var o, s = !1, l = 0; (o = e.next()); ) {&#13;
                            if (o === r[l] &amp;&amp; !s)&#13;
                                return (&#13;
                                    void 0 !== r[++l]&#13;
                                        ? ((t.chain = r[l]), (t.style = n), (t.tail = i))&#13;
                                        : i &amp;&amp; e.eatWhile(i),&#13;
                                    (t.tokenize = a),&#13;
                                    n&#13;
                                );&#13;
                            s = !s &amp;&amp; "\\" == o;&#13;
                        }&#13;
                        return n;&#13;
                    }),&#13;
                    t.tokenize(e, t)&#13;
                );&#13;
            }&#13;
            function o(e, t, r) {&#13;
                return (&#13;
                    (t.tokenize = function(e, t) {&#13;
                        return e.string == r &amp;&amp; (t.tokenize = a), e.skipToEnd(), "string";&#13;
                    }),&#13;
                    t.tokenize(e, t)&#13;
                );&#13;
            }&#13;
            function a(a, u) {&#13;
                if (a.eatSpace()) return null;&#13;
                if (u.chain) return e(a, u, u.chain, u.style, u.tail);&#13;
                if (&#13;
                    a.match(/^\-?[\d\.]/, !1) &amp;&amp;&#13;
                    a.match(&#13;
                        /^(\-?(\d*\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F]+|0b[01]+|\d+(e[+-]?\d+)?)/&#13;
                    )&#13;
                )&#13;
                    return "number";&#13;
                if (a.match(/^&lt;&lt;(?=\w)/)) return a.eatWhile(/\w/), o(a, u, a.current().substr(2));&#13;
                if (a.sol() &amp;&amp; a.match(/^\=item(?!\w)/)) return o(a, u, "=cut");&#13;
                var d = a.next();&#13;
                if ('"' == d || "'" == d) {&#13;
                    if (r(a, 3) == "&lt;&lt;" + d) {&#13;
                        var f = a.pos;&#13;
                        a.eatWhile(/\w/);&#13;
                        var m = a.current().substr(1);&#13;
                        if (m &amp;&amp; a.eat(d)) return o(a, u, m);&#13;
                        a.pos = f;&#13;
                    }&#13;
                    return e(a, u, [d], "string");&#13;
                }&#13;
                if ("q" == d) {&#13;
                    var h = t(a, -2);&#13;
                    if (!h || !/\w/.test(h))&#13;
                        if (((h = t(a, 0)), "x" == h)) {&#13;
                            if (((h = t(a, 1)), "(" == h)) return i(a, 2), e(a, u, [")"], l, c);&#13;
                            if ("[" == h) return i(a, 2), e(a, u, ["]"], l, c);&#13;
                            if ("{" == h) return i(a, 2), e(a, u, ["}"], l, c);&#13;
                            if ("&lt;" == h) return i(a, 2), e(a, u, ["&gt;"], l, c);&#13;
                            if (/[\^'"!~\/]/.test(h)) return i(a, 1), e(a, u, [a.eat(h)], l, c);&#13;
                        } else if ("q" == h) {&#13;
                            if (((h = t(a, 1)), "(" == h)) return i(a, 2), e(a, u, [")"], "string");&#13;
                            if ("[" == h) return i(a, 2), e(a, u, ["]"], "string");&#13;
                            if ("{" == h) return i(a, 2), e(a, u, ["}"], "string");&#13;
                            if ("&lt;" == h) return i(a, 2), e(a, u, ["&gt;"], "string");&#13;
                            if (/[\^'"!~\/]/.test(h)) return i(a, 1), e(a, u, [a.eat(h)], "string");&#13;
                        } else if ("w" == h) {&#13;
                            if (((h = t(a, 1)), "(" == h))&#13;
                                return i(a, 2), e(a, u, [")"], "bracket");&#13;
                            if ("[" == h) return i(a, 2), e(a, u, ["]"], "bracket");&#13;
                            if ("{" == h) return i(a, 2), e(a, u, ["}"], "bracket");&#13;
                            if ("&lt;" == h) return i(a, 2), e(a, u, ["&gt;"], "bracket");&#13;
                            if (/[\^'"!~\/]/.test(h))&#13;
                                return i(a, 1), e(a, u, [a.eat(h)], "bracket");&#13;
                        } else if ("r" == h) {&#13;
                            if (((h = t(a, 1)), "(" == h)) return i(a, 2), e(a, u, [")"], l, c);&#13;
                            if ("[" == h) return i(a, 2), e(a, u, ["]"], l, c);&#13;
                            if ("{" == h) return i(a, 2), e(a, u, ["}"], l, c);&#13;
                            if ("&lt;" == h) return i(a, 2), e(a, u, ["&gt;"], l, c);&#13;
                            if (/[\^'"!~\/]/.test(h)) return i(a, 1), e(a, u, [a.eat(h)], l, c);&#13;
                        } else if (/[\^'"!~\/(\[{&lt;]/.test(h)) {&#13;
                            if ("(" == h) return i(a, 1), e(a, u, [")"], "string");&#13;
                            if ("[" == h) return i(a, 1), e(a, u, ["]"], "string");&#13;
                            if ("{" == h) return i(a, 1), e(a, u, ["}"], "string");&#13;
                            if ("&lt;" == h) return i(a, 1), e(a, u, ["&gt;"], "string");&#13;
                            if (/[\^'"!~\/]/.test(h)) return e(a, u, [a.eat(h)], "string");&#13;
                        }&#13;
                }&#13;
                if ("m" == d) {&#13;
                    var h = t(a, -2);&#13;
                    if ((!h || !/\w/.test(h)) &amp;&amp; (h = a.eat(/[(\[{&lt;\^'"!~\/]/))) {&#13;
                        if (/[\^'"!~\/]/.test(h)) return e(a, u, [h], l, c);&#13;
                        if ("(" == h) return e(a, u, [")"], l, c);&#13;
                        if ("[" == h) return e(a, u, ["]"], l, c);&#13;
                        if ("{" == h) return e(a, u, ["}"], l, c);&#13;
                        if ("&lt;" == h) return e(a, u, ["&gt;"], l, c);&#13;
                    }&#13;
                }&#13;
                if ("s" == d) {&#13;
                    var h = /[\/&gt;\]})\w]/.test(t(a, -2));&#13;
                    if (!h &amp;&amp; (h = a.eat(/[(\[{&lt;\^'"!~\/]/)))&#13;
                        return "[" == h&#13;
                            ? e(a, u, ["]", "]"], l, c)&#13;
                            : "{" == h&#13;
                                ? e(a, u, ["}", "}"], l, c)&#13;
                                : "&lt;" == h&#13;
                                    ? e(a, u, ["&gt;", "&gt;"], l, c)&#13;
                                    : "(" == h&#13;
                                        ? e(a, u, [")", ")"], l, c)&#13;
                                        : e(a, u, [h, h], l, c);&#13;
                }&#13;
                if ("y" == d) {&#13;
                    var h = /[\/&gt;\]})\w]/.test(t(a, -2));&#13;
                    if (!h &amp;&amp; (h = a.eat(/[(\[{&lt;\^'"!~\/]/)))&#13;
                        return "[" == h&#13;
                            ? e(a, u, ["]", "]"], l, c)&#13;
                            : "{" == h&#13;
                                ? e(a, u, ["}", "}"], l, c)&#13;
                                : "&lt;" == h&#13;
                                    ? e(a, u, ["&gt;", "&gt;"], l, c)&#13;
                                    : "(" == h&#13;
                                        ? e(a, u, [")", ")"], l, c)&#13;
                                        : e(a, u, [h, h], l, c);&#13;
                }&#13;
                if ("t" == d) {&#13;
                    var h = /[\/&gt;\]})\w]/.test(t(a, -2));&#13;
                    if (!h &amp;&amp; ((h = a.eat("r")), h &amp;&amp; (h = a.eat(/[(\[{&lt;\^'"!~\/]/))))&#13;
                        return "[" == h&#13;
                            ? e(a, u, ["]", "]"], l, c)&#13;
                            : "{" == h&#13;
                                ? e(a, u, ["}", "}"], l, c)&#13;
                                : "&lt;" == h&#13;
                                    ? e(a, u, ["&gt;", "&gt;"], l, c)&#13;
                                    : "(" == h&#13;
                                        ? e(a, u, [")", ")"], l, c)&#13;
                                        : e(a, u, [h, h], l, c);&#13;
                }&#13;
                if ("`" == d) return e(a, u, [d], "variable-2");&#13;
                if ("/" == d) return /~\s*$/.test(r(a)) ? e(a, u, [d], l, c) : "operator";&#13;
                if ("$" == d) {&#13;
                    var f = a.pos;&#13;
                    if (a.eatWhile(/\d/) || (a.eat("{") &amp;&amp; a.eatWhile(/\d/) &amp;&amp; a.eat("}")))&#13;
                        return "variable-2";&#13;
                    a.pos = f;&#13;
                }&#13;
                if (/[$@%]/.test(d)) {&#13;
                    var f = a.pos;&#13;
                    if (&#13;
                        (a.eat("^") &amp;&amp; a.eat(/[A-Z]/)) ||&#13;
                        (!/[@$%&amp;]/.test(t(a, -2)) &amp;&amp; a.eat(/[=|\\\-#?@;:&amp;`~\^!\[\]*'"$+.,\/&lt;&gt;()]/))&#13;
                    ) {&#13;
                        var h = a.current();&#13;
                        if (s[h]) return "variable-2";&#13;
                    }&#13;
                    a.pos = f;&#13;
                }&#13;
                if (&#13;
                    /[$@%&amp;]/.test(d) &amp;&amp;&#13;
                    (a.eatWhile(/[\w$\[\]]/) ||&#13;
                        (a.eat("{") &amp;&amp; a.eatWhile(/[\w$\[\]]/) &amp;&amp; a.eat("}")))&#13;
                ) {&#13;
                    var h = a.current();&#13;
                    return s[h] ? "variable-2" : "variable";&#13;
                }&#13;
                if ("#" == d &amp;&amp; "$" != t(a, -2)) return a.skipToEnd(), "comment";&#13;
                if (/[:+\-\^*$&amp;%@=&lt;&gt;!?|\/~\.]/.test(d)) {&#13;
                    var f = a.pos;&#13;
                    if ((a.eatWhile(/[:+\-\^*$&amp;%@=&lt;&gt;!?|\/~\.]/), s[a.current()])) return "operator";&#13;
                    a.pos = f;&#13;
                }&#13;
                if ("_" == d &amp;&amp; 1 == a.pos) {&#13;
                    if ("_END__" == n(a, 6)) return e(a, u, ["\x00"], "comment");&#13;
                    if ("_DATA__" == n(a, 7)) return e(a, u, ["\x00"], "variable-2");&#13;
                    if ("_C__" == n(a, 7)) return e(a, u, ["\x00"], "string");&#13;
                }&#13;
                if (/\w/.test(d)) {&#13;
                    var f = a.pos;&#13;
                    if ("{" == t(a, -2) &amp;&amp; ("}" == t(a, 0) || (a.eatWhile(/\w/) &amp;&amp; "}" == t(a, 0))))&#13;
                        return "string";&#13;
                    a.pos = f;&#13;
                }&#13;
                if (/[A-Z]/.test(d)) {&#13;
                    var p = t(a, -2),&#13;
                        f = a.pos;&#13;
                    if ((a.eatWhile(/[A-Z_]/), !/[\da-z]/.test(t(a, 0)))) {&#13;
                        var h = s[a.current()];&#13;
                        return h&#13;
                            ? (h[1] &amp;&amp; (h = h[0]),&#13;
                              ":" != p&#13;
                                  ? 1 == h&#13;
                                      ? "keyword"&#13;
                                      : 2 == h&#13;
                                          ? "def"&#13;
                                          : 3 == h&#13;
                                              ? "atom"&#13;
                                              : 4 == h&#13;
                                                  ? "operator"&#13;
                                                  : 5 == h&#13;
                                                      ? "variable-2"&#13;
                                                      : "meta"&#13;
                                  : "meta")&#13;
                            : "meta";&#13;
                    }&#13;
                    a.pos = f;&#13;
                }&#13;
                if (/[a-zA-Z_]/.test(d)) {&#13;
                    var p = t(a, -2);&#13;
                    a.eatWhile(/\w/);&#13;
                    var h = s[a.current()];&#13;
                    return h&#13;
                        ? (h[1] &amp;&amp; (h = h[0]),&#13;
                          ":" != p&#13;
                              ? 1 == h&#13;
                                  ? "keyword"&#13;
                                  : 2 == h&#13;
                                      ? "def"&#13;
                                      : 3 == h&#13;
                                          ? "atom"&#13;
                                          : 4 == h&#13;
                                              ? "operator"&#13;
                                              : 5 == h&#13;
                                                  ? "variable-2"&#13;
                                                  : "meta"&#13;
                              : "meta")&#13;
                        : "meta";&#13;
                }&#13;
                return null;&#13;
            }&#13;
            var s = {&#13;
                    "-&gt;": 4,&#13;
                    "++": 4,&#13;
                    "--": 4,&#13;
                    "**": 4,&#13;
                    "=~": 4,&#13;
                    "!~": 4,&#13;
                    "*": 4,&#13;
                    "/": 4,&#13;
                    "%": 4,&#13;
                    x: 4,&#13;
                    "+": 4,&#13;
                    "-": 4,&#13;
                    ".": 4,&#13;
                    "&lt;&lt;": 4,&#13;
                    "&gt;&gt;": 4,&#13;
                    "&lt;": 4,&#13;
                    "&gt;": 4,&#13;
                    "&lt;=": 4,&#13;
                    "&gt;=": 4,&#13;
                    lt: 4,&#13;
                    gt: 4,&#13;
                    le: 4,&#13;
                    ge: 4,&#13;
                    "==": 4,&#13;
                    "!=": 4,&#13;
                    "&lt;=&gt;": 4,&#13;
                    eq: 4,&#13;
                    ne: 4,&#13;
                    cmp: 4,&#13;
                    "~~": 4,&#13;
                    "&amp;": 4,&#13;
                    "|": 4,&#13;
                    "^": 4,&#13;
                    "&amp;&amp;": 4,&#13;
                    "||": 4,&#13;
                    "//": 4,&#13;
                    "..": 4,&#13;
                    "...": 4,&#13;
                    "?": 4,&#13;
                    ":": 4,&#13;
                    "=": 4,&#13;
                    "+=": 4,&#13;
                    "-=": 4,&#13;
                    "*=": 4,&#13;
                    ",": 4,&#13;
                    "=&gt;": 4,&#13;
                    "::": 4,&#13;
                    not: 4,&#13;
                    and: 4,&#13;
                    or: 4,&#13;
                    xor: 4,&#13;
                    BEGIN: [5, 1],&#13;
                    END: [5, 1],&#13;
                    PRINT: [5, 1],&#13;
                    PRINTF: [5, 1],&#13;
                    GETC: [5, 1],&#13;
                    READ: [5, 1],&#13;
                    READLINE: [5, 1],&#13;
                    DESTROY: [5, 1],&#13;
                    TIE: [5, 1],&#13;
                    TIEHANDLE: [5, 1],&#13;
                    UNTIE: [5, 1],&#13;
                    STDIN: 5,&#13;
                    STDIN_TOP: 5,&#13;
                    STDOUT: 5,&#13;
                    STDOUT_TOP: 5,&#13;
                    STDERR: 5,&#13;
                    STDERR_TOP: 5,&#13;
                    $ARG: 5,&#13;
                    $_: 5,&#13;
                    "@ARG": 5,&#13;
                    "@_": 5,&#13;
                    $LIST_SEPARATOR: 5,&#13;
                    '$"': 5,&#13;
                    $PROCESS_ID: 5,&#13;
                    $PID: 5,&#13;
                    $$: 5,&#13;
                    $REAL_GROUP_ID: 5,&#13;
                    $GID: 5,&#13;
                    "$(": 5,&#13;
                    $EFFECTIVE_GROUP_ID: 5,&#13;
                    $EGID: 5,&#13;
                    "$)": 5,&#13;
                    $PROGRAM_NAME: 5,&#13;
                    $0: 5,&#13;
                    $SUBSCRIPT_SEPARATOR: 5,&#13;
                    $SUBSEP: 5,&#13;
                    "$;": 5,&#13;
                    $REAL_USER_ID: 5,&#13;
                    $UID: 5,&#13;
                    "$&lt;": 5,&#13;
                    $EFFECTIVE_USER_ID: 5,&#13;
                    $EUID: 5,&#13;
                    "$&gt;": 5,&#13;
                    $a: 5,&#13;
                    $b: 5,&#13;
                    $COMPILING: 5,&#13;
                    "$^C": 5,&#13;
                    $DEBUGGING: 5,&#13;
                    "$^D": 5,&#13;
                    "${^ENCODING}": 5,&#13;
                    $ENV: 5,&#13;
                    "%ENV": 5,&#13;
                    $SYSTEM_FD_MAX: 5,&#13;
                    "$^F": 5,&#13;
                    "@F": 5,&#13;
                    "${^GLOBAL_PHASE}": 5,&#13;
                    "$^H": 5,&#13;
                    "%^H": 5,&#13;
                    "@INC": 5,&#13;
                    "%INC": 5,&#13;
                    $INPLACE_EDIT: 5,&#13;
                    "$^I": 5,&#13;
                    "$^M": 5,&#13;
                    $OSNAME: 5,&#13;
                    "$^O": 5,&#13;
                    "${^OPEN}": 5,&#13;
                    $PERLDB: 5,&#13;
                    "$^P": 5,&#13;
                    $SIG: 5,&#13;
                    "%SIG": 5,&#13;
                    $BASETIME: 5,&#13;
                    "$^T": 5,&#13;
                    "${^TAINT}": 5,&#13;
                    "${^UNICODE}": 5,&#13;
                    "${^UTF8CACHE}": 5,&#13;
                    "${^UTF8LOCALE}": 5,&#13;
                    $PERL_VERSION: 5,&#13;
                    "$^V": 5,&#13;
                    "${^WIN32_SLOPPY_STAT}": 5,&#13;
                    $EXECUTABLE_NAME: 5,&#13;
                    "$^X": 5,&#13;
                    $1: 5,&#13;
                    $MATCH: 5,&#13;
                    "$&amp;": 5,&#13;
                    "${^MATCH}": 5,&#13;
                    $PREMATCH: 5,&#13;
                    "$`": 5,&#13;
                    "${^PREMATCH}": 5,&#13;
                    $POSTMATCH: 5,&#13;
                    "$'": 5,&#13;
                    "${^POSTMATCH}": 5,&#13;
                    $LAST_PAREN_MATCH: 5,&#13;
                    "$+": 5,&#13;
                    $LAST_SUBMATCH_RESULT: 5,&#13;
                    "$^N": 5,&#13;
                    "@LAST_MATCH_END": 5,&#13;
                    "@+": 5,&#13;
                    "%LAST_PAREN_MATCH": 5,&#13;
                    "%+": 5,&#13;
                    "@LAST_MATCH_START": 5,&#13;
                    "@-": 5,&#13;
                    "%LAST_MATCH_START": 5,&#13;
                    "%-": 5,&#13;
                    $LAST_REGEXP_CODE_RESULT: 5,&#13;
                    "$^R": 5,&#13;
                    "${^RE_DEBUG_FLAGS}": 5,&#13;
                    "${^RE_TRIE_MAXBUF}": 5,&#13;
                    $ARGV: 5,&#13;
                    "@ARGV": 5,&#13;
                    ARGV: 5,&#13;
                    ARGVOUT: 5,&#13;
                    $OUTPUT_FIELD_SEPARATOR: 5,&#13;
                    $OFS: 5,&#13;
                    "$,": 5,&#13;
                    $INPUT_LINE_NUMBER: 5,&#13;
                    $NR: 5,&#13;
                    "$.": 5,&#13;
                    $INPUT_RECORD_SEPARATOR: 5,&#13;
                    $RS: 5,&#13;
                    "$/": 5,&#13;
                    $OUTPUT_RECORD_SEPARATOR: 5,&#13;
                    $ORS: 5,&#13;
                    "$\\": 5,&#13;
                    $OUTPUT_AUTOFLUSH: 5,&#13;
                    "$|": 5,&#13;
                    $ACCUMULATOR: 5,&#13;
                    "$^A": 5,&#13;
                    $FORMAT_FORMFEED: 5,&#13;
                    "$^L": 5,&#13;
                    $FORMAT_PAGE_NUMBER: 5,&#13;
                    "$%": 5,&#13;
                    $FORMAT_LINES_LEFT: 5,&#13;
                    "$-": 5,&#13;
                    $FORMAT_LINE_BREAK_CHARACTERS: 5,&#13;
                    "$:": 5,&#13;
                    $FORMAT_LINES_PER_PAGE: 5,&#13;
                    "$=": 5,&#13;
                    $FORMAT_TOP_NAME: 5,&#13;
                    "$^": 5,&#13;
                    $FORMAT_NAME: 5,&#13;
                    "$~": 5,&#13;
                    "${^CHILD_ERROR_NATIVE}": 5,&#13;
                    $EXTENDED_OS_ERROR: 5,&#13;
                    "$^E": 5,&#13;
                    $EXCEPTIONS_BEING_CAUGHT: 5,&#13;
                    "$^S": 5,&#13;
                    $WARNING: 5,&#13;
                    "$^W": 5,&#13;
                    "${^WARNING_BITS}": 5,&#13;
                    $OS_ERROR: 5,&#13;
                    $ERRNO: 5,&#13;
                    "$!": 5,&#13;
                    "%OS_ERROR": 5,&#13;
                    "%ERRNO": 5,&#13;
                    "%!": 5,&#13;
                    $CHILD_ERROR: 5,&#13;
                    "$?": 5,&#13;
                    $EVAL_ERROR: 5,&#13;
                    "$@": 5,&#13;
                    $OFMT: 5,&#13;
                    "$#": 5,&#13;
                    "$*": 5,&#13;
                    $ARRAY_BASE: 5,&#13;
                    "$[": 5,&#13;
                    $OLD_PERL_VERSION: 5,&#13;
                    "$]": 5,&#13;
                    if: [1, 1],&#13;
                    elsif: [1, 1],&#13;
                    else: [1, 1],&#13;
                    while: [1, 1],&#13;
                    unless: [1, 1],&#13;
                    for: [1, 1],&#13;
                    foreach: [1, 1],&#13;
                    abs: 1,&#13;
                    accept: 1,&#13;
                    alarm: 1,&#13;
                    atan2: 1,&#13;
                    bind: 1,&#13;
                    binmode: 1,&#13;
                    bless: 1,&#13;
                    bootstrap: 1,&#13;
                    break: 1,&#13;
                    caller: 1,&#13;
                    chdir: 1,&#13;
                    chmod: 1,&#13;
                    chomp: 1,&#13;
                    chop: 1,&#13;
                    chown: 1,&#13;
                    chr: 1,&#13;
                    chroot: 1,&#13;
                    close: 1,&#13;
                    closedir: 1,&#13;
                    connect: 1,&#13;
                    continue: [1, 1],&#13;
                    cos: 1,&#13;
                    crypt: 1,&#13;
                    dbmclose: 1,&#13;
                    dbmopen: 1,&#13;
                    default: 1,&#13;
                    defined: 1,&#13;
                    delete: 1,&#13;
                    die: 1,&#13;
                    do: 1,&#13;
                    dump: 1,&#13;
                    each: 1,&#13;
                    endgrent: 1,&#13;
                    endhostent: 1,&#13;
                    endnetent: 1,&#13;
                    endprotoent: 1,&#13;
                    endpwent: 1,&#13;
                    endservent: 1,&#13;
                    eof: 1,&#13;
                    eval: 1,&#13;
                    exec: 1,&#13;
                    exists: 1,&#13;
                    exit: 1,&#13;
                    exp: 1,&#13;
                    fcntl: 1,&#13;
                    fileno: 1,&#13;
                    flock: 1,&#13;
                    fork: 1,&#13;
                    format: 1,&#13;
                    formline: 1,&#13;
                    getc: 1,&#13;
                    getgrent: 1,&#13;
                    getgrgid: 1,&#13;
                    getgrnam: 1,&#13;
                    gethostbyaddr: 1,&#13;
                    gethostbyname: 1,&#13;
                    gethostent: 1,&#13;
                    getlogin: 1,&#13;
                    getnetbyaddr: 1,&#13;
                    getnetbyname: 1,&#13;
                    getnetent: 1,&#13;
                    getpeername: 1,&#13;
                    getpgrp: 1,&#13;
                    getppid: 1,&#13;
                    getpriority: 1,&#13;
                    getprotobyname: 1,&#13;
                    getprotobynumber: 1,&#13;
                    getprotoent: 1,&#13;
                    getpwent: 1,&#13;
                    getpwnam: 1,&#13;
                    getpwuid: 1,&#13;
                    getservbyname: 1,&#13;
                    getservbyport: 1,&#13;
                    getservent: 1,&#13;
                    getsockname: 1,&#13;
                    getsockopt: 1,&#13;
                    given: 1,&#13;
                    glob: 1,&#13;
                    gmtime: 1,&#13;
                    goto: 1,&#13;
                    grep: 1,&#13;
                    hex: 1,&#13;
                    import: 1,&#13;
                    index: 1,&#13;
                    int: 1,&#13;
                    ioctl: 1,&#13;
                    join: 1,&#13;
                    keys: 1,&#13;
                    kill: 1,&#13;
                    last: 1,&#13;
                    lc: 1,&#13;
                    lcfirst: 1,&#13;
                    length: 1,&#13;
                    link: 1,&#13;
                    listen: 1,&#13;
                    local: 2,&#13;
                    localtime: 1,&#13;
                    lock: 1,&#13;
                    log: 1,&#13;
                    lstat: 1,&#13;
                    m: null,&#13;
                    map: 1,&#13;
                    mkdir: 1,&#13;
                    msgctl: 1,&#13;
                    msgget: 1,&#13;
                    msgrcv: 1,&#13;
                    msgsnd: 1,&#13;
                    my: 2,&#13;
                    new: 1,&#13;
                    next: 1,&#13;
                    no: 1,&#13;
                    oct: 1,&#13;
                    open: 1,&#13;
                    opendir: 1,&#13;
                    ord: 1,&#13;
                    our: 2,&#13;
                    pack: 1,&#13;
                    package: 1,&#13;
                    pipe: 1,&#13;
                    pop: 1,&#13;
                    pos: 1,&#13;
                    print: 1,&#13;
                    printf: 1,&#13;
                    prototype: 1,&#13;
                    push: 1,&#13;
                    q: null,&#13;
                    qq: null,&#13;
                    qr: null,&#13;
                    quotemeta: null,&#13;
                    qw: null,&#13;
                    qx: null,&#13;
                    rand: 1,&#13;
                    read: 1,&#13;
                    readdir: 1,&#13;
                    readline: 1,&#13;
                    readlink: 1,&#13;
                    readpipe: 1,&#13;
                    recv: 1,&#13;
                    redo: 1,&#13;
                    ref: 1,&#13;
                    rename: 1,&#13;
                    require: 1,&#13;
                    reset: 1,&#13;
                    return: 1,&#13;
                    reverse: 1,&#13;
                    rewinddir: 1,&#13;
                    rindex: 1,&#13;
                    rmdir: 1,&#13;
                    s: null,&#13;
                    say: 1,&#13;
                    scalar: 1,&#13;
                    seek: 1,&#13;
                    seekdir: 1,&#13;
                    select: 1,&#13;
                    semctl: 1,&#13;
                    semget: 1,&#13;
                    semop: 1,&#13;
                    send: 1,&#13;
                    setgrent: 1,&#13;
                    sethostent: 1,&#13;
                    setnetent: 1,&#13;
                    setpgrp: 1,&#13;
                    setpriority: 1,&#13;
                    setprotoent: 1,&#13;
                    setpwent: 1,&#13;
                    setservent: 1,&#13;
                    setsockopt: 1,&#13;
                    shift: 1,&#13;
                    shmctl: 1,&#13;
                    shmget: 1,&#13;
                    shmread: 1,&#13;
                    shmwrite: 1,&#13;
                    shutdown: 1,&#13;
                    sin: 1,&#13;
                    sleep: 1,&#13;
                    socket: 1,&#13;
                    socketpair: 1,&#13;
                    sort: 1,&#13;
                    splice: 1,&#13;
                    split: 1,&#13;
                    sprintf: 1,&#13;
                    sqrt: 1,&#13;
                    srand: 1,&#13;
                    stat: 1,&#13;
                    state: 1,&#13;
                    study: 1,&#13;
                    sub: 1,&#13;
                    substr: 1,&#13;
                    symlink: 1,&#13;
                    syscall: 1,&#13;
                    sysopen: 1,&#13;
                    sysread: 1,&#13;
                    sysseek: 1,&#13;
                    system: 1,&#13;
                    syswrite: 1,&#13;
                    tell: 1,&#13;
                    telldir: 1,&#13;
                    tie: 1,&#13;
                    tied: 1,&#13;
                    time: 1,&#13;
                    times: 1,&#13;
                    tr: null,&#13;
                    truncate: 1,&#13;
                    uc: 1,&#13;
                    ucfirst: 1,&#13;
                    umask: 1,&#13;
                    undef: 1,&#13;
                    unlink: 1,&#13;
                    unpack: 1,&#13;
                    unshift: 1,&#13;
                    untie: 1,&#13;
                    use: 1,&#13;
                    utime: 1,&#13;
                    values: 1,&#13;
                    vec: 1,&#13;
                    wait: 1,&#13;
                    waitpid: 1,&#13;
                    wantarray: 1,&#13;
                    warn: 1,&#13;
                    when: 1,&#13;
                    write: 1,&#13;
                    y: null&#13;
                },&#13;
                l = "string-2",&#13;
                c = /[goseximacplud]/;&#13;
            return {&#13;
                startState: function() {&#13;
                    return { tokenize: a, chain: null, style: null, tail: null };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    return (t.tokenize || a)(e, t);&#13;
                },&#13;
                lineComment: "#"&#13;
            };&#13;
        }),&#13;
            e.registerHelper("wordChars", "perl", /[\w$]/),&#13;
            e.defineMIME("text/x-perl", "perl");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("lua", function(e, t) {&#13;
            function r(e) {&#13;
                return new RegExp("^(?:" + e.join("|") + ")", "i");&#13;
            }&#13;
            function n(e) {&#13;
                return new RegExp("^(?:" + e.join("|") + ")$", "i");&#13;
            }&#13;
            function i(e) {&#13;
                for (var t = 0; e.eat("="); ) ++t;&#13;
                return e.eat("["), t;&#13;
            }&#13;
            function o(e, t) {&#13;
                var r = e.next();&#13;
                return "-" == r &amp;&amp; e.eat("-")&#13;
                    ? e.eat("[") &amp;&amp; e.eat("[")&#13;
                        ? (t.cur = a(i(e), "comment"))(e, t)&#13;
                        : (e.skipToEnd(), "comment")&#13;
                    : '"' == r || "'" == r&#13;
                        ? (t.cur = s(r))(e, t)&#13;
                        : "[" == r &amp;&amp; /[\[=]/.test(e.peek())&#13;
                            ? (t.cur = a(i(e), "string"))(e, t)&#13;
                            : /\d/.test(r)&#13;
                                ? (e.eatWhile(/[\w.%]/), "number")&#13;
                                : /[\w_]/.test(r)&#13;
                                    ? (e.eatWhile(/[\w\\\-_.]/), "variable")&#13;
                                    : null;&#13;
            }&#13;
            function a(e, t) {&#13;
                return function(r, n) {&#13;
                    for (var i, a = null; null != (i = r.next()); )&#13;
                        if (null == a) "]" == i &amp;&amp; (a = 0);&#13;
                        else if ("=" == i) ++a;&#13;
                        else {&#13;
                            if ("]" == i &amp;&amp; a == e) {&#13;
                                n.cur = o;&#13;
                                break;&#13;
                            }&#13;
                            a = null;&#13;
                        }&#13;
                    return t;&#13;
                };&#13;
            }&#13;
            function s(e) {&#13;
                return function(t, r) {&#13;
                    for (var n, i = !1; null != (n = t.next()) &amp;&amp; (n != e || i); )&#13;
                        i = !i &amp;&amp; "\\" == n;&#13;
                    return i || (r.cur = o), "string";&#13;
                };&#13;
            }&#13;
            var l = e.indentUnit,&#13;
                c = n(t.specials || []),&#13;
                u = n([&#13;
                    "_G",&#13;
                    "_VERSION",&#13;
                    "assert",&#13;
                    "collectgarbage",&#13;
                    "dofile",&#13;
                    "error",&#13;
                    "getfenv",&#13;
                    "getmetatable",&#13;
                    "ipairs",&#13;
                    "load",&#13;
                    "loadfile",&#13;
                    "loadstring",&#13;
                    "module",&#13;
                    "next",&#13;
                    "pairs",&#13;
                    "pcall",&#13;
                    "print",&#13;
                    "rawequal",&#13;
                    "rawget",&#13;
                    "rawset",&#13;
                    "require",&#13;
                    "select",&#13;
                    "setfenv",&#13;
                    "setmetatable",&#13;
                    "tonumber",&#13;
                    "tostring",&#13;
                    "type",&#13;
                    "unpack",&#13;
                    "xpcall",&#13;
                    "coroutine.create",&#13;
                    "coroutine.resume",&#13;
                    "coroutine.running",&#13;
                    "coroutine.status",&#13;
                    "coroutine.wrap",&#13;
                    "coroutine.yield",&#13;
                    "debug.debug",&#13;
                    "debug.getfenv",&#13;
                    "debug.gethook",&#13;
                    "debug.getinfo",&#13;
                    "debug.getlocal",&#13;
                    "debug.getmetatable",&#13;
                    "debug.getregistry",&#13;
                    "debug.getupvalue",&#13;
                    "debug.setfenv",&#13;
                    "debug.sethook",&#13;
                    "debug.setlocal",&#13;
                    "debug.setmetatable",&#13;
                    "debug.setupvalue",&#13;
                    "debug.traceback",&#13;
                    "close",&#13;
                    "flush",&#13;
                    "lines",&#13;
                    "read",&#13;
                    "seek",&#13;
                    "setvbuf",&#13;
                    "write",&#13;
                    "io.close",&#13;
                    "io.flush",&#13;
                    "io.input",&#13;
                    "io.lines",&#13;
                    "io.open",&#13;
                    "io.output",&#13;
                    "io.popen",&#13;
                    "io.read",&#13;
                    "io.stderr",&#13;
                    "io.stdin",&#13;
                    "io.stdout",&#13;
                    "io.tmpfile",&#13;
                    "io.type",&#13;
                    "io.write",&#13;
                    "math.abs",&#13;
                    "math.acos",&#13;
                    "math.asin",&#13;
                    "math.atan",&#13;
                    "math.atan2",&#13;
                    "math.ceil",&#13;
                    "math.cos",&#13;
                    "math.cosh",&#13;
                    "math.deg",&#13;
                    "math.exp",&#13;
                    "math.floor",&#13;
                    "math.fmod",&#13;
                    "math.frexp",&#13;
                    "math.huge",&#13;
                    "math.ldexp",&#13;
                    "math.log",&#13;
                    "math.log10",&#13;
                    "math.max",&#13;
                    "math.min",&#13;
                    "math.modf",&#13;
                    "math.pi",&#13;
                    "math.pow",&#13;
                    "math.rad",&#13;
                    "math.random",&#13;
                    "math.randomseed",&#13;
                    "math.sin",&#13;
                    "math.sinh",&#13;
                    "math.sqrt",&#13;
                    "math.tan",&#13;
                    "math.tanh",&#13;
                    "os.clock",&#13;
                    "os.date",&#13;
                    "os.difftime",&#13;
                    "os.execute",&#13;
                    "os.exit",&#13;
                    "os.getenv",&#13;
                    "os.remove",&#13;
                    "os.rename",&#13;
                    "os.setlocale",&#13;
                    "os.time",&#13;
                    "os.tmpname",&#13;
                    "package.cpath",&#13;
                    "package.loaded",&#13;
                    "package.loaders",&#13;
                    "package.loadlib",&#13;
                    "package.path",&#13;
                    "package.preload",&#13;
                    "package.seeall",&#13;
                    "string.byte",&#13;
                    "string.char",&#13;
                    "string.dump",&#13;
                    "string.find",&#13;
                    "string.format",&#13;
                    "string.gmatch",&#13;
                    "string.gsub",&#13;
                    "string.len",&#13;
                    "string.lower",&#13;
                    "string.match",&#13;
                    "string.rep",&#13;
                    "string.reverse",&#13;
                    "string.sub",&#13;
                    "string.upper",&#13;
                    "table.concat",&#13;
                    "table.insert",&#13;
                    "table.maxn",&#13;
                    "table.remove",&#13;
                    "table.sort"&#13;
                ]),&#13;
                d = n([&#13;
                    "and",&#13;
                    "break",&#13;
                    "elseif",&#13;
                    "false",&#13;
                    "nil",&#13;
                    "not",&#13;
                    "or",&#13;
                    "return",&#13;
                    "true",&#13;
                    "function",&#13;
                    "end",&#13;
                    "if",&#13;
                    "then",&#13;
                    "else",&#13;
                    "do",&#13;
                    "while",&#13;
                    "repeat",&#13;
                    "until",&#13;
                    "for",&#13;
                    "in",&#13;
                    "local"&#13;
                ]),&#13;
                f = n(["function", "if", "repeat", "do", "\\(", "{"]),&#13;
                m = n(["end", "until", "\\)", "}"]),&#13;
                h = r(["end", "until", "\\)", "}", "else", "elseif"]);&#13;
            return {&#13;
                startState: function(e) {&#13;
                    return { basecol: e || 0, indentDepth: 0, cur: o };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if (e.eatSpace()) return null;&#13;
                    var r = t.cur(e, t),&#13;
                        n = e.current();&#13;
                    return (&#13;
                        "variable" == r &amp;&amp;&#13;
                            (d.test(n)&#13;
                                ? (r = "keyword")&#13;
                                : u.test(n)&#13;
                                    ? (r = "builtin")&#13;
                                    : c.test(n) &amp;&amp; (r = "variable-2")),&#13;
                        "comment" != r &amp;&amp;&#13;
                            "string" != r &amp;&amp;&#13;
                            (f.test(n) ? ++t.indentDepth : m.test(n) &amp;&amp; --t.indentDepth),&#13;
                        r&#13;
                    );&#13;
                },&#13;
                indent: function(e, t) {&#13;
                    var r = h.test(t);&#13;
                    return e.basecol + l * (e.indentDepth - (r ? 1 : 0));&#13;
                },&#13;
                lineComment: "--",&#13;
                blockCommentStart: "--[[",&#13;
                blockCommentEnd: "]]"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-lua", "lua");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("r", function(e) {&#13;
            function t(e) {&#13;
                for (var t = e.split(" "), r = {}, n = 0; n &lt; t.length; ++n) r[t[n]] = !0;&#13;
                return r;&#13;
            }&#13;
            function r(e, t) {&#13;
                a = null;&#13;
                var r = e.next();&#13;
                if ("#" == r) return e.skipToEnd(), "comment";&#13;
                if ("0" == r &amp;&amp; e.eat("x")) return e.eatWhile(/[\da-f]/i), "number";&#13;
                if ("." == r &amp;&amp; e.eat(/\d/)) return e.match(/\d*(?:e[+\-]?\d+)?/), "number";&#13;
                if (/\d/.test(r)) return e.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/), "number";&#13;
                if ("'" == r || '"' == r) return (t.tokenize = n(r)), "string";&#13;
                if ("." == r &amp;&amp; e.match(/.[.\d]+/)) return "keyword";&#13;
                if (/[\w\.]/.test(r) &amp;&amp; "_" != r) {&#13;
                    e.eatWhile(/[\w\.]/);&#13;
                    var i = e.current();&#13;
                    return s.propertyIsEnumerable(i)&#13;
                        ? "atom"&#13;
                        : c.propertyIsEnumerable(i)&#13;
                            ? (u.propertyIsEnumerable(i) &amp;&amp;&#13;
                                  !e.match(/\s*if(\s+|$)/, !1) &amp;&amp;&#13;
                                  (a = "block"),&#13;
                              "keyword")&#13;
                            : l.propertyIsEnumerable(i)&#13;
                                ? "builtin"&#13;
                                : "variable";&#13;
                }&#13;
                return "%" == r&#13;
                    ? (e.skipTo("%") &amp;&amp; e.next(), "variable-2")&#13;
                    : "&lt;" == r &amp;&amp; e.eat("-")&#13;
                        ? "arrow"&#13;
                        : "=" == r &amp;&amp; t.ctx.argList&#13;
                            ? "arg-is"&#13;
                            : d.test(r)&#13;
                                ? "$" == r&#13;
                                    ? "dollar"&#13;
                                    : (e.eatWhile(d), "operator")&#13;
                                : /[\(\){}\[\];]/.test(r)&#13;
                                    ? ((a = r), ";" == r ? "semi" : null)&#13;
                                    : null;&#13;
            }&#13;
            function n(e) {&#13;
                return function(t, n) {&#13;
                    if (t.eat("\\")) {&#13;
                        var i = t.next();&#13;
                        return (&#13;
                            "x" == i&#13;
                                ? t.match(/^[a-f0-9]{2}/i)&#13;
                                : ("u" == i || "U" == i) &amp;&amp; t.eat("{") &amp;&amp; t.skipTo("}")&#13;
                                    ? t.next()&#13;
                                    : "u" == i&#13;
                                        ? t.match(/^[a-f0-9]{4}/i)&#13;
                                        : "U" == i&#13;
                                            ? t.match(/^[a-f0-9]{8}/i)&#13;
                                            : /[0-7]/.test(i) &amp;&amp; t.match(/^[0-7]{1,2}/),&#13;
                            "string-2"&#13;
                        );&#13;
                    }&#13;
                    for (var o; null != (o = t.next()); ) {&#13;
                        if (o == e) {&#13;
                            n.tokenize = r;&#13;
                            break;&#13;
                        }&#13;
                        if ("\\" == o) {&#13;
                            t.backUp(1);&#13;
                            break;&#13;
                        }&#13;
                    }&#13;
                    return "string";&#13;
                };&#13;
            }&#13;
            function i(e, t, r) {&#13;
                e.ctx = { type: t, indent: e.indent, align: null, column: r.column(), prev: e.ctx };&#13;
            }&#13;
            function o(e) {&#13;
                (e.indent = e.ctx.indent), (e.ctx = e.ctx.prev);&#13;
            }&#13;
            var a,&#13;
                s = t("NULL NA Inf NaN NA_integer_ NA_real_ NA_complex_ NA_character_"),&#13;
                l = t("list quote bquote eval return call parse deparse"),&#13;
                c = t("if else repeat while function for in next break"),&#13;
                u = t("if else repeat while function for"),&#13;
                d = /[+\-*\/^&lt;&gt;=!&amp;|~$:]/;&#13;
            return {&#13;
                startState: function() {&#13;
                    return {&#13;
                        tokenize: r,&#13;
                        ctx: { type: "top", indent: -e.indentUnit, align: !1 },&#13;
                        indent: 0,&#13;
                        afterIdent: !1&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if (&#13;
                        (e.sol() &amp;&amp;&#13;
                            (null == t.ctx.align &amp;&amp; (t.ctx.align = !1),&#13;
                            (t.indent = e.indentation())),&#13;
                        e.eatSpace())&#13;
                    )&#13;
                        return null;&#13;
                    var r = t.tokenize(e, t);&#13;
                    "comment" != r &amp;&amp; null == t.ctx.align &amp;&amp; (t.ctx.align = !0);&#13;
                    var n = t.ctx.type;&#13;
                    return (&#13;
                        (";" != a &amp;&amp; "{" != a &amp;&amp; "}" != a) || "block" != n || o(t),&#13;
                        "{" == a&#13;
                            ? i(t, "}", e)&#13;
                            : "(" == a&#13;
                                ? (i(t, ")", e), t.afterIdent &amp;&amp; (t.ctx.argList = !0))&#13;
                                : "[" == a&#13;
                                    ? i(t, "]", e)&#13;
                                    : "block" == a&#13;
                                        ? i(t, "block", e)&#13;
                                        : a == n &amp;&amp; o(t),&#13;
                        (t.afterIdent = "variable" == r || "keyword" == r),&#13;
                        r&#13;
                    );&#13;
                },&#13;
                indent: function(t, n) {&#13;
                    if (t.tokenize != r) return 0;&#13;
                    var i = n &amp;&amp; n.charAt(0),&#13;
                        o = t.ctx,&#13;
                        a = i == o.type;&#13;
                    return "block" == o.type&#13;
                        ? o.indent + ("{" == i ? 0 : e.indentUnit)&#13;
                        : o.align&#13;
                            ? o.column + (a ? 0 : 1)&#13;
                            : o.indent + (a ? 0 : e.indentUnit);&#13;
                },&#13;
                lineComment: "#"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-rsrc", "r");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("ruby", function(e) {&#13;
            function t(e) {&#13;
                for (var t = {}, r = 0, n = e.length; n &gt; r; ++r) t[e[r]] = !0;&#13;
                return t;&#13;
            }&#13;
            function r(e, t, r) {&#13;
                return r.tokenize.push(e), e(t, r);&#13;
            }&#13;
            function n(e, t) {&#13;
                if (((c = null), e.sol() &amp;&amp; e.match("=begin") &amp;&amp; e.eol()))&#13;
                    return t.tokenize.push(l), "comment";&#13;
                if (e.eatSpace()) return null;&#13;
                var n,&#13;
                    i = e.next();&#13;
                if ("`" == i || "'" == i || '"' == i)&#13;
                    return r(a(i, "string", '"' == i || "`" == i), e, t);&#13;
                if ("/" == i) {&#13;
                    var o = e.current().length;&#13;
                    if (e.skipTo("/")) {&#13;
                        var u = e.current().length;&#13;
                        e.backUp(e.current().length - o);&#13;
                        for (var d = 0; e.current().length &lt; u; ) {&#13;
                            var f = e.next();&#13;
                            if (("(" == f ? (d += 1) : ")" == f &amp;&amp; (d -= 1), 0 &gt; d)) break;&#13;
                        }&#13;
                        if ((e.backUp(e.current().length - o), 0 == d))&#13;
                            return r(a(i, "string-2", !0), e, t);&#13;
                    }&#13;
                    return "operator";&#13;
                }&#13;
                if ("%" == i) {&#13;
                    var h = "string",&#13;
                        p = !0;&#13;
                    e.eat("s")&#13;
                        ? (h = "atom")&#13;
                        : e.eat(/[WQ]/)&#13;
                            ? (h = "string")&#13;
                            : e.eat(/[r]/)&#13;
                                ? (h = "string-2")&#13;
                                : e.eat(/[wxq]/) &amp;&amp; ((h = "string"), (p = !1));&#13;
                    var g = e.eat(/[^\w\s=]/);&#13;
                    return g&#13;
                        ? (m.propertyIsEnumerable(g) &amp;&amp; (g = m[g]), r(a(g, h, p, !0), e, t))&#13;
                        : "operator";&#13;
                }&#13;
                if ("#" == i) return e.skipToEnd(), "comment";&#13;
                if ("&lt;" == i &amp;&amp; (n = e.match(/^&lt;-?[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/)))&#13;
                    return r(s(n[1]), e, t);&#13;
                if ("0" == i)&#13;
                    return (&#13;
                        e.eatWhile(e.eat("x") ? /[\da-fA-F]/ : e.eat("b") ? /[01]/ : /[0-7]/),&#13;
                        "number"&#13;
                    );&#13;
                if (/\d/.test(i))&#13;
                    return e.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/), "number";&#13;
                if ("?" == i) {&#13;
                    for (; e.match(/^\\[CM]-/); );&#13;
                    return e.eat("\\") ? e.eatWhile(/\w/) : e.next(), "string";&#13;
                }&#13;
                if (":" == i)&#13;
                    return e.eat("'")&#13;
                        ? r(a("'", "atom", !1), e, t)&#13;
                        : e.eat('"')&#13;
                            ? r(a('"', "atom", !0), e, t)&#13;
                            : e.eat(/[\&lt;\&gt;]/)&#13;
                                ? (e.eat(/[\&lt;\&gt;]/), "atom")&#13;
                                : e.eat(/[\+\-\*\/\&amp;\|\:\!]/)&#13;
                                    ? "atom"&#13;
                                    : e.eat(/[a-zA-Z$@_\xa1-\uffff]/)&#13;
                                        ? (e.eatWhile(/[\w$\xa1-\uffff]/),&#13;
                                          e.eat(/[\?\!\=]/),&#13;
                                          "atom")&#13;
                                        : "operator";&#13;
                if ("@" == i &amp;&amp; e.match(/^@?[a-zA-Z_\xa1-\uffff]/))&#13;
                    return e.eat("@"), e.eatWhile(/[\w\xa1-\uffff]/), "variable-2";&#13;
                if ("$" == i)&#13;
                    return (&#13;
                        e.eat(/[a-zA-Z_]/)&#13;
                            ? e.eatWhile(/[\w]/)&#13;
                            : e.eat(/\d/)&#13;
                                ? e.eat(/\d/)&#13;
                                : e.next(),&#13;
                        "variable-3"&#13;
                    );&#13;
                if (/[a-zA-Z_\xa1-\uffff]/.test(i))&#13;
                    return (&#13;
                        e.eatWhile(/[\w\xa1-\uffff]/),&#13;
                        e.eat(/[\?\!]/),&#13;
                        e.eat(":") ? "atom" : "ident"&#13;
                    );&#13;
                if ("|" != i || (!t.varList &amp;&amp; "{" != t.lastTok &amp;&amp; "do" != t.lastTok)) {&#13;
                    if (/[\(\)\[\]{}\\;]/.test(i)) return (c = i), null;&#13;
                    if ("-" == i &amp;&amp; e.eat("&gt;")) return "arrow";&#13;
                    if (/[=+\-\/*:\.^%&lt;&gt;~|]/.test(i)) {&#13;
                        var v = e.eatWhile(/[=+\-\/*:\.^%&lt;&gt;~|]/);&#13;
                        return "." != i || v || (c = "."), "operator";&#13;
                    }&#13;
                    return null;&#13;
                }&#13;
                return (c = "|"), null;&#13;
            }&#13;
            function i(e) {&#13;
                return (&#13;
                    e || (e = 1),&#13;
                    function(t, r) {&#13;
                        if ("}" == t.peek()) {&#13;
                            if (1 == e)&#13;
                                return r.tokenize.pop(), r.tokenize[r.tokenize.length - 1](t, r);&#13;
                            r.tokenize[r.tokenize.length - 1] = i(e - 1);&#13;
                        } else "{" == t.peek() &amp;&amp; (r.tokenize[r.tokenize.length - 1] = i(e + 1));&#13;
                        return n(t, r);&#13;
                    }&#13;
                );&#13;
            }&#13;
            function o() {&#13;
                var e = !1;&#13;
                return function(t, r) {&#13;
                    return e&#13;
                        ? (r.tokenize.pop(), r.tokenize[r.tokenize.length - 1](t, r))&#13;
                        : ((e = !0), n(t, r));&#13;
                };&#13;
            }&#13;
            function a(e, t, r, n) {&#13;
                return function(a, s) {&#13;
                    var l,&#13;
                        c = !1;&#13;
                    for (&#13;
                        "read-quoted-paused" === s.context.type &amp;&amp;&#13;
                        ((s.context = s.context.prev), a.eat("}"));&#13;
                        null != (l = a.next());&#13;
&#13;
                    ) {&#13;
                        if (l == e &amp;&amp; (n || !c)) {&#13;
                            s.tokenize.pop();&#13;
                            break;&#13;
                        }&#13;
                        if (r &amp;&amp; "#" == l &amp;&amp; !c) {&#13;
                            if (a.eat("{")) {&#13;
                                "}" == e &amp;&amp;&#13;
                                    (s.context = { prev: s.context, type: "read-quoted-paused" }),&#13;
                                    s.tokenize.push(i());&#13;
                                break;&#13;
                            }&#13;
                            if (/[@\$]/.test(a.peek())) {&#13;
                                s.tokenize.push(o());&#13;
                                break;&#13;
                            }&#13;
                        }&#13;
                        c = !c &amp;&amp; "\\" == l;&#13;
                    }&#13;
                    return t;&#13;
                };&#13;
            }&#13;
            function s(e) {&#13;
                return function(t, r) {&#13;
                    return t.match(e) ? r.tokenize.pop() : t.skipToEnd(), "string";&#13;
                };&#13;
            }&#13;
            function l(e, t) {&#13;
                return (&#13;
                    e.sol() &amp;&amp; e.match("=end") &amp;&amp; e.eol() &amp;&amp; t.tokenize.pop(),&#13;
                    e.skipToEnd(),&#13;
                    "comment"&#13;
                );&#13;
            }&#13;
            var c,&#13;
                u = t([&#13;
                    "alias",&#13;
                    "and",&#13;
                    "BEGIN",&#13;
                    "begin",&#13;
                    "break",&#13;
                    "case",&#13;
                    "class",&#13;
                    "def",&#13;
                    "defined?",&#13;
                    "do",&#13;
                    "else",&#13;
                    "elsif",&#13;
                    "END",&#13;
                    "end",&#13;
                    "ensure",&#13;
                    "false",&#13;
                    "for",&#13;
                    "if",&#13;
                    "in",&#13;
                    "module",&#13;
                    "next",&#13;
                    "not",&#13;
                    "or",&#13;
                    "redo",&#13;
                    "rescue",&#13;
                    "retry",&#13;
                    "return",&#13;
                    "self",&#13;
                    "super",&#13;
                    "then",&#13;
                    "true",&#13;
                    "undef",&#13;
                    "unless",&#13;
                    "until",&#13;
                    "when",&#13;
                    "while",&#13;
                    "yield",&#13;
                    "nil",&#13;
                    "raise",&#13;
                    "throw",&#13;
                    "catch",&#13;
                    "fail",&#13;
                    "loop",&#13;
                    "callcc",&#13;
                    "caller",&#13;
                    "lambda",&#13;
                    "proc",&#13;
                    "public",&#13;
                    "protected",&#13;
                    "private",&#13;
                    "require",&#13;
                    "load",&#13;
                    "require_relative",&#13;
                    "extend",&#13;
                    "autoload",&#13;
                    "__END__",&#13;
                    "__FILE__",&#13;
                    "__LINE__",&#13;
                    "__dir__"&#13;
                ]),&#13;
                d = t([&#13;
                    "def",&#13;
                    "class",&#13;
                    "case",&#13;
                    "for",&#13;
                    "while",&#13;
                    "module",&#13;
                    "then",&#13;
                    "catch",&#13;
                    "loop",&#13;
                    "proc",&#13;
                    "begin"&#13;
                ]),&#13;
                f = t(["end", "until"]),&#13;
                m = { "[": "]", "{": "}", "(": ")" };&#13;
            return {&#13;
                startState: function() {&#13;
                    return {&#13;
                        tokenize: [n],&#13;
                        indented: 0,&#13;
                        context: { type: "top", indented: -e.indentUnit },&#13;
                        continuedLine: !1,&#13;
                        lastTok: null,&#13;
                        varList: !1&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    e.sol() &amp;&amp; (t.indented = e.indentation());&#13;
                    var r,&#13;
                        n = t.tokenize[t.tokenize.length - 1](e, t),&#13;
                        i = c;&#13;
                    if ("ident" == n) {&#13;
                        var o = e.current();&#13;
                        (n =&#13;
                            "." == t.lastTok&#13;
                                ? "property"&#13;
                                : u.propertyIsEnumerable(e.current())&#13;
                                    ? "keyword"&#13;
                                    : /^[A-Z]/.test(o)&#13;
                                        ? "tag"&#13;
                                        : "def" == t.lastTok || "class" == t.lastTok || t.varList&#13;
                                            ? "def"&#13;
                                            : "variable"),&#13;
                            "keyword" == n &amp;&amp;&#13;
                                ((i = o),&#13;
                                d.propertyIsEnumerable(o)&#13;
                                    ? (r = "indent")&#13;
                                    : f.propertyIsEnumerable(o)&#13;
                                        ? (r = "dedent")&#13;
                                        : ("if" != o &amp;&amp; "unless" != o) ||&#13;
                                          e.column() != e.indentation()&#13;
                                            ? "do" == o &amp;&amp;&#13;
                                              t.context.indented &lt; t.indented &amp;&amp;&#13;
                                              (r = "indent")&#13;
                                            : (r = "indent"));&#13;
                    }&#13;
                    return (&#13;
                        (c || (n &amp;&amp; "comment" != n)) &amp;&amp; (t.lastTok = i),&#13;
                        "|" == c &amp;&amp; (t.varList = !t.varList),&#13;
                        "indent" == r || /[\(\[\{]/.test(c)&#13;
                            ? (t.context = { prev: t.context, type: c || n, indented: t.indented })&#13;
                            : ("dedent" == r || /[\)\]\}]/.test(c)) &amp;&amp;&#13;
                              t.context.prev &amp;&amp;&#13;
                              (t.context = t.context.prev),&#13;
                        e.eol() &amp;&amp; (t.continuedLine = "\\" == c || "operator" == n),&#13;
                        n&#13;
                    );&#13;
                },&#13;
                indent: function(t, r) {&#13;
                    if (t.tokenize[t.tokenize.length - 1] != n) return 0;&#13;
                    var i = r &amp;&amp; r.charAt(0),&#13;
                        o = t.context,&#13;
                        a =&#13;
                            o.type == m[i] ||&#13;
                            ("keyword" == o.type &amp;&amp;&#13;
                                /^(?:end|until|else|elsif|when|rescue)\b/.test(r));&#13;
                    return (&#13;
                        o.indented + (a ? 0 : e.indentUnit) + (t.continuedLine ? e.indentUnit : 0)&#13;
                    );&#13;
                },&#13;
                electricChars: "}de",&#13;
                lineComment: "#"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-ruby", "ruby");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../python/python"),&#13;
                  require("../stex/stex"),&#13;
                  require("../../addon/mode/overlay")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define([&#13;
                      "../../lib/codemirror",&#13;
                      "../python/python",&#13;
                      "../stex/stex",&#13;
                      "../../addon/mode/overlay"&#13;
                  ], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode(&#13;
            "rst",&#13;
            function(t, r) {&#13;
                var n = /^\*\*[^\*\s](?:[^\*]*[^\*\s])?\*\*/,&#13;
                    i = /^\*[^\*\s](?:[^\*]*[^\*\s])?\*/,&#13;
                    o = /^``[^`\s](?:[^`]*[^`\s])``/,&#13;
                    a = /^(?:[\d]+(?:[\.,]\d+)*)/,&#13;
                    s = /^(?:\s\+[\d]+(?:[\.,]\d+)*)/,&#13;
                    l = /^(?:\s\-[\d]+(?:[\.,]\d+)*)/,&#13;
                    c = "[Hh][Tt][Tt][Pp][Ss]?://",&#13;
                    u = "(?:[\\d\\w.-]+)\\.(?:\\w{2,6})",&#13;
                    d = "(?:/[\\d\\w\\#\\%\\&amp;\\-\\.\\,\\/\\:\\=\\?\\~]+)*",&#13;
                    f = new RegExp("^" + c + u + d),&#13;
                    m = {&#13;
                        token: function(e) {&#13;
                            if (e.match(n) &amp;&amp; e.match(/\W+|$/, !1)) return "strong";&#13;
                            if (e.match(i) &amp;&amp; e.match(/\W+|$/, !1)) return "em";&#13;
                            if (e.match(o) &amp;&amp; e.match(/\W+|$/, !1)) return "string-2";&#13;
                            if (e.match(a)) return "number";&#13;
                            if (e.match(s)) return "positive";&#13;
                            if (e.match(l)) return "negative";&#13;
                            if (e.match(f)) return "link";&#13;
                            for (&#13;
                                ;&#13;
                                !(&#13;
                                    null == e.next() ||&#13;
                                    e.match(n, !1) ||&#13;
                                    e.match(i, !1) ||&#13;
                                    e.match(o, !1) ||&#13;
                                    e.match(a, !1) ||&#13;
                                    e.match(s, !1) ||&#13;
                                    e.match(l, !1) ||&#13;
                                    e.match(f, !1)&#13;
                                );&#13;
&#13;
                            );&#13;
                            return null;&#13;
                        }&#13;
                    },&#13;
                    h = e.getMode(t, r.backdrop || "rst-base");&#13;
                return e.overlayMode(h, m, !0);&#13;
            },&#13;
            "python",&#13;
            "stex"&#13;
        ),&#13;
            e.defineMode(&#13;
                "rst-base",&#13;
                function(t) {&#13;
                    function r(e) {&#13;
                        var t = Array.prototype.slice.call(arguments, 1);&#13;
                        return e.replace(/{(\d+)}/g, function(e, r) {&#13;
                            return "undefined" != typeof t[r] ? t[r] : e;&#13;
                        });&#13;
                    }&#13;
                    function n(t, r) {&#13;
                        var o = null;&#13;
                        if (t.sol() &amp;&amp; t.match(X, !1)) u(r, l, { mode: m, local: e.startState(m) });&#13;
                        else if (t.sol() &amp;&amp; t.match(T)) u(r, i), (o = "meta");&#13;
                        else if (t.sol() &amp;&amp; t.match(S)) u(r, n), (o = "header");&#13;
                        else if (f(r) == $ || t.match($, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, n, c($, 1)), t.match(/^:/), (o = "meta");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, n, c($, 2)),&#13;
                                        t.match(y),&#13;
                                        (o = "keyword"),&#13;
                                        t.current().match(/^(?:math|latex)/) &amp;&amp; (r.tmp_stex = !0);&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, n, c($, 3)), t.match(/^:`/), (o = "meta");&#13;
                                    break;&#13;
                                case 3:&#13;
                                    if (&#13;
                                        (r.tmp_stex &amp;&amp;&#13;
                                            ((r.tmp_stex = void 0),&#13;
                                            (r.tmp = { mode: h, local: e.startState(h) })),&#13;
                                        r.tmp)&#13;
                                    ) {&#13;
                                        if ("`" == t.peek()) {&#13;
                                            u(r, n, c($, 4)), (r.tmp = void 0);&#13;
                                            break;&#13;
                                        }&#13;
                                        o = r.tmp.mode.token(t, r.tmp.local);&#13;
                                        break;&#13;
                                    }&#13;
                                    u(r, n, c($, 4)), t.match(C), (o = "string");&#13;
                                    break;&#13;
                                case 4:&#13;
                                    u(r, n, c($, 5)), t.match(/^`/), (o = "meta");&#13;
                                    break;&#13;
                                case 5:&#13;
                                    u(r, n, c($, 6)), t.match(v);&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (f(r) == O || t.match(O, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, n, c(O, 1)), t.match(/^`/), (o = "meta");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, n, c(O, 2)), t.match(C), (o = "string");&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, n, c(O, 3)), t.match(/^`:/), (o = "meta");&#13;
                                    break;&#13;
                                case 3:&#13;
                                    u(r, n, c(O, 4)), t.match(y), (o = "keyword");&#13;
                                    break;&#13;
                                case 4:&#13;
                                    u(r, n, c(O, 5)), t.match(/^:/), (o = "meta");&#13;
                                    break;&#13;
                                case 5:&#13;
                                    u(r, n, c(O, 6)), t.match(v);&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (f(r) == R || t.match(R, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, n, c(R, 1)), t.match(/^:/), (o = "meta");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, n, c(R, 2)), t.match(y), (o = "keyword");&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, n, c(R, 3)), t.match(/^:/), (o = "meta");&#13;
                                    break;&#13;
                                case 3:&#13;
                                    u(r, n, c(R, 4)), t.match(v);&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (f(r) == z || t.match(z, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, n, c(z, 1)), t.match(N), (o = "variable-2");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, n, c(z, 2)), t.match(/^_?_?/) &amp;&amp; (o = "link");&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (t.match(I)) u(r, n), (o = "quote");&#13;
                        else if (t.match(P)) u(r, n), (o = "quote");&#13;
                        else if (t.match(D))&#13;
                            u(r, n), (!t.peek() || t.peek().match(/^\W$/)) &amp;&amp; (o = "link");&#13;
                        else if (f(r) == A || t.match(A, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    !t.peek() || t.peek().match(/^\W$/)&#13;
                                        ? u(r, n, c(A, 1))&#13;
                                        : t.match(A);&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, n, c(A, 2)), t.match(/^`/), (o = "link");&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, n, c(A, 3)), t.match(C);&#13;
                                    break;&#13;
                                case 3:&#13;
                                    u(r, n, c(A, 4)), t.match(/^`_/), (o = "link");&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else t.match(G) ? u(r, a) : t.next() &amp;&amp; u(r, n);&#13;
                        return o;&#13;
                    }&#13;
                    function i(t, r) {&#13;
                        var a = null;&#13;
                        if (f(r) == E || t.match(E, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, i, c(E, 1)), t.match(N), (a = "variable-2");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, i, c(E, 2)), t.match(B);&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, i, c(E, 3)), t.match(U), (a = "keyword");&#13;
                                    break;&#13;
                                case 3:&#13;
                                    u(r, i, c(E, 4)), t.match(W), (a = "meta");&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (f(r) == L || t.match(L, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, i, c(L, 1)),&#13;
                                        t.match(F),&#13;
                                        (a = "keyword"),&#13;
                                        t.current().match(/^(?:math|latex)/)&#13;
                                            ? (r.tmp_stex = !0)&#13;
                                            : t.current().match(/^python/) &amp;&amp; (r.tmp_py = !0);&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, i, c(L, 2)),&#13;
                                        t.match(H),&#13;
                                        (a = "meta"),&#13;
                                        (t.match(/^latex\s*$/) || r.tmp_stex) &amp;&amp;&#13;
                                            ((r.tmp_stex = void 0),&#13;
                                            u(r, l, { mode: h, local: e.startState(h) }));&#13;
                                    break;&#13;
                                case 2:&#13;
                                    u(r, i, c(L, 3)),&#13;
                                        (t.match(/^python\s*$/) || r.tmp_py) &amp;&amp;&#13;
                                            ((r.tmp_py = void 0),&#13;
                                            u(r, l, { mode: m, local: e.startState(m) }));&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else if (f(r) == M || t.match(M, !1))&#13;
                            switch (d(r)) {&#13;
                                case 0:&#13;
                                    u(r, i, c(M, 1)), t.match(V), t.match(K), (a = "link");&#13;
                                    break;&#13;
                                case 1:&#13;
                                    u(r, i, c(M, 2)), t.match(Z), (a = "meta");&#13;
                                    break;&#13;
                                default:&#13;
                                    u(r, n);&#13;
                            }&#13;
                        else&#13;
                            t.match(q)&#13;
                                ? (u(r, n), (a = "quote"))&#13;
                                : t.match(j)&#13;
                                    ? (u(r, n), (a = "quote"))&#13;
                                    : (t.eatSpace(),&#13;
                                      t.eol()&#13;
                                          ? u(r, n)&#13;
                                          : (t.skipToEnd(), u(r, o), (a = "comment")));&#13;
                        return a;&#13;
                    }&#13;
                    function o(e, t) {&#13;
                        return s(e, t, "comment");&#13;
                    }&#13;
                    function a(e, t) {&#13;
                        return s(e, t, "meta");&#13;
                    }&#13;
                    function s(e, t, r) {&#13;
                        return e.eol() || e.eatSpace() ? (e.skipToEnd(), r) : (u(t, n), null);&#13;
                    }&#13;
                    function l(e, t) {&#13;
                        return t.ctx.mode &amp;&amp; t.ctx.local&#13;
                            ? e.sol()&#13;
                                ? (e.eatSpace() || u(t, n), null)&#13;
                                : t.ctx.mode.token(e, t.ctx.local)&#13;
                            : (u(t, n), null);&#13;
                    }&#13;
                    function c(e, t, r, n) {&#13;
                        return { phase: e, stage: t, mode: r, local: n };&#13;
                    }&#13;
                    function u(e, t, r) {&#13;
                        (e.tok = t), (e.ctx = r || {});&#13;
                    }&#13;
                    function d(e) {&#13;
                        return e.ctx.stage || 0;&#13;
                    }&#13;
                    function f(e) {&#13;
                        return e.ctx.phase;&#13;
                    }&#13;
                    var m = e.getMode(t, "python"),&#13;
                        h = e.getMode(t, "stex"),&#13;
                        p = "\\s+",&#13;
                        g = "(?:\\s*|\\W|$)",&#13;
                        v = new RegExp(r("^{0}", g)),&#13;
                        b = "(?:[^\\W\\d_](?:[\\w!\"#$%&amp;'()\\*\\+,\\-\\./:;&lt;=&gt;\\?]*[^\\W_])?)",&#13;
                        y = new RegExp(r("^{0}", b)),&#13;
                        x = "(?:[^\\W\\d_](?:[\\w\\s!\"#$%&amp;'()\\*\\+,\\-\\./:;&lt;=&gt;\\?]*[^\\W_])?)",&#13;
                        k = r("(?:{0}|`{1}`)", b, x),&#13;
                        w = "(?:[^\\s\\|](?:[^\\|]*[^\\s\\|])?)",&#13;
                        _ = "(?:[^\\`]+)",&#13;
                        C = new RegExp(r("^{0}", _)),&#13;
                        S = new RegExp("^([!'#$%&amp;\"()*+,-./:;&lt;=&gt;?@\\[\\\\\\]^_`{|}~])\\1{3,}\\s*$"),&#13;
                        T = new RegExp(r("^\\.\\.{0}", p)),&#13;
                        M = new RegExp(r("^_{0}:{1}|^__:{1}", k, g)),&#13;
                        L = new RegExp(r("^{0}::{1}", k, g)),&#13;
                        E = new RegExp(r("^\\|{0}\\|{1}{2}::{3}", w, p, k, g)),&#13;
                        q = new RegExp(r("^\\[(?:\\d+|#{0}?|\\*)]{1}", k, g)),&#13;
                        j = new RegExp(r("^\\[{0}\\]{1}", k, g)),&#13;
                        z = new RegExp(r("^\\|{0}\\|", w)),&#13;
                        I = new RegExp(r("^\\[(?:\\d+|#{0}?|\\*)]_", k)),&#13;
                        P = new RegExp(r("^\\[{0}\\]_", k)),&#13;
                        D = new RegExp(r("^{0}__?", k)),&#13;
                        A = new RegExp(r("^`{0}`_", _)),&#13;
                        $ = new RegExp(r("^:{0}:`{1}`{2}", b, _, g)),&#13;
                        O = new RegExp(r("^`{1}`:{0}:{2}", b, _, g)),&#13;
                        R = new RegExp(r("^:{0}:{1}", b, g)),&#13;
                        F = new RegExp(r("^{0}", k)),&#13;
                        H = new RegExp(r("^::{0}", g)),&#13;
                        N = new RegExp(r("^\\|{0}\\|", w)),&#13;
                        B = new RegExp(r("^{0}", p)),&#13;
                        U = new RegExp(r("^{0}", k)),&#13;
                        W = new RegExp(r("^::{0}", g)),&#13;
                        V = new RegExp("^_"),&#13;
                        K = new RegExp(r("^{0}|_", k)),&#13;
                        Z = new RegExp(r("^:{0}", g)),&#13;
                        G = new RegExp("^::\\s*$"),&#13;
                        X = new RegExp("^\\s+(?:&gt;&gt;&gt;|In \\[\\d+\\]:)\\s");&#13;
                    return {&#13;
                        startState: function() {&#13;
                            return { tok: n, ctx: c(void 0, 0) };&#13;
                        },&#13;
                        copyState: function(t) {&#13;
                            var r = t.ctx,&#13;
                                n = t.tmp;&#13;
                            return (&#13;
                                r.local &amp;&amp;&#13;
                                    (r = { mode: r.mode, local: e.copyState(r.mode, r.local) }),&#13;
                                n &amp;&amp; (n = { mode: n.mode, local: e.copyState(n.mode, n.local) }),&#13;
                                { tok: t.tok, ctx: r, tmp: n }&#13;
                            );&#13;
                        },&#13;
                        innerMode: function(e) {&#13;
                            return e.tmp&#13;
                                ? { state: e.tmp.local, mode: e.tmp.mode }&#13;
                                : e.ctx.mode&#13;
                                    ? { state: e.ctx.local, mode: e.ctx.mode }&#13;
                                    : null;&#13;
                        },&#13;
                        token: function(e, t) {&#13;
                            return t.tok(e, t);&#13;
                        }&#13;
                    };&#13;
                },&#13;
                "python",&#13;
                "stex"&#13;
            ),&#13;
            e.defineMIME("text/x-rst", "rst");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../htmlmixed/htmlmixed"),&#13;
                  require("../smarty/smarty")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror", "../htmlmixed/htmlmixed", "../smarty/smarty"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode(&#13;
            "smartymixed",&#13;
            function(t) {&#13;
                function r(e) {&#13;
                    return e.replace(/[^\s\w]/g, "\\$&amp;");&#13;
                }&#13;
                var n = e.getMode(t, "htmlmixed"),&#13;
                    i = e.getMode(t, "smarty"),&#13;
                    o = { rightDelimiter: "}", leftDelimiter: "{" };&#13;
                t.hasOwnProperty("leftDelimiter") &amp;&amp; (o.leftDelimiter = t.leftDelimiter),&#13;
                    t.hasOwnProperty("rightDelimiter") &amp;&amp; (o.rightDelimiter = t.rightDelimiter);&#13;
                var a = r(o.leftDelimiter),&#13;
                    s = r(o.rightDelimiter),&#13;
                    l = {&#13;
                        smartyComment: new RegExp("^" + s + "\\*"),&#13;
                        literalOpen: new RegExp(a + "literal" + s),&#13;
                        literalClose: new RegExp(a + "/literal" + s),&#13;
                        hasLeftDelimeter: new RegExp(".*" + a),&#13;
                        htmlHasLeftDelimeter: new RegExp("[^&lt;&gt;]*" + a)&#13;
                    },&#13;
                    c = {&#13;
                        chain: function(e, t, r) {&#13;
                            return (t.tokenize = r), r(e, t);&#13;
                        },&#13;
                        cleanChain: function(e, t, r) {&#13;
                            return (&#13;
                                (t.tokenize = null),&#13;
                                (t.localState = null),&#13;
                                (t.localMode = null),&#13;
                                "string" == typeof r ? (r ? r : null) : r(e, t)&#13;
                            );&#13;
                        },&#13;
                        maybeBackup: function(e, t, r) {&#13;
                            var n,&#13;
                                i = e.current(),&#13;
                                o = i.search(t);&#13;
                            return (&#13;
                                o &gt; -1&#13;
                                    ? e.backUp(i.length - o)&#13;
                                    : (n = i.match(/&lt;\/?$/)) &amp;&amp;&#13;
                                      (e.backUp(i.length), e.match(t, !1) || e.match(i[0])),&#13;
                                r&#13;
                            );&#13;
                        }&#13;
                    },&#13;
                    u = {&#13;
                        html: function(e, t) {&#13;
                            var r =&#13;
                                t.htmlMixedState.htmlState.context &amp;&amp;&#13;
                                t.htmlMixedState.htmlState.context.tagName&#13;
                                    ? t.htmlMixedState.htmlState.context.tagName&#13;
                                    : null;&#13;
                            return !t.inLiteral &amp;&amp; e.match(l.htmlHasLeftDelimeter, !1) &amp;&amp; null === r&#13;
                                ? ((t.tokenize = u.smarty),&#13;
                                  (t.localMode = i),&#13;
                                  (t.localState = i.startState(n.indent(t.htmlMixedState, ""))),&#13;
                                  c.maybeBackup(e, o.leftDelimiter, i.token(e, t.localState)))&#13;
                                : !t.inLiteral &amp;&amp; e.match(o.leftDelimiter, !1)&#13;
                                    ? ((t.tokenize = u.smarty),&#13;
                                      (t.localMode = i),&#13;
                                      (t.localState = i.startState(n.indent(t.htmlMixedState, ""))),&#13;
                                      c.maybeBackup(e, o.leftDelimiter, i.token(e, t.localState)))&#13;
                                    : n.token(e, t.htmlMixedState);&#13;
                        },&#13;
                        smarty: function(e, t) {&#13;
                            if (e.match(o.leftDelimiter, !1)) {&#13;
                                if (e.match(l.smartyComment, !1))&#13;
                                    return c.chain(&#13;
                                        e,&#13;
                                        t,&#13;
                                        u.inBlock("comment", "*" + o.rightDelimiter)&#13;
                                    );&#13;
                            } else if (e.match(o.rightDelimiter, !1))&#13;
                                return (&#13;
                                    e.eat(o.rightDelimiter),&#13;
                                    (t.tokenize = u.html),&#13;
                                    (t.localMode = n),&#13;
                                    (t.localState = t.htmlMixedState),&#13;
                                    "tag"&#13;
                                );&#13;
                            return c.maybeBackup(e, o.rightDelimiter, i.token(e, t.localState));&#13;
                        },&#13;
                        inBlock: function(e, t) {&#13;
                            return function(r, n) {&#13;
                                for (; !r.eol(); ) {&#13;
                                    if (r.match(t)) {&#13;
                                        c.cleanChain(r, n, "");&#13;
                                        break;&#13;
                                    }&#13;
                                    r.next();&#13;
                                }&#13;
                                return e;&#13;
                            };&#13;
                        }&#13;
                    };&#13;
                return {&#13;
                    startState: function() {&#13;
                        var e = n.startState();&#13;
                        return {&#13;
                            token: u.html,&#13;
                            localMode: null,&#13;
                            localState: null,&#13;
                            htmlMixedState: e,&#13;
                            tokenize: null,&#13;
                            inLiteral: !1&#13;
                        };&#13;
                    },&#13;
                    copyState: function(t) {&#13;
                        var r = null,&#13;
                            o = t.tokenize || t.token;&#13;
                        return (&#13;
                            t.localState &amp;&amp; (r = e.copyState(o != u.html ? i : n, t.localState)),&#13;
                            {&#13;
                                token: t.token,&#13;
                                tokenize: t.tokenize,&#13;
                                localMode: t.localMode,&#13;
                                localState: r,&#13;
                                htmlMixedState: e.copyState(n, t.htmlMixedState),&#13;
                                inLiteral: t.inLiteral&#13;
                            }&#13;
                        );&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        if (e.match(o.leftDelimiter, !1)) {&#13;
                            if (!t.inLiteral &amp;&amp; e.match(l.literalOpen, !0))&#13;
                                return (t.inLiteral = !0), "keyword";&#13;
                            if (t.inLiteral &amp;&amp; e.match(l.literalClose, !0))&#13;
                                return (t.inLiteral = !1), "keyword";&#13;
                        }&#13;
                        t.inLiteral &amp;&amp;&#13;
                            t.localState != t.htmlMixedState &amp;&amp;&#13;
                            ((t.tokenize = u.html),&#13;
                            (t.localMode = n),&#13;
                            (t.localState = t.htmlMixedState));&#13;
                        var r = (t.tokenize || t.token)(e, t);&#13;
                        return r;&#13;
                    },&#13;
                    indent: function(t, r) {&#13;
                        return t.localMode == i ||&#13;
                            (t.inLiteral &amp;&amp; !t.localMode) ||&#13;
                            l.hasLeftDelimeter.test(r)&#13;
                            ? e.Pass&#13;
                            : n.indent(t.htmlMixedState, r);&#13;
                    },&#13;
                    innerMode: function(e) {&#13;
                        return { state: e.localState || e.htmlMixedState, mode: e.localMode || n };&#13;
                    }&#13;
                };&#13;
            },&#13;
            "htmlmixed",&#13;
            "smarty"&#13;
        ),&#13;
            e.defineMIME("text/x-smarty", "smartymixed");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("vb", function(e, t) {&#13;
            function r(e) {&#13;
                return new RegExp("^((" + e.join(")|(") + "))\\b", "i");&#13;
            }&#13;
            function n(e, t) {&#13;
                t.currentIndent++;&#13;
            }&#13;
            function i(e, t) {&#13;
                t.currentIndent--;&#13;
            }&#13;
            function o(e, t) {&#13;
                if (e.eatSpace()) return null;&#13;
                var r = e.peek();&#13;
                if ("'" === r) return e.skipToEnd(), "comment";&#13;
                if (e.match(/^((&amp;H)|(&amp;O))?[0-9\.a-f]/i, !1)) {&#13;
                    var o = !1;&#13;
                    if (&#13;
                        (e.match(/^\d*\.\d+F?/i)&#13;
                            ? (o = !0)&#13;
                            : e.match(/^\d+\.\d*F?/)&#13;
                                ? (o = !0)&#13;
                                : e.match(/^\.\d+F?/) &amp;&amp; (o = !0),&#13;
                        o)&#13;
                    )&#13;
                        return e.eat(/J/i), "number";&#13;
                    var s = !1;&#13;
                    if (&#13;
                        (e.match(/^&amp;H[0-9a-f]+/i)&#13;
                            ? (s = !0)&#13;
                            : e.match(/^&amp;O[0-7]+/i)&#13;
                                ? (s = !0)&#13;
                                : e.match(/^[1-9]\d*F?/)&#13;
                                    ? (e.eat(/J/i), (s = !0))&#13;
                                    : e.match(/^0(?![\dx])/i) &amp;&amp; (s = !0),&#13;
                        s)&#13;
                    )&#13;
                        return e.eat(/L/i), "number";&#13;
                }&#13;
                return e.match(_)&#13;
                    ? ((t.tokenize = a(e.current())), t.tokenize(e, t))&#13;
                    : e.match(m) || e.match(f)&#13;
                        ? null&#13;
                        : e.match(d) || e.match(c) || e.match(b)&#13;
                            ? "operator"&#13;
                            : e.match(u)&#13;
                                ? null&#13;
                                : e.match(L)&#13;
                                    ? (n(e, t), (t.doInCurrentLine = !0), "keyword")&#13;
                                    : e.match(C)&#13;
                                        ? (t.doInCurrentLine ? (t.doInCurrentLine = !1) : n(e, t),&#13;
                                          "keyword")&#13;
                                        : e.match(S)&#13;
                                            ? "keyword"&#13;
                                            : e.match(M)&#13;
                                                ? (i(e, t), i(e, t), "keyword")&#13;
                                                : e.match(T)&#13;
                                                    ? (i(e, t), "keyword")&#13;
                                                    : e.match(w)&#13;
                                                        ? "keyword"&#13;
                                                        : e.match(k)&#13;
                                                            ? "keyword"&#13;
                                                            : e.match(h)&#13;
                                                                ? "variable"&#13;
                                                                : (e.next(), l);&#13;
            }&#13;
            function a(e) {&#13;
                var r = 1 == e.length,&#13;
                    n = "string";&#13;
                return function(i, a) {&#13;
                    for (; !i.eol(); ) {&#13;
                        if ((i.eatWhile(/[^'"]/), i.match(e))) return (a.tokenize = o), n;&#13;
                        i.eat(/['"]/);&#13;
                    }&#13;
                    if (r) {&#13;
                        if (t.singleLineStringErrors) return l;&#13;
                        a.tokenize = o;&#13;
                    }&#13;
                    return n;&#13;
                };&#13;
            }&#13;
            function s(e, t) {&#13;
                var r = t.tokenize(e, t),&#13;
                    o = e.current();&#13;
                if ("." === o)&#13;
                    return (&#13;
                        (r = t.tokenize(e, t)), (o = e.current()), "variable" === r ? "variable" : l&#13;
                    );&#13;
                var a = "[({".indexOf(o);&#13;
                return (&#13;
                    -1 !== a &amp;&amp; n(e, t),&#13;
                    "dedent" === E &amp;&amp; i(e, t)&#13;
                        ? l&#13;
                        : ((a = "])}".indexOf(o)), -1 !== a &amp;&amp; i(e, t) ? l : r)&#13;
                );&#13;
            }&#13;
            var l = "error",&#13;
                c = new RegExp("^[\\+\\-\\*/%&amp;\\\\|\\^~&lt;&gt;!]"),&#13;
                u = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]"),&#13;
                d = new RegExp("^((==)|(&lt;&gt;)|(&lt;=)|(&gt;=)|(&lt;&gt;)|(&lt;&lt;)|(&gt;&gt;)|(//)|(\\*\\*))"),&#13;
                f = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&amp;=)|(\\|=)|(\\^=))"),&#13;
                m = new RegExp("^((//=)|(&gt;&gt;=)|(&lt;&lt;=)|(\\*\\*=))"),&#13;
                h = new RegExp("^[_A-Za-z][_A-Za-z0-9]*"),&#13;
                p = [&#13;
                    "class",&#13;
                    "module",&#13;
                    "sub",&#13;
                    "enum",&#13;
                    "select",&#13;
                    "while",&#13;
                    "if",&#13;
                    "function",&#13;
                    "get",&#13;
                    "set",&#13;
                    "property",&#13;
                    "try"&#13;
                ],&#13;
                g = ["else", "elseif", "case", "catch"],&#13;
                v = ["next", "loop"],&#13;
                b = r(["and", "or", "not", "xor", "in"]),&#13;
                y = [&#13;
                    "as",&#13;
                    "dim",&#13;
                    "break",&#13;
                    "continue",&#13;
                    "optional",&#13;
                    "then",&#13;
                    "until",&#13;
                    "goto",&#13;
                    "byval",&#13;
                    "byref",&#13;
                    "new",&#13;
                    "handles",&#13;
                    "property",&#13;
                    "return",&#13;
                    "const",&#13;
                    "private",&#13;
                    "protected",&#13;
                    "friend",&#13;
                    "public",&#13;
                    "shared",&#13;
                    "static",&#13;
                    "true",&#13;
                    "false"&#13;
                ],&#13;
                x = [&#13;
                    "integer",&#13;
                    "string",&#13;
                    "double",&#13;
                    "decimal",&#13;
                    "boolean",&#13;
                    "short",&#13;
                    "char",&#13;
                    "float",&#13;
                    "single"&#13;
                ],&#13;
                k = r(y),&#13;
                w = r(x),&#13;
                _ = '"',&#13;
                C = r(p),&#13;
                S = r(g),&#13;
                T = r(v),&#13;
                M = r(["end"]),&#13;
                L = r(["do"]),&#13;
                E = null,&#13;
                q = {&#13;
                    electricChars: "dDpPtTfFeE ",&#13;
                    startState: function() {&#13;
                        return {&#13;
                            tokenize: o,&#13;
                            lastToken: null,&#13;
                            currentIndent: 0,&#13;
                            nextLineIndent: 0,&#13;
                            doInCurrentLine: !1&#13;
                        };&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        e.sol() &amp;&amp;&#13;
                            ((t.currentIndent += t.nextLineIndent),&#13;
                            (t.nextLineIndent = 0),&#13;
                            (t.doInCurrentLine = 0));&#13;
                        var r = s(e, t);&#13;
                        return (t.lastToken = { style: r, content: e.current() }), r;&#13;
                    },&#13;
                    indent: function(t, r) {&#13;
                        var n = r.replace(/^\s+|\s+$/g, "");&#13;
                        return n.match(T) || n.match(M) || n.match(S)&#13;
                            ? e.indentUnit * (t.currentIndent - 1)&#13;
                            : t.currentIndent &lt; 0&#13;
                                ? 0&#13;
                                : t.currentIndent * e.indentUnit;&#13;
                    }&#13;
                };&#13;
            return q;&#13;
        }),&#13;
            e.defineMIME("text/x-vb", "vb");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("vbscript", function(e, t) {&#13;
            function r(e) {&#13;
                return new RegExp("^((" + e.join(")|(") + "))\\b", "i");&#13;
            }&#13;
            function n(e, t) {&#13;
                t.currentIndent++;&#13;
            }&#13;
            function i(e, t) {&#13;
                t.currentIndent--;&#13;
            }&#13;
            function o(e, t) {&#13;
                if (e.eatSpace()) return "space";&#13;
                var r = e.peek();&#13;
                if ("'" === r) return e.skipToEnd(), "comment";&#13;
                if (e.match(H)) return e.skipToEnd(), "comment";&#13;
                if (&#13;
                    e.match(/^((&amp;H)|(&amp;O))?[0-9\.]/i, !1) &amp;&amp;&#13;
                    !e.match(/^((&amp;H)|(&amp;O))?[0-9\.]+[a-z_]/i, !1)&#13;
                ) {&#13;
                    var o = !1;&#13;
                    if (&#13;
                        (e.match(/^\d*\.\d+/i)&#13;
                            ? (o = !0)&#13;
                            : e.match(/^\d+\.\d*/)&#13;
                                ? (o = !0)&#13;
                                : e.match(/^\.\d+/) &amp;&amp; (o = !0),&#13;
                        o)&#13;
                    )&#13;
                        return e.eat(/J/i), "number";&#13;
                    var s = !1;&#13;
                    if (&#13;
                        (e.match(/^&amp;H[0-9a-f]+/i)&#13;
                            ? (s = !0)&#13;
                            : e.match(/^&amp;O[0-7]+/i)&#13;
                                ? (s = !0)&#13;
                                : e.match(/^[1-9]\d*F?/)&#13;
                                    ? (e.eat(/J/i), (s = !0))&#13;
                                    : e.match(/^0(?![\dx])/i) &amp;&amp; (s = !0),&#13;
                        s)&#13;
                    )&#13;
                        return e.eat(/L/i), "number";&#13;
                }&#13;
                return e.match(P)&#13;
                    ? ((t.tokenize = a(e.current())), t.tokenize(e, t))&#13;
                    : e.match(u) || e.match(c) || e.match(v)&#13;
                        ? "operator"&#13;
                        : e.match(d)&#13;
                            ? null&#13;
                            : e.match(f)&#13;
                                ? "bracket"&#13;
                                : e.match(F)&#13;
                                    ? ((t.doInCurrentLine = !0), "keyword")&#13;
                                    : e.match(R)&#13;
                                        ? (n(e, t), (t.doInCurrentLine = !0), "keyword")&#13;
                                        : e.match(D)&#13;
                                            ? (t.doInCurrentLine&#13;
                                                  ? (t.doInCurrentLine = !1)&#13;
                                                  : n(e, t),&#13;
                                              "keyword")&#13;
                                            : e.match(A)&#13;
                                                ? "keyword"&#13;
                                                : e.match(O)&#13;
                                                    ? (i(e, t), i(e, t), "keyword")&#13;
                                                    : e.match($)&#13;
                                                        ? (t.doInCurrentLine&#13;
                                                              ? (t.doInCurrentLine = !1)&#13;
                                                              : i(e, t),&#13;
                                                          "keyword")&#13;
                                                        : e.match(E)&#13;
                                                            ? "keyword"&#13;
                                                            : e.match(q)&#13;
                                                                ? "atom"&#13;
                                                                : e.match(I)&#13;
                                                                    ? "variable-2"&#13;
                                                                    : e.match(j)&#13;
                                                                        ? "builtin"&#13;
                                                                        : e.match(z)&#13;
                                                                            ? "variable-2"&#13;
                                                                            : e.match(m)&#13;
                                                                                ? "variable"&#13;
                                                                                : (e.next(), l);&#13;
            }&#13;
            function a(e) {&#13;
                var r = 1 == e.length,&#13;
                    n = "string";&#13;
                return function(i, a) {&#13;
                    for (; !i.eol(); ) {&#13;
                        if ((i.eatWhile(/[^'"]/), i.match(e))) return (a.tokenize = o), n;&#13;
                        i.eat(/['"]/);&#13;
                    }&#13;
                    if (r) {&#13;
                        if (t.singleLineStringErrors) return l;&#13;
                        a.tokenize = o;&#13;
                    }&#13;
                    return n;&#13;
                };&#13;
            }&#13;
            function s(e, t) {&#13;
                var r = t.tokenize(e, t),&#13;
                    n = e.current();&#13;
                return "." === n&#13;
                    ? ((r = t.tokenize(e, t)),&#13;
                      (n = e.current()),&#13;
                      !r || ("variable" !== r.substr(0, 8) &amp;&amp; "builtin" !== r &amp;&amp; "keyword" !== r)&#13;
                          ? l&#13;
                          : (("builtin" === r || "keyword" === r) &amp;&amp; (r = "variable"),&#13;
                            L.indexOf(n.substr(1)) &gt; -1 &amp;&amp; (r = "variable-2"),&#13;
                            r))&#13;
                    : r;&#13;
            }&#13;
            var l = "error",&#13;
                c = new RegExp("^[\\+\\-\\*/&amp;\\\\\\^&lt;&gt;=]"),&#13;
                u = new RegExp("^((&lt;&gt;)|(&lt;=)|(&gt;=))"),&#13;
                d = new RegExp("^[\\.,]"),&#13;
                f = new RegExp("^[\\(\\)]"),&#13;
                m = new RegExp("^[A-Za-z][_A-Za-z0-9]*"),&#13;
                h = [&#13;
                    "class",&#13;
                    "sub",&#13;
                    "select",&#13;
                    "while",&#13;
                    "if",&#13;
                    "function",&#13;
                    "property",&#13;
                    "with",&#13;
                    "for"&#13;
                ],&#13;
                p = ["else", "elseif", "case"],&#13;
                g = ["next", "loop", "wend"],&#13;
                v = r(["and", "or", "not", "xor", "is", "mod", "eqv", "imp"]),&#13;
                b = [&#13;
                    "dim",&#13;
                    "redim",&#13;
                    "then",&#13;
                    "until",&#13;
                    "randomize",&#13;
                    "byval",&#13;
                    "byref",&#13;
                    "new",&#13;
                    "property",&#13;
                    "exit",&#13;
                    "in",&#13;
                    "const",&#13;
                    "private",&#13;
                    "public",&#13;
                    "get",&#13;
                    "set",&#13;
                    "let",&#13;
                    "stop",&#13;
                    "on error resume next",&#13;
                    "on error goto 0",&#13;
                    "option explicit",&#13;
                    "call",&#13;
                    "me"&#13;
                ],&#13;
                y = ["true", "false", "nothing", "empty", "null"],&#13;
                x = [&#13;
                    "abs",&#13;
                    "array",&#13;
                    "asc",&#13;
                    "atn",&#13;
                    "cbool",&#13;
                    "cbyte",&#13;
                    "ccur",&#13;
                    "cdate",&#13;
                    "cdbl",&#13;
                    "chr",&#13;
                    "cint",&#13;
                    "clng",&#13;
                    "cos",&#13;
                    "csng",&#13;
                    "cstr",&#13;
                    "date",&#13;
                    "dateadd",&#13;
                    "datediff",&#13;
                    "datepart",&#13;
                    "dateserial",&#13;
                    "datevalue",&#13;
                    "day",&#13;
                    "escape",&#13;
                    "eval",&#13;
                    "execute",&#13;
                    "exp",&#13;
                    "filter",&#13;
                    "formatcurrency",&#13;
                    "formatdatetime",&#13;
                    "formatnumber",&#13;
                    "formatpercent",&#13;
                    "getlocale",&#13;
                    "getobject",&#13;
                    "getref",&#13;
                    "hex",&#13;
                    "hour",&#13;
                    "inputbox",&#13;
                    "instr",&#13;
                    "instrrev",&#13;
                    "int",&#13;
                    "fix",&#13;
                    "isarray",&#13;
                    "isdate",&#13;
                    "isempty",&#13;
                    "isnull",&#13;
                    "isnumeric",&#13;
                    "isobject",&#13;
                    "join",&#13;
                    "lbound",&#13;
                    "lcase",&#13;
                    "left",&#13;
                    "len",&#13;
                    "loadpicture",&#13;
                    "log",&#13;
                    "ltrim",&#13;
                    "rtrim",&#13;
                    "trim",&#13;
                    "maths",&#13;
                    "mid",&#13;
                    "minute",&#13;
                    "month",&#13;
                    "monthname",&#13;
                    "msgbox",&#13;
                    "now",&#13;
                    "oct",&#13;
                    "replace",&#13;
                    "rgb",&#13;
                    "right",&#13;
                    "rnd",&#13;
                    "round",&#13;
                    "scriptengine",&#13;
                    "scriptenginebuildversion",&#13;
                    "scriptenginemajorversion",&#13;
                    "scriptengineminorversion",&#13;
                    "second",&#13;
                    "setlocale",&#13;
                    "sgn",&#13;
                    "sin",&#13;
                    "space",&#13;
                    "split",&#13;
                    "sqr",&#13;
                    "strcomp",&#13;
                    "string",&#13;
                    "strreverse",&#13;
                    "tan",&#13;
                    "time",&#13;
                    "timer",&#13;
                    "timeserial",&#13;
                    "timevalue",&#13;
                    "typename",&#13;
                    "ubound",&#13;
                    "ucase",&#13;
                    "unescape",&#13;
                    "vartype",&#13;
                    "weekday",&#13;
                    "weekdayname",&#13;
                    "year"&#13;
                ],&#13;
                k = [&#13;
                    "vbBlack",&#13;
                    "vbRed",&#13;
                    "vbGreen",&#13;
                    "vbYellow",&#13;
                    "vbBlue",&#13;
                    "vbMagenta",&#13;
                    "vbCyan",&#13;
                    "vbWhite",&#13;
                    "vbBinaryCompare",&#13;
                    "vbTextCompare",&#13;
                    "vbSunday",&#13;
                    "vbMonday",&#13;
                    "vbTuesday",&#13;
                    "vbWednesday",&#13;
                    "vbThursday",&#13;
                    "vbFriday",&#13;
                    "vbSaturday",&#13;
                    "vbUseSystemDayOfWeek",&#13;
                    "vbFirstJan1",&#13;
                    "vbFirstFourDays",&#13;
                    "vbFirstFullWeek",&#13;
                    "vbGeneralDate",&#13;
                    "vbLongDate",&#13;
                    "vbShortDate",&#13;
                    "vbLongTime",&#13;
                    "vbShortTime",&#13;
                    "vbObjectError",&#13;
                    "vbOKOnly",&#13;
                    "vbOKCancel",&#13;
                    "vbAbortRetryIgnore",&#13;
                    "vbYesNoCancel",&#13;
                    "vbYesNo",&#13;
                    "vbRetryCancel",&#13;
                    "vbCritical",&#13;
                    "vbQuestion",&#13;
                    "vbExclamation",&#13;
                    "vbInformation",&#13;
                    "vbDefaultButton1",&#13;
                    "vbDefaultButton2",&#13;
                    "vbDefaultButton3",&#13;
                    "vbDefaultButton4",&#13;
                    "vbApplicationModal",&#13;
                    "vbSystemModal",&#13;
                    "vbOK",&#13;
                    "vbCancel",&#13;
                    "vbAbort",&#13;
                    "vbRetry",&#13;
                    "vbIgnore",&#13;
                    "vbYes",&#13;
                    "vbNo",&#13;
                    "vbCr",&#13;
                    "VbCrLf",&#13;
                    "vbFormFeed",&#13;
                    "vbLf",&#13;
                    "vbNewLine",&#13;
                    "vbNullChar",&#13;
                    "vbNullString",&#13;
                    "vbTab",&#13;
                    "vbVerticalTab",&#13;
                    "vbUseDefault",&#13;
                    "vbTrue",&#13;
                    "vbFalse",&#13;
                    "vbEmpty",&#13;
                    "vbNull",&#13;
                    "vbInteger",&#13;
                    "vbLong",&#13;
                    "vbSingle",&#13;
                    "vbDouble",&#13;
                    "vbCurrency",&#13;
                    "vbDate",&#13;
                    "vbString",&#13;
                    "vbObject",&#13;
                    "vbError",&#13;
                    "vbBoolean",&#13;
                    "vbVariant",&#13;
                    "vbDataObject",&#13;
                    "vbDecimal",&#13;
                    "vbByte",&#13;
                    "vbArray"&#13;
                ],&#13;
                w = ["WScript", "err", "debug", "RegExp"],&#13;
                _ = [&#13;
                    "description",&#13;
                    "firstindex",&#13;
                    "global",&#13;
                    "helpcontext",&#13;
                    "helpfile",&#13;
                    "ignorecase",&#13;
                    "length",&#13;
                    "number",&#13;
                    "pattern",&#13;
                    "source",&#13;
                    "value",&#13;
                    "count"&#13;
                ],&#13;
                C = [&#13;
                    "clear",&#13;
                    "execute",&#13;
                    "raise",&#13;
                    "replace",&#13;
                    "test",&#13;
                    "write",&#13;
                    "writeline",&#13;
                    "close",&#13;
                    "open",&#13;
                    "state",&#13;
                    "eof",&#13;
                    "update",&#13;
                    "addnew",&#13;
                    "end",&#13;
                    "createobject",&#13;
                    "quit"&#13;
                ],&#13;
                S = ["server", "response", "request", "session", "application"],&#13;
                T = [&#13;
                    "buffer",&#13;
                    "cachecontrol",&#13;
                    "charset",&#13;
                    "contenttype",&#13;
                    "expires",&#13;
                    "expiresabsolute",&#13;
                    "isclientconnected",&#13;
                    "pics",&#13;
                    "status",&#13;
                    "clientcertificate",&#13;
                    "cookies",&#13;
                    "form",&#13;
                    "querystring",&#13;
                    "servervariables",&#13;
                    "totalbytes",&#13;
                    "contents",&#13;
                    "staticobjects",&#13;
                    "codepage",&#13;
                    "lcid",&#13;
                    "sessionid",&#13;
                    "timeout",&#13;
                    "scripttimeout"&#13;
                ],&#13;
                M = [&#13;
                    "addheader",&#13;
                    "appendtolog",&#13;
                    "binarywrite",&#13;
                    "end",&#13;
                    "flush",&#13;
                    "redirect",&#13;
                    "binaryread",&#13;
                    "remove",&#13;
                    "removeall",&#13;
                    "lock",&#13;
                    "unlock",&#13;
                    "abandon",&#13;
                    "getlasterror",&#13;
                    "htmlencode",&#13;
                    "mappath",&#13;
                    "transfer",&#13;
                    "urlencode"&#13;
                ],&#13;
                L = C.concat(_);&#13;
            (w = w.concat(k)), e.isASP &amp;&amp; ((w = w.concat(S)), (L = L.concat(M, T)));&#13;
            var E = r(b),&#13;
                q = r(y),&#13;
                j = r(x),&#13;
                z = r(w),&#13;
                I = r(L),&#13;
                P = '"',&#13;
                D = r(h),&#13;
                A = r(p),&#13;
                $ = r(g),&#13;
                O = r(["end"]),&#13;
                R = r(["do"]),&#13;
                F = r(["on error resume next", "exit"]),&#13;
                H = r(["rem"]),&#13;
                N = {&#13;
                    electricChars: "dDpPtTfFeE ",&#13;
                    startState: function() {&#13;
                        return {&#13;
                            tokenize: o,&#13;
                            lastToken: null,&#13;
                            currentIndent: 0,&#13;
                            nextLineIndent: 0,&#13;
                            doInCurrentLine: !1,&#13;
                            ignoreKeyword: !1&#13;
                        };&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        e.sol() &amp;&amp;&#13;
                            ((t.currentIndent += t.nextLineIndent),&#13;
                            (t.nextLineIndent = 0),&#13;
                            (t.doInCurrentLine = 0));&#13;
                        var r = s(e, t);&#13;
                        return (&#13;
                            (t.lastToken = { style: r, content: e.current() }),&#13;
                            "space" === r &amp;&amp; (r = null),&#13;
                            r&#13;
                        );&#13;
                    },&#13;
                    indent: function(t, r) {&#13;
                        var n = r.replace(/^\s+|\s+$/g, "");&#13;
                        return n.match($) || n.match(O) || n.match(A)&#13;
                            ? e.indentUnit * (t.currentIndent - 1)&#13;
                            : t.currentIndent &lt; 0&#13;
                                ? 0&#13;
                                : t.currentIndent * e.indentUnit;&#13;
                    }&#13;
                };&#13;
            return N;&#13;
        }),&#13;
            e.defineMIME("text/vbscript", "vbscript");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("velocity", function() {&#13;
            function e(e) {&#13;
                for (var t = {}, r = e.split(" "), n = 0; n &lt; r.length; ++n) t[r[n]] = !0;&#13;
                return t;&#13;
            }&#13;
            function t(e, t, r) {&#13;
                return (t.tokenize = r), r(e, t);&#13;
            }&#13;
            function r(e, r) {&#13;
                var u = r.beforeParams;&#13;
                r.beforeParams = !1;&#13;
                var d = e.next();&#13;
                if ("'" == d &amp;&amp; r.inParams) return (r.lastTokenWasBuiltin = !1), t(e, r, n(d));&#13;
                if ('"' != d) {&#13;
                    if (/[\[\]{}\(\),;\.]/.test(d))&#13;
                        return (&#13;
                            "(" == d &amp;&amp; u&#13;
                                ? (r.inParams = !0)&#13;
                                : ")" == d &amp;&amp; ((r.inParams = !1), (r.lastTokenWasBuiltin = !0)),&#13;
                            null&#13;
                        );&#13;
                    if (/\d/.test(d))&#13;
                        return (r.lastTokenWasBuiltin = !1), e.eatWhile(/[\w\.]/), "number";&#13;
                    if ("#" == d &amp;&amp; e.eat("*")) return (r.lastTokenWasBuiltin = !1), t(e, r, i);&#13;
                    if ("#" == d &amp;&amp; e.match(/ *\[ *\[/))&#13;
                        return (r.lastTokenWasBuiltin = !1), t(e, r, o);&#13;
                    if ("#" == d &amp;&amp; e.eat("#"))&#13;
                        return (r.lastTokenWasBuiltin = !1), e.skipToEnd(), "comment";&#13;
                    if ("$" == d)&#13;
                        return (&#13;
                            e.eatWhile(/[\w\d\$_\.{}]/),&#13;
                            l &amp;&amp; l.propertyIsEnumerable(e.current())&#13;
                                ? "keyword"&#13;
                                : ((r.lastTokenWasBuiltin = !0), (r.beforeParams = !0), "builtin")&#13;
                        );&#13;
                    if (c.test(d)) return (r.lastTokenWasBuiltin = !1), e.eatWhile(c), "operator";&#13;
                    e.eatWhile(/[\w\$_{}@]/);&#13;
                    var f = e.current();&#13;
                    return a &amp;&amp; a.propertyIsEnumerable(f)&#13;
                        ? "keyword"&#13;
                        : (s &amp;&amp; s.propertyIsEnumerable(f)) ||&#13;
                          (e.current().match(/^#@?[a-z0-9_]+ *$/i) &amp;&amp;&#13;
                              "(" == e.peek() &amp;&amp;&#13;
                              (!s || !s.propertyIsEnumerable(f.toLowerCase())))&#13;
                            ? ((r.beforeParams = !0), (r.lastTokenWasBuiltin = !1), "keyword")&#13;
                            : r.inString&#13;
                                ? ((r.lastTokenWasBuiltin = !1), "string")&#13;
                                : e.pos &gt; f.length &amp;&amp;&#13;
                                  "." == e.string.charAt(e.pos - f.length - 1) &amp;&amp;&#13;
                                  r.lastTokenWasBuiltin&#13;
                                    ? "builtin"&#13;
                                    : ((r.lastTokenWasBuiltin = !1), null);&#13;
                }&#13;
                return (&#13;
                    (r.lastTokenWasBuiltin = !1),&#13;
                    r.inString ? ((r.inString = !1), "string") : r.inParams ? t(e, r, n(d)) : void 0&#13;
                );&#13;
            }&#13;
            function n(e) {&#13;
                return function(t, n) {&#13;
                    for (var i, o = !1, a = !1; null != (i = t.next()); ) {&#13;
                        if (i == e &amp;&amp; !o) {&#13;
                            a = !0;&#13;
                            break;&#13;
                        }&#13;
                        if ('"' == e &amp;&amp; "$" == t.peek() &amp;&amp; !o) {&#13;
                            (n.inString = !0), (a = !0);&#13;
                            break;&#13;
                        }&#13;
                        o = !o &amp;&amp; "\\" == i;&#13;
                    }&#13;
                    return a &amp;&amp; (n.tokenize = r), "string";&#13;
                };&#13;
            }&#13;
            function i(e, t) {&#13;
                for (var n, i = !1; (n = e.next()); ) {&#13;
                    if ("#" == n &amp;&amp; i) {&#13;
                        t.tokenize = r;&#13;
                        break;&#13;
                    }&#13;
                    i = "*" == n;&#13;
                }&#13;
                return "comment";&#13;
            }&#13;
            function o(e, t) {&#13;
                for (var n, i = 0; (n = e.next()); ) {&#13;
                    if ("#" == n &amp;&amp; 2 == i) {&#13;
                        t.tokenize = r;&#13;
                        break;&#13;
                    }&#13;
                    "]" == n ? i++ : " " != n &amp;&amp; (i = 0);&#13;
                }&#13;
                return "meta";&#13;
            }&#13;
            var a = e("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}"),&#13;
                s = e(&#13;
                    "#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}"&#13;
                ),&#13;
                l = e(&#13;
                    "$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent"&#13;
                ),&#13;
                c = /[+\-*&amp;%=&lt;&gt;!?:\/|]/;&#13;
            return {&#13;
                startState: function() {&#13;
                    return {&#13;
                        tokenize: r,&#13;
                        beforeParams: !1,&#13;
                        inParams: !1,&#13;
                        inString: !1,&#13;
                        lastTokenWasBuiltin: !1&#13;
                    };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    return e.eatSpace() ? null : t.tokenize(e, t);&#13;
                },&#13;
                blockCommentStart: "#*",&#13;
                blockCommentEnd: "*#",&#13;
                lineComment: "##",&#13;
                fold: "velocity"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/velocity", "velocity");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("xquery", function() {&#13;
            function e(e, t, r) {&#13;
                return (y = e), (x = r), t;&#13;
            }&#13;
            function t(e, t, r) {&#13;
                return (t.tokenize = r), r(e, t);&#13;
            }&#13;
            function r(r, s) {&#13;
                var f = r.next(),&#13;
                    h = !1,&#13;
                    g = p(r);&#13;
                if ("&lt;" == f) {&#13;
                    if (r.match("!--", !0)) return t(r, s, l);&#13;
                    if (r.match("![CDATA", !1)) return (s.tokenize = c), e("tag", "tag");&#13;
                    if (r.match("?", !1)) return t(r, s, u);&#13;
                    var y = r.eat("/");&#13;
                    r.eatSpace();&#13;
                    for (var x, w = ""; (x = r.eat(/[^\s\u00a0=&lt;&gt;\"\'\/?]/)); ) w += x;&#13;
                    return t(r, s, a(w, y));&#13;
                }&#13;
                if ("{" == f) return v(s, { type: "codeblock" }), e("", null);&#13;
                if ("}" == f) return b(s), e("", null);&#13;
                if (d(s))&#13;
                    return "&gt;" == f&#13;
                        ? e("tag", "tag")&#13;
                        : "/" == f &amp;&amp; r.eat("&gt;")&#13;
                            ? (b(s), e("tag", "tag"))&#13;
                            : e("word", "variable");&#13;
                if (/\d/.test(f))&#13;
                    return r.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/), e("number", "atom");&#13;
                if ("(" === f &amp;&amp; r.eat(":")) return v(s, { type: "comment" }), t(r, s, n);&#13;
                if (g || ('"' !== f &amp;&amp; "'" !== f)) {&#13;
                    if ("$" === f) return t(r, s, o);&#13;
                    if (":" === f &amp;&amp; r.eat("=")) return e("operator", "keyword");&#13;
                    if ("(" === f) return v(s, { type: "paren" }), e("", null);&#13;
                    if (")" === f) return b(s), e("", null);&#13;
                    if ("[" === f) return v(s, { type: "bracket" }), e("", null);&#13;
                    if ("]" === f) return b(s), e("", null);&#13;
                    var _ = k.propertyIsEnumerable(f) &amp;&amp; k[f];&#13;
                    if (g &amp;&amp; '"' === f) for (; '"' !== r.next(); );&#13;
                    if (g &amp;&amp; "'" === f) for (; "'" !== r.next(); );&#13;
                    _ || r.eatWhile(/[\w\$_-]/);&#13;
                    var C = r.eat(":");&#13;
                    !r.eat(":") &amp;&amp; C &amp;&amp; r.eatWhile(/[\w\$_-]/),&#13;
                        r.match(/^[ \t]*\(/, !1) &amp;&amp; (h = !0);&#13;
                    var S = r.current();&#13;
                    return (&#13;
                        (_ = k.propertyIsEnumerable(S) &amp;&amp; k[S]),&#13;
                        h &amp;&amp; !_ &amp;&amp; (_ = { type: "function_call", style: "variable def" }),&#13;
                        m(s)&#13;
                            ? (b(s), e("word", "variable", S))&#13;
                            : (("element" == S || "attribute" == S || "axis_specifier" == _.type) &amp;&amp;&#13;
                                  v(s, { type: "xmlconstructor" }),&#13;
                              _ ? e(_.type, _.style, S) : e("word", "variable", S))&#13;
                    );&#13;
                }&#13;
                return t(r, s, i(f));&#13;
            }&#13;
            function n(t, r) {&#13;
                for (var n, i = !1, o = !1, a = 0; (n = t.next()); ) {&#13;
                    if (")" == n &amp;&amp; i) {&#13;
                        if (!(a &gt; 0)) {&#13;
                            b(r);&#13;
                            break;&#13;
                        }&#13;
                        a--;&#13;
                    } else ":" == n &amp;&amp; o &amp;&amp; a++;&#13;
                    (i = ":" == n), (o = "(" == n);&#13;
                }&#13;
                return e("comment", "comment");&#13;
            }&#13;
            function i(t, n) {&#13;
                return function(o, a) {&#13;
                    var s;&#13;
                    if (h(a) &amp;&amp; o.current() == t)&#13;
                        return b(a), n &amp;&amp; (a.tokenize = n), e("string", "string");&#13;
                    if (&#13;
                        (v(a, { type: "string", name: t, tokenize: i(t, n) }),&#13;
                        o.match("{", !1) &amp;&amp; f(a))&#13;
                    )&#13;
                        return (a.tokenize = r), e("string", "string");&#13;
                    for (; (s = o.next()); ) {&#13;
                        if (s == t) {&#13;
                            b(a), n &amp;&amp; (a.tokenize = n);&#13;
                            break;&#13;
                        }&#13;
                        if (o.match("{", !1) &amp;&amp; f(a))&#13;
                            return (a.tokenize = r), e("string", "string");&#13;
                    }&#13;
                    return e("string", "string");&#13;
                };&#13;
            }&#13;
            function o(t, n) {&#13;
                var i = /[\w\$_-]/;&#13;
                if (t.eat('"')) {&#13;
                    for (; '"' !== t.next(); );&#13;
                    t.eat(":");&#13;
                } else t.eatWhile(i), t.match(":=", !1) || t.eat(":");&#13;
                return t.eatWhile(i), (n.tokenize = r), e("variable", "variable");&#13;
            }&#13;
            function a(t, n) {&#13;
                return function(i, o) {&#13;
                    return (&#13;
                        i.eatSpace(),&#13;
                        n &amp;&amp; i.eat("&gt;")&#13;
                            ? (b(o), (o.tokenize = r), e("tag", "tag"))&#13;
                            : (i.eat("/") || v(o, { type: "tag", name: t, tokenize: r }),&#13;
                              i.eat("&gt;")&#13;
                                  ? ((o.tokenize = r), e("tag", "tag"))&#13;
                                  : ((o.tokenize = s), e("tag", "tag")))&#13;
                    );&#13;
                };&#13;
            }&#13;
            function s(n, o) {&#13;
                var a = n.next();&#13;
                return "/" == a &amp;&amp; n.eat("&gt;")&#13;
                    ? (f(o) &amp;&amp; b(o), d(o) &amp;&amp; b(o), e("tag", "tag"))&#13;
                    : "&gt;" == a&#13;
                        ? (f(o) &amp;&amp; b(o), e("tag", "tag"))&#13;
                        : "=" == a&#13;
                            ? e("", null)&#13;
                            : '"' == a || "'" == a&#13;
                                ? t(n, o, i(a, s))&#13;
                                : (f(o) || v(o, { type: "attribute", tokenize: s }),&#13;
                                  n.eat(/[a-zA-Z_:]/),&#13;
                                  n.eatWhile(/[-a-zA-Z0-9_:.]/),&#13;
                                  n.eatSpace(),&#13;
                                  (n.match("&gt;", !1) || n.match("/", !1)) &amp;&amp;&#13;
                                      (b(o), (o.tokenize = r)),&#13;
                                  e("attribute", "attribute"));&#13;
            }&#13;
            function l(t, n) {&#13;
                for (var i; (i = t.next()); )&#13;
                    if ("-" == i &amp;&amp; t.match("-&gt;", !0))&#13;
                        return (n.tokenize = r), e("comment", "comment");&#13;
            }&#13;
            function c(t, n) {&#13;
                for (var i; (i = t.next()); )&#13;
                    if ("]" == i &amp;&amp; t.match("]", !0))&#13;
                        return (n.tokenize = r), e("comment", "comment");&#13;
            }&#13;
            function u(t, n) {&#13;
                for (var i; (i = t.next()); )&#13;
                    if ("?" == i &amp;&amp; t.match("&gt;", !0))&#13;
                        return (n.tokenize = r), e("comment", "comment meta");&#13;
            }&#13;
            function d(e) {&#13;
                return g(e, "tag");&#13;
            }&#13;
            function f(e) {&#13;
                return g(e, "attribute");&#13;
            }&#13;
            function m(e) {&#13;
                return g(e, "xmlconstructor");&#13;
            }&#13;
            function h(e) {&#13;
                return g(e, "string");&#13;
            }&#13;
            function p(e) {&#13;
                return '"' === e.current()&#13;
                    ? e.match(/^[^\"]+\"\:/, !1)&#13;
                    : "'" === e.current()&#13;
                        ? e.match(/^[^\"]+\'\:/, !1)&#13;
                        : !1;&#13;
            }&#13;
            function g(e, t) {&#13;
                return e.stack.length &amp;&amp; e.stack[e.stack.length - 1].type == t;&#13;
            }&#13;
            function v(e, t) {&#13;
                e.stack.push(t);&#13;
            }&#13;
            function b(e) {&#13;
                e.stack.pop();&#13;
                var t = e.stack.length &amp;&amp; e.stack[e.stack.length - 1].tokenize;&#13;
                e.tokenize = t || r;&#13;
            }&#13;
            var y,&#13;
                x,&#13;
                k = (function() {&#13;
                    function e(e) {&#13;
                        return { type: e, style: "keyword" };&#13;
                    }&#13;
                    for (&#13;
                        var t = e("keyword a"),&#13;
                            r = e("keyword b"),&#13;
                            n = e("keyword c"),&#13;
                            i = e("operator"),&#13;
                            o = { type: "atom", style: "atom" },&#13;
                            a = { type: "punctuation", style: null },&#13;
                            s = { type: "axis_specifier", style: "qualifier" },&#13;
                            l = {&#13;
                                if: t,&#13;
                                switch: t,&#13;
                                while: t,&#13;
                                for: t,&#13;
                                else: r,&#13;
                                then: r,&#13;
                                try: r,&#13;
                                finally: r,&#13;
                                catch: r,&#13;
                                element: n,&#13;
                                attribute: n,&#13;
                                let: n,&#13;
                                implements: n,&#13;
                                import: n,&#13;
                                module: n,&#13;
                                namespace: n,&#13;
                                return: n,&#13;
                                super: n,&#13;
                                this: n,&#13;
                                throws: n,&#13;
                                where: n,&#13;
                                private: n,&#13;
                                ",": a,&#13;
                                null: o,&#13;
                                "fn:false()": o,&#13;
                                "fn:true()": o&#13;
                            },&#13;
                            c = [&#13;
                                "after",&#13;
                                "ancestor",&#13;
                                "ancestor-or-self",&#13;
                                "and",&#13;
                                "as",&#13;
                                "ascending",&#13;
                                "assert",&#13;
                                "attribute",&#13;
                                "before",&#13;
                                "by",&#13;
                                "case",&#13;
                                "cast",&#13;
                                "child",&#13;
                                "comment",&#13;
                                "declare",&#13;
                                "default",&#13;
                                "define",&#13;
                                "descendant",&#13;
                                "descendant-or-self",&#13;
                                "descending",&#13;
                                "document",&#13;
                                "document-node",&#13;
                                "element",&#13;
                                "else",&#13;
                                "eq",&#13;
                                "every",&#13;
                                "except",&#13;
                                "external",&#13;
                                "following",&#13;
                                "following-sibling",&#13;
                                "follows",&#13;
                                "for",&#13;
                                "function",&#13;
                                "if",&#13;
                                "import",&#13;
                                "in",&#13;
                                "instance",&#13;
                                "intersect",&#13;
                                "item",&#13;
                                "let",&#13;
                                "module",&#13;
                                "namespace",&#13;
                                "node",&#13;
                                "node",&#13;
                                "of",&#13;
                                "only",&#13;
                                "or",&#13;
                                "order",&#13;
                                "parent",&#13;
                                "precedes",&#13;
                                "preceding",&#13;
                                "preceding-sibling",&#13;
                                "processing-instruction",&#13;
                                "ref",&#13;
                                "return",&#13;
                                "returns",&#13;
                                "satisfies",&#13;
                                "schema",&#13;
                                "schema-element",&#13;
                                "self",&#13;
                                "some",&#13;
                                "sortby",&#13;
                                "stable",&#13;
                                "text",&#13;
                                "then",&#13;
                                "to",&#13;
                                "treat",&#13;
                                "typeswitch",&#13;
                                "union",&#13;
                                "variable",&#13;
                                "version",&#13;
                                "where",&#13;
                                "xquery",&#13;
                                "empty-sequence"&#13;
                            ],&#13;
                            u = 0,&#13;
                            d = c.length;&#13;
                        d &gt; u;&#13;
                        u++&#13;
                    )&#13;
                        l[c[u]] = e(c[u]);&#13;
                    for (&#13;
                        var f = [&#13;
                                "xs:string",&#13;
                                "xs:float",&#13;
                                "xs:decimal",&#13;
                                "xs:double",&#13;
                                "xs:integer",&#13;
                                "xs:boolean",&#13;
                                "xs:date",&#13;
                                "xs:dateTime",&#13;
                                "xs:time",&#13;
                                "xs:duration",&#13;
                                "xs:dayTimeDuration",&#13;
                                "xs:time",&#13;
                                "xs:yearMonthDuration",&#13;
                                "numeric",&#13;
                                "xs:hexBinary",&#13;
                                "xs:base64Binary",&#13;
                                "xs:anyURI",&#13;
                                "xs:QName",&#13;
                                "xs:byte",&#13;
                                "xs:boolean",&#13;
                                "xs:anyURI",&#13;
                                "xf:yearMonthDuration"&#13;
                            ],&#13;
                            u = 0,&#13;
                            d = f.length;&#13;
                        d &gt; u;&#13;
                        u++&#13;
                    )&#13;
                        l[f[u]] = o;&#13;
                    for (&#13;
                        var m = [&#13;
                                "eq",&#13;
                                "ne",&#13;
                                "lt",&#13;
                                "le",&#13;
                                "gt",&#13;
                                "ge",&#13;
                                ":=",&#13;
                                "=",&#13;
                                "&gt;",&#13;
                                "&gt;=",&#13;
                                "&lt;",&#13;
                                "&lt;=",&#13;
                                ".",&#13;
                                "|",&#13;
                                "?",&#13;
                                "and",&#13;
                                "or",&#13;
                                "div",&#13;
                                "idiv",&#13;
                                "mod",&#13;
                                "*",&#13;
                                "/",&#13;
                                "+",&#13;
                                "-"&#13;
                            ],&#13;
                            u = 0,&#13;
                            d = m.length;&#13;
                        d &gt; u;&#13;
                        u++&#13;
                    )&#13;
                        l[m[u]] = i;&#13;
                    for (&#13;
                        var h = [&#13;
                                "self::",&#13;
                                "attribute::",&#13;
                                "child::",&#13;
                                "descendant::",&#13;
                                "descendant-or-self::",&#13;
                                "parent::",&#13;
                                "ancestor::",&#13;
                                "ancestor-or-self::",&#13;
                                "following::",&#13;
                                "preceding::",&#13;
                                "following-sibling::",&#13;
                                "preceding-sibling::"&#13;
                            ],&#13;
                            u = 0,&#13;
                            d = h.length;&#13;
                        d &gt; u;&#13;
                        u++&#13;
                    )&#13;
                        l[h[u]] = s;&#13;
                    return l;&#13;
                })();&#13;
            return {&#13;
                startState: function() {&#13;
                    return { tokenize: r, cc: [], stack: [] };&#13;
                },&#13;
                token: function(e, t) {&#13;
                    if (e.eatSpace()) return null;&#13;
                    var r = t.tokenize(e, t);&#13;
                    return r;&#13;
                },&#13;
                blockCommentStart: "(:",&#13;
                blockCommentEnd: ":)"&#13;
            };&#13;
        }),&#13;
            e.defineMIME("application/xquery", "xquery");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("yaml", function() {&#13;
            var e = ["true", "false", "on", "off", "yes", "no"],&#13;
                t = new RegExp("\\b((" + e.join(")|(") + "))$", "i");&#13;
            return {&#13;
                token: function(e, r) {&#13;
                    var n = e.peek(),&#13;
                        i = r.escaped;&#13;
                    if (&#13;
                        ((r.escaped = !1),&#13;
                        "#" == n &amp;&amp; (0 == e.pos || /\s/.test(e.string.charAt(e.pos - 1))))&#13;
                    )&#13;
                        return e.skipToEnd(), "comment";&#13;
                    if (e.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/)) return "string";&#13;
                    if (r.literal &amp;&amp; e.indentation() &gt; r.keyCol) return e.skipToEnd(), "string";&#13;
                    if ((r.literal &amp;&amp; (r.literal = !1), e.sol())) {&#13;
                        if (((r.keyCol = 0), (r.pair = !1), (r.pairStart = !1), e.match(/---/)))&#13;
                            return "def";&#13;
                        if (e.match(/\.\.\./)) return "def";&#13;
                        if (e.match(/\s*-\s+/)) return "meta";&#13;
                    }&#13;
                    if (e.match(/^(\{|\}|\[|\])/))&#13;
                        return (&#13;
                            "{" == n&#13;
                                ? r.inlinePairs++&#13;
                                : "}" == n&#13;
                                    ? r.inlinePairs--&#13;
                                    : "[" == n&#13;
                                        ? r.inlineList++&#13;
                                        : r.inlineList--,&#13;
                            "meta"&#13;
                        );&#13;
                    if (r.inlineList &gt; 0 &amp;&amp; !i &amp;&amp; "," == n) return e.next(), "meta";&#13;
                    if (r.inlinePairs &gt; 0 &amp;&amp; !i &amp;&amp; "," == n)&#13;
                        return (r.keyCol = 0), (r.pair = !1), (r.pairStart = !1), e.next(), "meta";&#13;
                    if (r.pairStart) {&#13;
                        if (e.match(/^\s*(\||\&gt;)\s*/)) return (r.literal = !0), "meta";&#13;
                        if (e.match(/^\s*(\&amp;|\*)[a-z0-9\._-]+\b/i)) return "variable-2";&#13;
                        if (0 == r.inlinePairs &amp;&amp; e.match(/^\s*-?[0-9\.\,]+\s?$/)) return "number";&#13;
                        if (r.inlinePairs &gt; 0 &amp;&amp; e.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/))&#13;
                            return "number";&#13;
                        if (e.match(t)) return "keyword";&#13;
                    }&#13;
                    return !r.pair &amp;&amp;&#13;
                        e.match(&#13;
                            /^\s*(?:[,\[\]{}&amp;*!|&gt;'"%@`][^\s'":]|[^,\[\]{}#&amp;*!|&gt;'"%@`])[^#]*?(?=\s*:($|\s))/&#13;
                        )&#13;
                        ? ((r.pair = !0), (r.keyCol = e.indentation()), "atom")&#13;
                        : r.pair &amp;&amp; e.match(/^:\s*/)&#13;
                            ? ((r.pairStart = !0), "meta")&#13;
                            : ((r.pairStart = !1), (r.escaped = "\\" == n), e.next(), null);&#13;
                },&#13;
                startState: function() {&#13;
                    return {&#13;
                        pair: !1,&#13;
                        pairStart: !1,&#13;
                        keyCol: 0,&#13;
                        inlinePairs: 0,&#13;
                        inlineList: 0,&#13;
                        literal: !1,&#13;
                        escaped: !1&#13;
                    };&#13;
                }&#13;
            };&#13;
        }),&#13;
            e.defineMIME("text/x-yaml", "yaml");&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(require("../../lib/codemirror"))&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define(["../../lib/codemirror"], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMIME("text/x-erlang", "erlang"),&#13;
            e.defineMode("erlang", function(t) {&#13;
                function r(e, t) {&#13;
                    if (t.in_string) return (t.in_string = !o(e)), u(t, e, "string");&#13;
                    if (t.in_atom) return (t.in_atom = !a(e)), u(t, e, "atom");&#13;
                    if (e.eatSpace()) return u(t, e, "whitespace");&#13;
                    if (!h(t) &amp;&amp; e.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/))&#13;
                        return c(e.current(), T) ? u(t, e, "type") : u(t, e, "attribute");&#13;
                    var r = e.next();&#13;
                    if ("%" == r) return e.skipToEnd(), u(t, e, "comment");&#13;
                    if (":" == r) return u(t, e, "colon");&#13;
                    if ("?" == r) return e.eatSpace(), e.eatWhile(R), u(t, e, "macro");&#13;
                    if ("#" == r) return e.eatSpace(), e.eatWhile(R), u(t, e, "record");&#13;
                    if ("$" == r)&#13;
                        return "\\" != e.next() || e.match(F)&#13;
                            ? u(t, e, "number")&#13;
                            : u(t, e, "error");&#13;
                    if ("." == r) return u(t, e, "dot");&#13;
                    if ("'" == r) {&#13;
                        if (!(t.in_atom = !a(e))) {&#13;
                            if (e.match(/\s*\/\s*[0-9]/, !1))&#13;
                                return e.match(/\s*\/\s*[0-9]/, !0), u(t, e, "fun");&#13;
                            if (e.match(/\s*\(/, !1) || e.match(/\s*:/, !1))&#13;
                                return u(t, e, "function");&#13;
                        }&#13;
                        return u(t, e, "atom");&#13;
                    }&#13;
                    if ('"' == r) return (t.in_string = !o(e)), u(t, e, "string");&#13;
                    if (/[A-Z_Ø-ÞÀ-Ö]/.test(r)) return e.eatWhile(R), u(t, e, "variable");&#13;
                    if (/[a-z_ß-öø-ÿ]/.test(r)) {&#13;
                        if ((e.eatWhile(R), e.match(/\s*\/\s*[0-9]/, !1)))&#13;
                            return e.match(/\s*\/\s*[0-9]/, !0), u(t, e, "fun");&#13;
                        var s = e.current();&#13;
                        return c(s, M)&#13;
                            ? u(t, e, "keyword")&#13;
                            : c(s, q)&#13;
                                ? u(t, e, "operator")&#13;
                                : e.match(/\s*\(/, !1)&#13;
                                    ? !c(s, O) || (":" == h(t).token &amp;&amp; "erlang" != h(t, 2).token)&#13;
                                        ? c(s, $)&#13;
                                            ? u(t, e, "guard")&#13;
                                            : u(t, e, "function")&#13;
                                        : u(t, e, "builtin")&#13;
                                    : c(s, q)&#13;
                                        ? u(t, e, "operator")&#13;
                                        : ":" == l(e)&#13;
                                            ? "erlang" == s&#13;
                                                ? u(t, e, "builtin")&#13;
                                                : u(t, e, "function")&#13;
                                            : c(s, ["true", "false"])&#13;
                                                ? u(t, e, "boolean")&#13;
                                                : c(s, ["true", "false"])&#13;
                                                    ? u(t, e, "boolean")&#13;
                                                    : u(t, e, "atom");&#13;
                    }&#13;
                    var d = /[0-9]/,&#13;
                        f = /[0-9a-zA-Z]/;&#13;
                    return d.test(r)&#13;
                        ? (e.eatWhile(d),&#13;
                          e.eat("#")&#13;
                              ? e.eatWhile(f) || e.backUp(1)&#13;
                              : e.eat(".") &amp;&amp;&#13;
                                (e.eatWhile(d)&#13;
                                    ? e.eat(/[eE]/) &amp;&amp;&#13;
                                      (e.eat(/[-+]/)&#13;
                                          ? e.eatWhile(d) || e.backUp(2)&#13;
                                          : e.eatWhile(d) || e.backUp(1))&#13;
                                    : e.backUp(1)),&#13;
                          u(t, e, "number"))&#13;
                        : n(e, I, P)&#13;
                            ? u(t, e, "open_paren")&#13;
                            : n(e, D, A)&#13;
                                ? u(t, e, "close_paren")&#13;
                                : i(e, L, E)&#13;
                                    ? u(t, e, "separator")&#13;
                                    : i(e, j, z)&#13;
                                        ? u(t, e, "operator")&#13;
                                        : u(t, e, null);&#13;
                }&#13;
                function n(e, t, r) {&#13;
                    if (1 == e.current().length &amp;&amp; t.test(e.current())) {&#13;
                        for (e.backUp(1); t.test(e.peek()); )&#13;
                            if ((e.next(), c(e.current(), r))) return !0;&#13;
                        e.backUp(e.current().length - 1);&#13;
                    }&#13;
                    return !1;&#13;
                }&#13;
                function i(e, t, r) {&#13;
                    if (1 == e.current().length &amp;&amp; t.test(e.current())) {&#13;
                        for (; t.test(e.peek()); ) e.next();&#13;
                        for (; 0 &lt; e.current().length; ) {&#13;
                            if (c(e.current(), r)) return !0;&#13;
                            e.backUp(1);&#13;
                        }&#13;
                        e.next();&#13;
                    }&#13;
                    return !1;&#13;
                }&#13;
                function o(e) {&#13;
                    return s(e, '"', "\\");&#13;
                }&#13;
                function a(e) {&#13;
                    return s(e, "'", "\\");&#13;
                }&#13;
                function s(e, t, r) {&#13;
                    for (; !e.eol(); ) {&#13;
                        var n = e.next();&#13;
                        if (n == t) return !0;&#13;
                        n == r &amp;&amp; e.next();&#13;
                    }&#13;
                    return !1;&#13;
                }&#13;
                function l(e) {&#13;
                    var t = e.match(/([\n\s]+|%[^\n]*\n)*(.)/, !1);&#13;
                    return t ? t.pop() : "";&#13;
                }&#13;
                function c(e, t) {&#13;
                    return -1 &lt; t.indexOf(e);&#13;
                }&#13;
                function u(e, t, r) {&#13;
                    switch ((p(e, f(r, t)), r)) {&#13;
                        case "atom":&#13;
                            return "atom";&#13;
                        case "attribute":&#13;
                            return "attribute";&#13;
                        case "boolean":&#13;
                            return "atom";&#13;
                        case "builtin":&#13;
                            return "builtin";&#13;
                        case "close_paren":&#13;
                            return null;&#13;
                        case "colon":&#13;
                            return null;&#13;
                        case "comment":&#13;
                            return "comment";&#13;
                        case "dot":&#13;
                            return null;&#13;
                        case "error":&#13;
                            return "error";&#13;
                        case "fun":&#13;
                            return "meta";&#13;
                        case "function":&#13;
                            return "tag";&#13;
                        case "guard":&#13;
                            return "property";&#13;
                        case "keyword":&#13;
                            return "keyword";&#13;
                        case "macro":&#13;
                            return "variable-2";&#13;
                        case "number":&#13;
                            return "number";&#13;
                        case "open_paren":&#13;
                            return null;&#13;
                        case "operator":&#13;
                            return "operator";&#13;
                        case "record":&#13;
                            return "bracket";&#13;
                        case "separator":&#13;
                            return null;&#13;
                        case "string":&#13;
                            return "string";&#13;
                        case "type":&#13;
                            return "def";&#13;
                        case "variable":&#13;
                            return "variable";&#13;
                        default:&#13;
                            return null;&#13;
                    }&#13;
                }&#13;
                function d(e, t, r, n) {&#13;
                    return { token: e, column: t, indent: r, type: n };&#13;
                }&#13;
                function f(e, t) {&#13;
                    return d(t.current(), t.column(), t.indentation(), e);&#13;
                }&#13;
                function m(e) {&#13;
                    return d(e, 0, 0, e);&#13;
                }&#13;
                function h(e, t) {&#13;
                    var r = e.tokenStack.length,&#13;
                        n = t ? t : 1;&#13;
                    return n &gt; r ? !1 : e.tokenStack[r - n];&#13;
                }&#13;
                function p(e, t) {&#13;
                    "comment" != t.type &amp;&amp;&#13;
                        "whitespace" != t.type &amp;&amp;&#13;
                        ((e.tokenStack = g(e.tokenStack, t)), (e.tokenStack = v(e.tokenStack)));&#13;
                }&#13;
                function g(e, t) {&#13;
                    var r = e.length - 1;&#13;
                    return (&#13;
                        r &gt; 0 &amp;&amp; "record" === e[r].type &amp;&amp; "dot" === t.type&#13;
                            ? e.pop()&#13;
                            : r &gt; 0 &amp;&amp; "group" === e[r].type&#13;
                                ? (e.pop(), e.push(t))&#13;
                                : e.push(t),&#13;
                        e&#13;
                    );&#13;
                }&#13;
                function v(e) {&#13;
                    var t = e.length - 1;&#13;
                    if ("dot" === e[t].type) return [];&#13;
                    if ("fun" === e[t].type &amp;&amp; "fun" === e[t - 1].token) return e.slice(0, t - 1);&#13;
                    switch (e[e.length - 1].token) {&#13;
                        case "}":&#13;
                            return b(e, { g: ["{"] });&#13;
                        case "]":&#13;
                            return b(e, { i: ["["] });&#13;
                        case ")":&#13;
                            return b(e, { i: ["("] });&#13;
                        case "&gt;&gt;":&#13;
                            return b(e, { i: ["&lt;&lt;"] });&#13;
                        case "end":&#13;
                            return b(e, { i: ["begin", "case", "fun", "if", "receive", "try"] });&#13;
                        case ",":&#13;
                            return b(e, {&#13;
                                e: ["begin", "try", "when", "-&gt;", ",", "(", "[", "{", "&lt;&lt;"]&#13;
                            });&#13;
                        case "-&gt;":&#13;
                            return b(e, { r: ["when"], m: ["try", "if", "case", "receive"] });&#13;
                        case ";":&#13;
                            return b(e, { E: ["case", "fun", "if", "receive", "try", "when"] });&#13;
                        case "catch":&#13;
                            return b(e, { e: ["try"] });&#13;
                        case "of":&#13;
                            return b(e, { e: ["case"] });&#13;
                        case "after":&#13;
                            return b(e, { e: ["receive", "try"] });&#13;
                        default:&#13;
                            return e;&#13;
                    }&#13;
                }&#13;
                function b(e, t) {&#13;
                    for (var r in t)&#13;
                        for (var n = e.length - 1, i = t[r], o = n - 1; o &gt; -1; o--)&#13;
                            if (c(e[o].token, i)) {&#13;
                                var a = e.slice(0, o);&#13;
                                switch (r) {&#13;
                                    case "m":&#13;
                                        return a.concat(e[o]).concat(e[n]);&#13;
                                    case "r":&#13;
                                        return a.concat(e[n]);&#13;
                                    case "i":&#13;
                                        return a;&#13;
                                    case "g":&#13;
                                        return a.concat(m("group"));&#13;
                                    case "E":&#13;
                                        return a.concat(e[o]);&#13;
                                    case "e":&#13;
                                        return a.concat(e[o]);&#13;
                                }&#13;
                            }&#13;
                    return "E" == r ? [] : e;&#13;
                }&#13;
                function y(r, n) {&#13;
                    var i,&#13;
                        o = t.indentUnit,&#13;
                        a = x(n),&#13;
                        s = h(r, 1),&#13;
                        l = h(r, 2);&#13;
                    return r.in_string || r.in_atom&#13;
                        ? e.Pass&#13;
                        : l&#13;
                            ? "when" == s.token&#13;
                                ? s.column + o&#13;
                                : "when" === a &amp;&amp; "function" === l.type&#13;
                                    ? l.indent + o&#13;
                                    : "(" === a &amp;&amp; "fun" === s.token&#13;
                                        ? s.column + 3&#13;
                                        : "catch" === a &amp;&amp; (i = _(r, ["try"]))&#13;
                                            ? i.column&#13;
                                            : c(a, ["end", "after", "of"])&#13;
                                                ? ((i = _(r, [&#13;
                                                      "begin",&#13;
                                                      "case",&#13;
                                                      "fun",&#13;
                                                      "if",&#13;
                                                      "receive",&#13;
                                                      "try"&#13;
                                                  ])),&#13;
                                                  i ? i.column : e.Pass)&#13;
                                                : c(a, A)&#13;
                                                    ? ((i = _(r, P)), i ? i.column : e.Pass)&#13;
                                                    : c(s.token, [",", "|", "||"]) ||&#13;
                                                      c(a, [",", "|", "||"])&#13;
                                                        ? ((i = k(r)),&#13;
                                                          i ? i.column + i.token.length : o)&#13;
                                                        : "-&gt;" == s.token&#13;
                                                            ? c(l.token, [&#13;
                                                                  "receive",&#13;
                                                                  "case",&#13;
                                                                  "if",&#13;
                                                                  "try"&#13;
                                                              ])&#13;
                                                                ? l.column + o + o&#13;
                                                                : l.column + o&#13;
                                                            : c(s.token, P)&#13;
                                                                ? s.column + s.token.length&#13;
                                                                : ((i = w(r)),&#13;
                                                                  S(i) ? i.column + o : 0)&#13;
                            : 0;&#13;
                }&#13;
                function x(e) {&#13;
                    var t = e.match(/,|[a-z]+|\}|\]|\)|&gt;&gt;|\|+|\(/);&#13;
                    return S(t) &amp;&amp; 0 === t.index ? t[0] : "";&#13;
                }&#13;
                function k(e) {&#13;
                    var t = e.tokenStack.slice(0, -1),&#13;
                        r = C(t, "type", ["open_paren"]);&#13;
                    return S(t[r]) ? t[r] : !1;&#13;
                }&#13;
                function w(e) {&#13;
                    var t = e.tokenStack,&#13;
                        r = C(t, "type", ["open_paren", "separator", "keyword"]),&#13;
                        n = C(t, "type", ["operator"]);&#13;
                    return S(r) &amp;&amp; S(n) &amp;&amp; n &gt; r ? t[r + 1] : S(r) ? t[r] : !1;&#13;
                }&#13;
                function _(e, t) {&#13;
                    var r = e.tokenStack,&#13;
                        n = C(r, "token", t);&#13;
&#13;
                    return S(r[n]) ? r[n] : !1;&#13;
                }&#13;
                function C(e, t, r) {&#13;
                    for (var n = e.length - 1; n &gt; -1; n--) if (c(e[n][t], r)) return n;&#13;
                    return !1;&#13;
                }&#13;
                function S(e) {&#13;
                    return e !== !1 &amp;&amp; null != e;&#13;
                }&#13;
                var T = ["-type", "-spec", "-export_type", "-opaque"],&#13;
                    M = [&#13;
                        "after",&#13;
                        "begin",&#13;
                        "catch",&#13;
                        "case",&#13;
                        "cond",&#13;
                        "end",&#13;
                        "fun",&#13;
                        "if",&#13;
                        "let",&#13;
                        "of",&#13;
                        "query",&#13;
                        "receive",&#13;
                        "try",&#13;
                        "when"&#13;
                    ],&#13;
                    L = /[\-&gt;,;]/,&#13;
                    E = ["-&gt;", ";", ","],&#13;
                    q = [&#13;
                        "and",&#13;
                        "andalso",&#13;
                        "band",&#13;
                        "bnot",&#13;
                        "bor",&#13;
                        "bsl",&#13;
                        "bsr",&#13;
                        "bxor",&#13;
                        "div",&#13;
                        "not",&#13;
                        "or",&#13;
                        "orelse",&#13;
                        "rem",&#13;
                        "xor"&#13;
                    ],&#13;
                    j = /[\+\-\*\/&lt;&gt;=\|:!]/,&#13;
                    z = [&#13;
                        "=",&#13;
                        "+",&#13;
                        "-",&#13;
                        "*",&#13;
                        "/",&#13;
                        "&gt;",&#13;
                        "&gt;=",&#13;
                        "&lt;",&#13;
                        "=&lt;",&#13;
                        "=:=",&#13;
                        "==",&#13;
                        "=/=",&#13;
                        "/=",&#13;
                        "||",&#13;
                        "&lt;-",&#13;
                        "!"&#13;
                    ],&#13;
                    I = /[&lt;\(\[\{]/,&#13;
                    P = ["&lt;&lt;", "(", "[", "{"],&#13;
                    D = /[&gt;\)\]\}]/,&#13;
                    A = ["}", "]", ")", "&gt;&gt;"],&#13;
                    $ = [&#13;
                        "is_atom",&#13;
                        "is_binary",&#13;
                        "is_bitstring",&#13;
                        "is_boolean",&#13;
                        "is_float",&#13;
                        "is_function",&#13;
                        "is_integer",&#13;
                        "is_list",&#13;
                        "is_number",&#13;
                        "is_pid",&#13;
                        "is_port",&#13;
                        "is_record",&#13;
                        "is_reference",&#13;
                        "is_tuple",&#13;
                        "atom",&#13;
                        "binary",&#13;
                        "bitstring",&#13;
                        "boolean",&#13;
                        "function",&#13;
                        "integer",&#13;
                        "list",&#13;
                        "number",&#13;
                        "pid",&#13;
                        "port",&#13;
                        "record",&#13;
                        "reference",&#13;
                        "tuple"&#13;
                    ],&#13;
                    O = [&#13;
                        "abs",&#13;
                        "adler32",&#13;
                        "adler32_combine",&#13;
                        "alive",&#13;
                        "apply",&#13;
                        "atom_to_binary",&#13;
                        "atom_to_list",&#13;
                        "binary_to_atom",&#13;
                        "binary_to_existing_atom",&#13;
                        "binary_to_list",&#13;
                        "binary_to_term",&#13;
                        "bit_size",&#13;
                        "bitstring_to_list",&#13;
                        "byte_size",&#13;
                        "check_process_code",&#13;
                        "contact_binary",&#13;
                        "crc32",&#13;
                        "crc32_combine",&#13;
                        "date",&#13;
                        "decode_packet",&#13;
                        "delete_module",&#13;
                        "disconnect_node",&#13;
                        "element",&#13;
                        "erase",&#13;
                        "exit",&#13;
                        "float",&#13;
                        "float_to_list",&#13;
                        "garbage_collect",&#13;
                        "get",&#13;
                        "get_keys",&#13;
                        "group_leader",&#13;
                        "halt",&#13;
                        "hd",&#13;
                        "integer_to_list",&#13;
                        "internal_bif",&#13;
                        "iolist_size",&#13;
                        "iolist_to_binary",&#13;
                        "is_alive",&#13;
                        "is_atom",&#13;
                        "is_binary",&#13;
                        "is_bitstring",&#13;
                        "is_boolean",&#13;
                        "is_float",&#13;
                        "is_function",&#13;
                        "is_integer",&#13;
                        "is_list",&#13;
                        "is_number",&#13;
                        "is_pid",&#13;
                        "is_port",&#13;
                        "is_process_alive",&#13;
                        "is_record",&#13;
                        "is_reference",&#13;
                        "is_tuple",&#13;
                        "length",&#13;
                        "link",&#13;
                        "list_to_atom",&#13;
                        "list_to_binary",&#13;
                        "list_to_bitstring",&#13;
                        "list_to_existing_atom",&#13;
                        "list_to_float",&#13;
                        "list_to_integer",&#13;
                        "list_to_pid",&#13;
                        "list_to_tuple",&#13;
                        "load_module",&#13;
                        "make_ref",&#13;
                        "module_loaded",&#13;
                        "monitor_node",&#13;
                        "node",&#13;
                        "node_link",&#13;
                        "node_unlink",&#13;
                        "nodes",&#13;
                        "notalive",&#13;
                        "now",&#13;
                        "open_port",&#13;
                        "pid_to_list",&#13;
                        "port_close",&#13;
                        "port_command",&#13;
                        "port_connect",&#13;
                        "port_control",&#13;
                        "pre_loaded",&#13;
                        "process_flag",&#13;
                        "process_info",&#13;
                        "processes",&#13;
                        "purge_module",&#13;
                        "put",&#13;
                        "register",&#13;
                        "registered",&#13;
                        "round",&#13;
                        "self",&#13;
                        "setelement",&#13;
                        "size",&#13;
                        "spawn",&#13;
                        "spawn_link",&#13;
                        "spawn_monitor",&#13;
                        "spawn_opt",&#13;
                        "split_binary",&#13;
                        "statistics",&#13;
                        "term_to_binary",&#13;
                        "time",&#13;
                        "throw",&#13;
                        "tl",&#13;
                        "trunc",&#13;
                        "tuple_size",&#13;
                        "tuple_to_list",&#13;
                        "unlink",&#13;
                        "unregister",&#13;
                        "whereis"&#13;
                    ],&#13;
                    R = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/,&#13;
                    F = /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;&#13;
                return {&#13;
                    startState: function() {&#13;
                        return { tokenStack: [], in_string: !1, in_atom: !1 };&#13;
                    },&#13;
                    token: function(e, t) {&#13;
                        return r(e, t);&#13;
                    },&#13;
                    indent: function(e, t) {&#13;
                        return y(e, t);&#13;
                    },&#13;
                    lineComment: "%"&#13;
                };&#13;
            });&#13;
    }),&#13;
    (function(e) {&#13;
        "object" == typeof exports &amp;&amp; "object" == typeof module&#13;
            ? e(&#13;
                  require("../../lib/codemirror"),&#13;
                  require("../javascript/javascript"),&#13;
                  require("../css/css"),&#13;
                  require("../htmlmixed/htmlmixed")&#13;
              )&#13;
            : "function" == typeof define &amp;&amp; define.amd&#13;
                ? define([&#13;
                      "../../lib/codemirror",&#13;
                      "../javascript/javascript",&#13;
                      "../css/css",&#13;
                      "../htmlmixed/htmlmixed"&#13;
                  ], e)&#13;
                : e(CodeMirror);&#13;
    })(function(e) {&#13;
        "use strict";&#13;
        e.defineMode("jade", function(t) {&#13;
            function r() {&#13;
                (this.javaScriptLine = !1),&#13;
                    (this.javaScriptLineExcludesColon = !1),&#13;
                    (this.javaScriptArguments = !1),&#13;
                    (this.javaScriptArgumentsDepth = 0),&#13;
                    (this.isInterpolating = !1),&#13;
                    (this.interpolationNesting = 0),&#13;
                    (this.jsState = Q.startState()),&#13;
                    (this.restOfLine = ""),&#13;
                    (this.isIncludeFiltered = !1),&#13;
                    (this.isEach = !1),&#13;
                    (this.lastTag = ""),&#13;
                    (this.scriptType = ""),&#13;
                    (this.isAttrs = !1),&#13;
                    (this.attrsNest = []),&#13;
                    (this.inAttributeName = !0),&#13;
                    (this.attributeIsType = !1),&#13;
                    (this.attrValue = ""),&#13;
                    (this.indentOf = 1 / 0),&#13;
                    (this.indentToken = ""),&#13;
                    (this.innerMode = null),&#13;
                    (this.innerState = null),&#13;
                    (this.innerModeForLine = !1);&#13;
            }&#13;
            function n(e, t) {&#13;
                if (&#13;
                    (e.sol() &amp;&amp; ((t.javaScriptLine = !1), (t.javaScriptLineExcludesColon = !1)),&#13;
                    t.javaScriptLine)&#13;
                ) {&#13;
                    if (t.javaScriptLineExcludesColon &amp;&amp; ":" === e.peek())&#13;
                        return (t.javaScriptLine = !1), void (t.javaScriptLineExcludesColon = !1);&#13;
                    var r = Q.token(e, t.jsState);&#13;
                    return e.eol() &amp;&amp; (t.javaScriptLine = !1), r || !0;&#13;
                }&#13;
            }&#13;
            function i(e, t) {&#13;
                if (t.javaScriptArguments) {&#13;
                    if (0 === t.javaScriptArgumentsDepth &amp;&amp; "(" !== e.peek())&#13;
                        return void (t.javaScriptArguments = !1);&#13;
                    if (&#13;
                        ("(" === e.peek()&#13;
                            ? t.javaScriptArgumentsDepth++&#13;
                            : ")" === e.peek() &amp;&amp; t.javaScriptArgumentsDepth--,&#13;
                        0 === t.javaScriptArgumentsDepth)&#13;
                    )&#13;
                        return void (t.javaScriptArguments = !1);&#13;
                    var r = Q.token(e, t.jsState);&#13;
                    return r || !0;&#13;
                }&#13;
            }&#13;
            function o(e) {&#13;
                return e.match(/^yield\b/) ? "keyword" : void 0;&#13;
            }&#13;
            function a(e) {&#13;
                return e.match(/^(?:doctype) *([^\n]+)?/) ? K : void 0;&#13;
            }&#13;
            function s(e, t) {&#13;
                return e.match("#{")&#13;
                    ? ((t.isInterpolating = !0), (t.interpolationNesting = 0), "punctuation")&#13;
                    : void 0;&#13;
            }&#13;
            function l(e, t) {&#13;
                if (t.isInterpolating) {&#13;
                    if ("}" === e.peek()) {&#13;
                        if ((t.interpolationNesting--, t.interpolationNesting &lt; 0))&#13;
                            return e.next(), (t.isInterpolating = !1), "puncutation";&#13;
                    } else "{" === e.peek() &amp;&amp; t.interpolationNesting++;&#13;
                    return Q.token(e, t.jsState) || !0;&#13;
                }&#13;
            }&#13;
            function c(e, t) {&#13;
                return e.match(/^case\b/) ? ((t.javaScriptLine = !0), V) : void 0;&#13;
            }&#13;
            function u(e, t) {&#13;
                return e.match(/^when\b/)&#13;
                    ? ((t.javaScriptLine = !0), (t.javaScriptLineExcludesColon = !0), V)&#13;
                    : void 0;&#13;
            }&#13;
            function d(e) {&#13;
                return e.match(/^default\b/) ? V : void 0;&#13;
            }&#13;
            function f(e, t) {&#13;
                return e.match(/^extends?\b/) ? ((t.restOfLine = "string"), V) : void 0;&#13;
            }&#13;
            function m(e, t) {&#13;
                return e.match(/^append\b/) ? ((t.restOfLine = "variable"), V) : void 0;&#13;
            }&#13;
            function h(e, t) {&#13;
                return e.match(/^prepend\b/) ? ((t.restOfLine = "variable"), V) : void 0;&#13;
            }&#13;
            function p(e, t) {&#13;
                return e.match(/^block\b *(?:(prepend|append)\b)?/)&#13;
                    ? ((t.restOfLine = "variable"), V)&#13;
                    : void 0;&#13;
            }&#13;
            function g(e, t) {&#13;
                return e.match(/^include\b/) ? ((t.restOfLine = "string"), V) : void 0;&#13;
            }&#13;
            function v(e, t) {&#13;
                return e.match(/^include:([a-zA-Z0-9\-]+)/, !1) &amp;&amp; e.match("include")&#13;
                    ? ((t.isIncludeFiltered = !0), V)&#13;
                    : void 0;&#13;
            }&#13;
            function b(e, t) {&#13;
                if (t.isIncludeFiltered) {&#13;
                    var r = M(e, t);&#13;
                    return (t.isIncludeFiltered = !1), (t.restOfLine = "string"), r;&#13;
                }&#13;
            }&#13;
            function y(e, t) {&#13;
                return e.match(/^mixin\b/) ? ((t.javaScriptLine = !0), V) : void 0;&#13;
            }&#13;
            function x(e, t) {&#13;
                return e.match(/^\+([-\w]+)/)&#13;
                    ? (e.match(/^\( *[-\w]+ *=/, !1) ||&#13;
                          ((t.javaScriptArguments = !0), (t.javaScriptArgumentsDepth = 0)),&#13;
                      "variable")&#13;
                    : e.match(/^\+#{/, !1)&#13;
                        ? (e.next(), (t.mixinCallAfter = !0), s(e, t))&#13;
                        : void 0;&#13;
            }&#13;
            function k(e, t) {&#13;
                return t.mixinCallAfter&#13;
                    ? ((t.mixinCallAfter = !1),&#13;
                      e.match(/^\( *[-\w]+ *=/, !1) ||&#13;
                          ((t.javaScriptArguments = !0), (t.javaScriptArgumentsDepth = 0)),&#13;
                      !0)&#13;
                    : void 0;&#13;
            }&#13;
            function w(e, t) {&#13;
                return e.match(/^(if|unless|else if|else)\b/)&#13;
                    ? ((t.javaScriptLine = !0), V)&#13;
                    : void 0;&#13;
            }&#13;
            function _(e, t) {&#13;
                return e.match(/^(- *)?(each|for)\b/) ? ((t.isEach = !0), V) : void 0;&#13;
            }&#13;
            function C(e, t) {&#13;
                if (t.isEach) {&#13;
                    if (e.match(/^ in\b/)) return (t.javaScriptLine = !0), (t.isEach = !1), V;&#13;
                    if (e.sol() || e.eol()) t.isEach = !1;&#13;
                    else if (e.next()) {&#13;
                        for (; !e.match(/^ in\b/, !1) &amp;&amp; e.next(); );&#13;
                        return "variable";&#13;
                    }&#13;
                }&#13;
            }&#13;
            function S(e, t) {&#13;
                return e.match(/^while\b/) ? ((t.javaScriptLine = !0), V) : void 0;&#13;
            }&#13;
            function T(e, t) {&#13;
                var r;&#13;
                return (r = e.match(/^(\w(?:[-:\w]*\w)?)\/?/))&#13;
                    ? ((t.lastTag = r[1].toLowerCase()),&#13;
                      "script" === t.lastTag &amp;&amp; (t.scriptType = "application/javascript"),&#13;
                      "tag")&#13;
                    : void 0;&#13;
            }&#13;
            function M(r, n) {&#13;
                if (r.match(/^:([\w\-]+)/)) {&#13;
                    var i;&#13;
                    return (&#13;
                        t &amp;&amp; t.innerModes &amp;&amp; (i = t.innerModes(r.current().substring(1))),&#13;
                        i || (i = r.current().substring(1)),&#13;
                        "string" == typeof i &amp;&amp; (i = e.getMode(t, i)),&#13;
                        F(r, n, i),&#13;
                        "atom"&#13;
                    );&#13;
                }&#13;
            }&#13;
            function L(e, t) {&#13;
                return e.match(/^(!?=|-)/) ? ((t.javaScriptLine = !0), "punctuation") : void 0;&#13;
            }&#13;
            function E(e) {&#13;
                return e.match(/^#([\w-]+)/) ? Z : void 0;&#13;
            }&#13;
            function q(e) {&#13;
                return e.match(/^\.([\w-]+)/) ? G : void 0;&#13;
            }&#13;
            function j(e, t) {&#13;
                return "(" == e.peek()&#13;
                    ? (e.next(),&#13;
                      (t.isAttrs = !0),&#13;
                      (t.attrsNest = []),&#13;
                      (t.inAttributeName = !0),&#13;
                      (t.attrValue = ""),&#13;
                      (t.attributeIsType = !1),&#13;
                      "punctuation")&#13;
                    : void 0;&#13;
            }&#13;
            function z(e, t) {&#13;
                if (t.isAttrs) {&#13;
                    if (&#13;
                        (X[e.peek()] &amp;&amp; t.attrsNest.push(X[e.peek()]),&#13;
                        t.attrsNest[t.attrsNest.length - 1] === e.peek())&#13;
                    )&#13;
                        t.attrsNest.pop();&#13;
                    else if (e.eat(")")) return (t.isAttrs = !1), "punctuation";&#13;
                    if (t.inAttributeName &amp;&amp; e.match(/^[^=,\)!]+/))&#13;
                        return (&#13;
                            ("=" === e.peek() || "!" === e.peek()) &amp;&amp;&#13;
                                ((t.inAttributeName = !1),&#13;
                                (t.jsState = Q.startState()),&#13;
                                "script" === t.lastTag &amp;&amp;&#13;
                                "type" ===&#13;
                                    e&#13;
                                        .current()&#13;
                                        .trim()&#13;
                                        .toLowerCase()&#13;
                                    ? (t.attributeIsType = !0)&#13;
                                    : (t.attributeIsType = !1)),&#13;
                            "attribute"&#13;
                        );&#13;
                    var r = Q.token(e, t.jsState);&#13;
                    if (&#13;
                        (t.attributeIsType &amp;&amp;&#13;
                            "string" === r &amp;&amp;&#13;
                            (t.scriptType = e.current().toString()),&#13;
                        0 === t.attrsNest.length &amp;&amp;&#13;
                            ("string" === r || "variable" === r || "keyword" === r))&#13;
                    )&#13;
                        try {&#13;
                            return (&#13;
                                Function(&#13;
                                    "",&#13;
                                    "var x " + t.attrValue.replace(/,\s*$/, "").replace(/^!/, "")&#13;
                                ),&#13;
                                (t.inAttributeName = !0),&#13;
                                (t.attrValue = ""),&#13;
                                e.backUp(e.current().length),&#13;
                                z(e, t)&#13;
                            );&#13;
                        } catch (n) {}&#13;
                    return (t.attrValue += e.current()), r || !0;&#13;
                }&#13;
            }&#13;
            function I(e, t) {&#13;
                return e.match(/^&amp;attributes\b/)&#13;
                    ? ((t.javaScriptArguments = !0), (t.javaScriptArgumentsDepth = 0), "keyword")&#13;
                    : void 0;&#13;
            }&#13;
            function P(e) {&#13;
                return e.sol() &amp;&amp; e.eatSpace() ? "indent" : void 0;&#13;
            }&#13;
            function D(e, t) {&#13;
                return e.match(/^ *\/\/(-)?([^\n]*)/)&#13;
                    ? ((t.indentOf = e.indentation()), (t.indentToken = "comment"), "comment")&#13;
                    : void 0;&#13;
            }&#13;
            function A(e) {&#13;
                return e.match(/^: */) ? "colon" : void 0;&#13;
            }&#13;
            function $(e, t) {&#13;
                return e.match(/^(?:\| ?| )([^\n]+)/)&#13;
                    ? "string"&#13;
                    : e.match(/^(&lt;[^\n]*)/, !1)&#13;
                        ? (F(e, t, "htmlmixed"), (t.innerModeForLine = !0), H(e, t, !0))&#13;
                        : void 0;&#13;
            }&#13;
            function O(e, t) {&#13;
                if (e.eat(".")) {&#13;
                    var r = null;&#13;
                    return (&#13;
                        "script" === t.lastTag &amp;&amp;&#13;
                        -1 != t.scriptType.toLowerCase().indexOf("javascript")&#13;
                            ? (r = t.scriptType.toLowerCase().replace(/"|'/g, ""))&#13;
                            : "style" === t.lastTag &amp;&amp; (r = "css"),&#13;
                        F(e, t, r),&#13;
                        "dot"&#13;
                    );&#13;
                }&#13;
            }&#13;
            function R(e) {&#13;
                return e.next(), null;&#13;
            }&#13;
            function F(r, n, i) {&#13;
                (i = e.mimeModes[i] || i),&#13;
                    (i = t.innerModes ? t.innerModes(i) || i : i),&#13;
                    (i = e.mimeModes[i] || i),&#13;
                    (i = e.getMode(t, i)),&#13;
                    (n.indentOf = r.indentation()),&#13;
                    i &amp;&amp; "null" !== i.name ? (n.innerMode = i) : (n.indentToken = "string");&#13;
            }&#13;
            function H(e, t, r) {&#13;
                return e.indentation() &gt; t.indentOf || (t.innerModeForLine &amp;&amp; !e.sol()) || r&#13;
                    ? t.innerMode&#13;
                        ? (t.innerState ||&#13;
                              (t.innerState = t.innerMode.startState&#13;
                                  ? t.innerMode.startState(e.indentation())&#13;
                                  : {}),&#13;
                          e.hideFirstChars(t.indentOf + 2, function() {&#13;
                              return t.innerMode.token(e, t.innerState) || !0;&#13;
                          }))&#13;
                        : (e.skipToEnd(), t.indentToken)&#13;
                    : void (&#13;
                          e.sol() &amp;&amp;&#13;
                          ((t.indentOf = 1 / 0),&#13;
                          (t.indentToken = null),&#13;
                          (t.innerMode = null),&#13;
                          (t.innerState = null))&#13;
                      );&#13;
            }&#13;
            function N(e, t) {&#13;
                if ((e.sol() &amp;&amp; (t.restOfLine = ""), t.restOfLine)) {&#13;
                    e.skipToEnd();&#13;
                    var r = t.restOfLine;&#13;
                    return (t.restOfLine = ""), r;&#13;
                }&#13;
            }&#13;
            function B() {&#13;
                return new r();&#13;
            }&#13;
            function U(e) {&#13;
                return e.copy();&#13;
            }&#13;
            function W(e, t) {&#13;
                var r =&#13;
                    H(e, t) ||&#13;
                    N(e, t) ||&#13;
                    l(e, t) ||&#13;
                    b(e, t) ||&#13;
                    C(e, t) ||&#13;
                    z(e, t) ||&#13;
                    n(e, t) ||&#13;
                    i(e, t) ||&#13;
                    k(e, t) ||&#13;
                    o(e, t) ||&#13;
                    a(e, t) ||&#13;
                    s(e, t) ||&#13;
                    c(e, t) ||&#13;
                    u(e, t) ||&#13;
                    d(e, t) ||&#13;
                    f(e, t) ||&#13;
                    m(e, t) ||&#13;
                    h(e, t) ||&#13;
                    p(e, t) ||&#13;
                    g(e, t) ||&#13;
                    v(e, t) ||&#13;
                    y(e, t) ||&#13;
                    x(e, t) ||&#13;
                    w(e, t) ||&#13;
                    _(e, t) ||&#13;
                    S(e, t) ||&#13;
                    T(e, t) ||&#13;
                    M(e, t) ||&#13;
                    L(e, t) ||&#13;
                    E(e, t) ||&#13;
                    q(e, t) ||&#13;
                    j(e, t) ||&#13;
                    I(e, t) ||&#13;
                    P(e, t) ||&#13;
                    $(e, t) ||&#13;
                    D(e, t) ||&#13;
                    A(e, t) ||&#13;
                    O(e, t) ||&#13;
                    R(e, t);&#13;
                return r === !0 ? null : r;&#13;
            }&#13;
            var V = "keyword",&#13;
                K = "meta",&#13;
                Z = "builtin",&#13;
                G = "qualifier",&#13;
                X = { "{": "}", "(": ")", "[": "]" },&#13;
                Q = e.getMode(t, "javascript");&#13;
            return (&#13;
                (r.prototype.copy = function() {&#13;
                    var t = new r();&#13;
                    return (&#13;
                        (t.javaScriptLine = this.javaScriptLine),&#13;
                        (t.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon),&#13;
                        (t.javaScriptArguments = this.javaScriptArguments),&#13;
                        (t.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth),&#13;
                        (t.isInterpolating = this.isInterpolating),&#13;
                        (t.interpolationNesting = this.intpolationNesting),&#13;
                        (t.jsState = e.copyState(Q, this.jsState)),&#13;
                        (t.innerMode = this.innerMode),&#13;
                        this.innerMode &amp;&amp;&#13;
                            this.innerState &amp;&amp;&#13;
                            (t.innerState = e.copyState(this.innerMode, this.innerState)),&#13;
                        (t.restOfLine = this.restOfLine),&#13;
                        (t.isIncludeFiltered = this.isIncludeFiltered),&#13;
                        (t.isEach = this.isEach),&#13;
                        (t.lastTag = this.lastTag),&#13;
                        (t.scriptType = this.scriptType),&#13;
                        (t.isAttrs = this.isAttrs),&#13;
                        (t.attrsNest = this.attrsNest.slice()),&#13;
                        (t.inAttributeName = this.inAttributeName),&#13;
                        (t.attributeIsType = this.attributeIsType),&#13;
                        (t.attrValue = this.attrValue),&#13;
                        (t.indentOf = this.indentOf),&#13;
                        (t.indentToken = this.indentToken),&#13;
                        (t.innerModeForLine = this.innerModeForLine),&#13;
                        t&#13;
                    );&#13;
                }),&#13;
                { startState: B, copyState: U, token: W }&#13;
            );&#13;
        }),&#13;
            e.defineMIME("text/x-jade", "jade");&#13;
    });&#13;
</script>
        <script_name>modes_min</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-06 07:20:58</sys_created_on>
        <sys_id>4951c96a4fe52300ecf18c318110c7bb</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>x_58056_md_docs.modes_min</sys_name>
        <sys_package display_value="Markdown Documents" source="x_58056_md_docs">7ac0b5344f212300ecf18c318110c745</sys_package>
        <sys_policy/>
        <sys_scope display_value="Markdown Documents">7ac0b5344f212300ecf18c318110c745</sys_scope>
        <sys_update_name>sys_ui_script_4951c96a4fe52300ecf18c318110c7bb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-06 07:38:31</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
